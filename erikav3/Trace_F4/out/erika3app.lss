
erika3app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003334  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003658  08003658  00013658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08003660  08003660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000488  20000000  0800366c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020488  2**0
                  CONTENTS
  8 .bss          00000574  20000488  20000488  00020488  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200009fc  200009fc  00020488  2**0
                  ALLOC
 10 .ARM.attributes 0000002a  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016854  00000000  00000000  000204b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003c67  00000000  00000000  00036d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ef8  00000000  00000000  0003a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001190  00000000  00000000  0003b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040731  00000000  00000000  0003c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00021a79  00000000  00000000  0007d129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fd085  00000000  00000000  0009eba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000049  00000000  00000000  0019bc27  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002598  00000000  00000000  0019bc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    0000ae48  00000000  00000000  0019e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000488 	.word	0x20000488
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080034dc 	.word	0x080034dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000048c 	.word	0x2000048c
 80001fc:	080034dc 	.word	0x080034dc

08000200 <strlen>:
 8000200:	f890 f000 	pld	[r0]
 8000204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000208:	f020 0107 	bic.w	r1, r0, #7
 800020c:	f06f 0c00 	mvn.w	ip, #0
 8000210:	f010 0407 	ands.w	r4, r0, #7
 8000214:	f891 f020 	pld	[r1, #32]
 8000218:	f040 8049 	bne.w	80002ae <strlen+0xae>
 800021c:	f04f 0400 	mov.w	r4, #0
 8000220:	f06f 0007 	mvn.w	r0, #7
 8000224:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000228:	f891 f040 	pld	[r1, #64]	; 0x40
 800022c:	f100 0008 	add.w	r0, r0, #8
 8000230:	fa82 f24c 	uadd8	r2, r2, ip
 8000234:	faa4 f28c 	sel	r2, r4, ip
 8000238:	fa83 f34c 	uadd8	r3, r3, ip
 800023c:	faa2 f38c 	sel	r3, r2, ip
 8000240:	bb4b      	cbnz	r3, 8000296 <strlen+0x96>
 8000242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000246:	fa82 f24c 	uadd8	r2, r2, ip
 800024a:	f100 0008 	add.w	r0, r0, #8
 800024e:	faa4 f28c 	sel	r2, r4, ip
 8000252:	fa83 f34c 	uadd8	r3, r3, ip
 8000256:	faa2 f38c 	sel	r3, r2, ip
 800025a:	b9e3      	cbnz	r3, 8000296 <strlen+0x96>
 800025c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000260:	fa82 f24c 	uadd8	r2, r2, ip
 8000264:	f100 0008 	add.w	r0, r0, #8
 8000268:	faa4 f28c 	sel	r2, r4, ip
 800026c:	fa83 f34c 	uadd8	r3, r3, ip
 8000270:	faa2 f38c 	sel	r3, r2, ip
 8000274:	b97b      	cbnz	r3, 8000296 <strlen+0x96>
 8000276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800027a:	f101 0120 	add.w	r1, r1, #32
 800027e:	fa82 f24c 	uadd8	r2, r2, ip
 8000282:	f100 0008 	add.w	r0, r0, #8
 8000286:	faa4 f28c 	sel	r2, r4, ip
 800028a:	fa83 f34c 	uadd8	r3, r3, ip
 800028e:	faa2 f38c 	sel	r3, r2, ip
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0c6      	beq.n	8000224 <strlen+0x24>
 8000296:	2a00      	cmp	r2, #0
 8000298:	bf04      	itt	eq
 800029a:	3004      	addeq	r0, #4
 800029c:	461a      	moveq	r2, r3
 800029e:	ba12      	rev	r2, r2
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80002a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80002ac:	4770      	bx	lr
 80002ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80002b2:	f004 0503 	and.w	r5, r4, #3
 80002b6:	f1c4 0000 	rsb	r0, r4, #0
 80002ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80002be:	f014 0f04 	tst.w	r4, #4
 80002c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80002c6:	fa0c f505 	lsl.w	r5, ip, r5
 80002ca:	ea62 0205 	orn	r2, r2, r5
 80002ce:	bf1c      	itt	ne
 80002d0:	ea63 0305 	ornne	r3, r3, r5
 80002d4:	4662      	movne	r2, ip
 80002d6:	f04f 0400 	mov.w	r4, #0
 80002da:	e7a9      	b.n	8000230 <strlen+0x30>

080002dc <osEE_hal_save_ctx_and_restore_ctx>:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 * R2 parameter: 	OsEE_SCB * p_from_scb
	 */
	osEE_hal_save_vcontext_m R2
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	f3ef 8403 	mrs	r4, PSR
 80002e4:	b410      	push	{r4}
 80002e6:	4614      	mov	r4, r2
 80002e8:	6825      	ldr	r5, [r4, #0]
 80002ea:	b460      	push	{r5, r6}
 80002ec:	f3ef 8508 	mrs	r5, MSP
 80002f0:	6025      	str	r5, [r4, #0]
	B	osEE_hal_restore_ctx
 80002f2:	f000 b801 	b.w	80002f8 <osEE_hal_restore_ctx>
 80002f6:	bf00      	nop

080002f8 <osEE_hal_restore_ctx>:
osEE_hal_restore_ctx:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 */
	osEE_hal_restore_vcontext_m R1
 80002f8:	460c      	mov	r4, r1
 80002fa:	6825      	ldr	r5, [r4, #0]
 80002fc:	f385 8808 	msr	MSP, r5
 8000300:	bc60      	pop	{r5, r6}
 8000302:	6025      	str	r5, [r4, #0]
 8000304:	bc10      	pop	{r4}
 8000306:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800030a:	432c      	orrs	r4, r5
 800030c:	f384 8803 	msr	PSR, r4
 8000310:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	B	osEE_scheduler_task_wrapper_restore
 8000314:	f002 bf4a 	b.w	80031ac <osEE_scheduler_task_wrapper_restore>

08000318 <osEE_hal_ready2stacked>:
	MRS	R4, CONTROL
	LDR	R5, =CONTROL_FPCA_NEG
	ANDS	R4, R4, R5
	MSR	CONTROL, R4
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */
	LDR	R2, [R1]
 8000318:	680a      	ldr	r2, [r1, #0]
	/* sp = R2 */
	MSR	MSP, R2
 800031a:	f382 8808 	msr	MSP, r2
	B	osEE_scheduler_task_wrapper_run
 800031e:	f002 bf49 	b.w	80031b4 <osEE_scheduler_task_wrapper_run>
 8000322:	bf00      	nop

08000324 <osEE_hal_save_ctx_and_ready2stacked>:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 * R2 parameter:	OsEE_SCB * p_from_scb
	*/
	osEE_hal_save_vcontext_m R2
 8000324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000328:	f3ef 8403 	mrs	r4, PSR
 800032c:	b410      	push	{r4}
 800032e:	4614      	mov	r4, r2
 8000330:	6825      	ldr	r5, [r4, #0]
 8000332:	b460      	push	{r5, r6}
 8000334:	f3ef 8508 	mrs	r5, MSP
 8000338:	6025      	str	r5, [r4, #0]
	B	osEE_hal_ready2stacked
 800033a:	f7ff bfed 	b.w	8000318 <osEE_hal_ready2stacked>
 800033e:	bf00      	nop

08000340 <osEE_hal_terminate_ctx>:
	MRS	R4, CONTROL
	LDR	R5, =CONTROL_FPCA_NEG
	ANDS	R4, R4, R5
	MSR	CONTROL, R4
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */
	LDR	R2, [R0]
 8000340:	6802      	ldr	r2, [r0, #0]
	/* Unwind SP */
	MSR	MSP, R2
 8000342:	f382 8808 	msr	MSP, r2
	/*  Jump to kern_callback (that schedule) */
	BX	R1
 8000346:	4708      	bx	r1

08000348 <osEE_cortex_m_restore_ctx>:
osEE_cortex_m_restore_ctx:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 */
	osEE_hal_restore_vcontext_m R1
 8000348:	460c      	mov	r4, r1
 800034a:	6825      	ldr	r5, [r4, #0]
 800034c:	f385 8808 	msr	MSP, r5
 8000350:	bc60      	pop	{r5, r6}
 8000352:	6025      	str	r5, [r4, #0]
 8000354:	bc10      	pop	{r4}
 8000356:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800035a:	432c      	orrs	r4, r5
 800035c:	f384 8803 	msr	PSR, r4
 8000360:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BX	LR
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop

08000368 <osEE_set_switch_context_pri>:
	.global	osEE_set_switch_context_pri
	.type	osEE_set_switch_context_pri, #function
osEE_set_switch_context_pri:

	/* Set PendSV priority to the minumum one */
	LDR	R0, =NVIC_SHPR3
 8000368:	4815      	ldr	r0, [pc, #84]	; (80003c0 <NMI_Handler+0x8>)
	LDR	R1, =NVIC_PENDSV_PRI
 800036a:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
	LDR	R2, [R0]
 800036e:	6802      	ldr	r2, [r0, #0]
	ORRS	R2, R2, R1
 8000370:	430a      	orrs	r2, r1
	STR	R2, [R0]
 8000372:	6002      	str	r2, [r0, #0]

	/* SVCall priority to the maximum one */
	LDR	R0, =NVIC_SHPR2
 8000374:	4813      	ldr	r0, [pc, #76]	; (80003c4 <NMI_Handler+0xc>)
	LDR	R1, =NVIC_SVCALL_PRI
 8000376:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
	LDR	R2, [R0]
 800037a:	6802      	ldr	r2, [r0, #0]
	ANDS	R2, R2, R1
 800037c:	400a      	ands	r2, r1
	STR	R2, [R0]
 800037e:	6002      	str	r2, [r0, #0]

	BX	LR
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop

08000384 <osEE_cortex_m_trigger_pend_sv>:
osEE_cortex_m_trigger_pend_sv:

	/* 
	 * Trigger the PendSV exception (causes context switch)
	 */
	LDR	R0, =NVIC_INT_CTRL
 8000384:	4810      	ldr	r0, [pc, #64]	; (80003c8 <NMI_Handler+0x10>)
	LDR	R1, =NVIC_PENDSVSET
 8000386:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	STR	R1, [R0]
 800038a:	6001      	str	r1, [r0, #0]

	BX	LR
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <PendSV_Handler>:
	.global	PendSV_Handler
	.type	PendSV_Handler, %function
PendSV_Handler:

	/* Disable interrupts (set PRIMASK) */
	CPSID	I
 8000390:	b672      	cpsid	i

	/* Clear the PendSV exception (preventing 2nd triggering) */
	LDR	R2, =NVIC_INT_CTRL
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <NMI_Handler+0x10>)
	LDR	R1, =NVIC_PENDSVCLR
 8000394:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
	STR	R1, [R2]
 8000398:	6011      	str	r1, [r2, #0]
	 * EE_std_change_context(EE_TID) at the
	 * end of PendSV_Handler.
	 */

	/* R3 = 0x01000000 (xPSR) */
	LDR	R3, =EPSR_T_BIT_VAL
 800039a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

	/* R2 = osEE_cortex_m_change_context_from_task_end (PC) */
	LDR	R2, =osEE_cortex_m_change_context_from_task_end
 800039e:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <NMI_Handler+0x14>)

	/* R1 = osEE_cortex_m_thread_end (LR) */
	LDR	R1, =osEE_cortex_m_thread_end
 80003a0:	490b      	ldr	r1, [pc, #44]	; (80003d0 <NMI_Handler+0x18>)
	 * |xPSR|-> xPSR AND 0xFFFFFE0
	 * | PC |-> osEE_cortex_m_change_context_from_task_end
	 * | LR |-> osEE_cortex_m_thread_end
	 * | R12|
	 */
	PUSH	{R0-R3}
 80003a2:	b40f      	push	{r0, r1, r2, r3}
	 * | R3 |
	 * | R2 |
	 * | R1 |
	 * | R0 |
	 */
	PUSH	{R0-R3}
 80003a4:	b40f      	push	{r0, r1, r2, r3}
	/*
	 * R0 = EXC_RETURN -> Return to Thread mode.
	 *		   -> Exception return gets state from MSP.
	 *		   -> Execution uses MSP after return.
	 */
	LDR	LR, =EXC_RETURN
 80003a6:	f06f 0e06 	mvn.w	lr, #6

	BX	LR		/* EXC_RETURN. */
 80003aa:	4770      	bx	lr

080003ac <osEE_cortex_m_thread_end>:
	.global	osEE_cortex_m_thread_end
	.type	osEE_cortex_m_thread_end, %function
osEE_cortex_m_thread_end:

	/* trigger NMI to return to preempted task... */
	LDR	R0, =0xE000ED04	/* Interrupt Control and State Register */
 80003ac:	4806      	ldr	r0, [pc, #24]	; (80003c8 <NMI_Handler+0x10>)
	MOVS	R1, #1
 80003ae:	2101      	movs	r1, #1
	LSLS	R1, R1, #31	/* R0 := (1 << 31) (NMI bit) */
 80003b0:	07c9      	lsls	r1, r1, #31
	STR	R1,[r0]		/* ICSR[31] := 1 (pend NMI) */
 80003b2:	6001      	str	r1, [r0, #0]
	B	.		/* wait for preemption by NMI */
 80003b4:	e7fe      	b.n	80003b4 <osEE_cortex_m_thread_end+0x8>
 80003b6:	bf00      	nop

080003b8 <NMI_Handler>:
	.global	NMI_Handler
	.type	NMI_Handler, %function
NMI_Handler:

	/* Remove SVCall Stack-Frame. */
	ADD	SP, SP, #(8*4)
 80003b8:	b008      	add	sp, #32
	/* Retrieves original Link Register. */
	POP	{R0, LR}
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */

	/* Enable interrupts (clear PRIMASK) */
	CPSIE	I
 80003ba:	b662      	cpsie	i

	BX	LR		/* EXC_RETURN. */
 80003bc:	4770      	bx	lr
 80003be:	0000      	.short	0x0000
	LDR	R0, =NVIC_SHPR3
 80003c0:	e000ed20 	.word	0xe000ed20
	LDR	R0, =NVIC_SHPR2
 80003c4:	e000ed1c 	.word	0xe000ed1c
	LDR	R0, =NVIC_INT_CTRL
 80003c8:	e000ed04 	.word	0xe000ed04
	LDR	R2, =osEE_cortex_m_change_context_from_task_end
 80003cc:	080034a9 	.word	0x080034a9
	LDR	R1, =osEE_cortex_m_thread_end
 80003d0:	080003ad 	.word	0x080003ad

080003d4 <__aeabi_uldivmod>:
 80003d4:	b953      	cbnz	r3, 80003ec <__aeabi_uldivmod+0x18>
 80003d6:	b94a      	cbnz	r2, 80003ec <__aeabi_uldivmod+0x18>
 80003d8:	2900      	cmp	r1, #0
 80003da:	bf08      	it	eq
 80003dc:	2800      	cmpeq	r0, #0
 80003de:	bf1c      	itt	ne
 80003e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003e8:	f000 b974 	b.w	80006d4 <__aeabi_idiv0>
 80003ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80003f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003f4:	f000 f806 	bl	8000404 <__udivmoddi4>
 80003f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000400:	b004      	add	sp, #16
 8000402:	4770      	bx	lr

08000404 <__udivmoddi4>:
 8000404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000408:	9e08      	ldr	r6, [sp, #32]
 800040a:	460d      	mov	r5, r1
 800040c:	4604      	mov	r4, r0
 800040e:	4688      	mov	r8, r1
 8000410:	2b00      	cmp	r3, #0
 8000412:	d14d      	bne.n	80004b0 <__udivmoddi4+0xac>
 8000414:	428a      	cmp	r2, r1
 8000416:	4694      	mov	ip, r2
 8000418:	d968      	bls.n	80004ec <__udivmoddi4+0xe8>
 800041a:	fab2 f282 	clz	r2, r2
 800041e:	b152      	cbz	r2, 8000436 <__udivmoddi4+0x32>
 8000420:	fa01 f302 	lsl.w	r3, r1, r2
 8000424:	f1c2 0120 	rsb	r1, r2, #32
 8000428:	fa20 f101 	lsr.w	r1, r0, r1
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	ea41 0803 	orr.w	r8, r1, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800043a:	0c21      	lsrs	r1, r4, #16
 800043c:	fbb8 fef5 	udiv	lr, r8, r5
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fb05 831e 	mls	r3, r5, lr, r8
 8000448:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800044c:	fb0e f107 	mul.w	r1, lr, r7
 8000450:	4299      	cmp	r1, r3
 8000452:	d90b      	bls.n	800046c <__udivmoddi4+0x68>
 8000454:	eb1c 0303 	adds.w	r3, ip, r3
 8000458:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 800045c:	f080 811e 	bcs.w	800069c <__udivmoddi4+0x298>
 8000460:	4299      	cmp	r1, r3
 8000462:	f240 811b 	bls.w	800069c <__udivmoddi4+0x298>
 8000466:	f1ae 0e02 	sub.w	lr, lr, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f0f5 	udiv	r0, r3, r5
 8000474:	fb05 3310 	mls	r3, r5, r0, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb00 f707 	mul.w	r7, r0, r7
 8000480:	42a7      	cmp	r7, r4
 8000482:	d90a      	bls.n	800049a <__udivmoddi4+0x96>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800048c:	f080 8108 	bcs.w	80006a0 <__udivmoddi4+0x29c>
 8000490:	42a7      	cmp	r7, r4
 8000492:	f240 8105 	bls.w	80006a0 <__udivmoddi4+0x29c>
 8000496:	4464      	add	r4, ip
 8000498:	3802      	subs	r0, #2
 800049a:	1be4      	subs	r4, r4, r7
 800049c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80004a0:	2100      	movs	r1, #0
 80004a2:	b11e      	cbz	r6, 80004ac <__udivmoddi4+0xa8>
 80004a4:	40d4      	lsrs	r4, r2
 80004a6:	2300      	movs	r3, #0
 80004a8:	e9c6 4300 	strd	r4, r3, [r6]
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0xc2>
 80004b4:	2e00      	cmp	r6, #0
 80004b6:	f000 80ee 	beq.w	8000696 <__udivmoddi4+0x292>
 80004ba:	2100      	movs	r1, #0
 80004bc:	e9c6 0500 	strd	r0, r5, [r6]
 80004c0:	4608      	mov	r0, r1
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d14a      	bne.n	8000564 <__udivmoddi4+0x160>
 80004ce:	42ab      	cmp	r3, r5
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xd4>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 80f9 	bhi.w	80006ca <__udivmoddi4+0x2c6>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb65 0303 	sbc.w	r3, r5, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4698      	mov	r8, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d0e2      	beq.n	80004ac <__udivmoddi4+0xa8>
 80004e6:	e9c6 4800 	strd	r4, r8, [r6]
 80004ea:	e7df      	b.n	80004ac <__udivmoddi4+0xa8>
 80004ec:	b902      	cbnz	r2, 80004f0 <__udivmoddi4+0xec>
 80004ee:	deff      	udf	#255	; 0xff
 80004f0:	fab2 f282 	clz	r2, r2
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	f040 8091 	bne.w	800061c <__udivmoddi4+0x218>
 80004fa:	eba1 050c 	sub.w	r5, r1, ip
 80004fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000502:	fa1f fe8c 	uxth.w	lr, ip
 8000506:	2101      	movs	r1, #1
 8000508:	fbb5 f3f7 	udiv	r3, r5, r7
 800050c:	fb07 5013 	mls	r0, r7, r3, r5
 8000510:	0c25      	lsrs	r5, r4, #16
 8000512:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000516:	fb0e f003 	mul.w	r0, lr, r3
 800051a:	42a8      	cmp	r0, r5
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x12c>
 800051e:	eb1c 0505 	adds.w	r5, ip, r5
 8000522:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x12a>
 8000528:	42a8      	cmp	r0, r5
 800052a:	f200 80cb 	bhi.w	80006c4 <__udivmoddi4+0x2c0>
 800052e:	4643      	mov	r3, r8
 8000530:	1a2d      	subs	r5, r5, r0
 8000532:	b2a4      	uxth	r4, r4
 8000534:	fbb5 f0f7 	udiv	r0, r5, r7
 8000538:	fb07 5510 	mls	r5, r7, r0, r5
 800053c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000540:	fb0e fe00 	mul.w	lr, lr, r0
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x156>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000550:	d202      	bcs.n	8000558 <__udivmoddi4+0x154>
 8000552:	45a6      	cmp	lr, r4
 8000554:	f200 80bb 	bhi.w	80006ce <__udivmoddi4+0x2ca>
 8000558:	4628      	mov	r0, r5
 800055a:	eba4 040e 	sub.w	r4, r4, lr
 800055e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000562:	e79e      	b.n	80004a2 <__udivmoddi4+0x9e>
 8000564:	f1c1 0720 	rsb	r7, r1, #32
 8000568:	408b      	lsls	r3, r1
 800056a:	fa22 fc07 	lsr.w	ip, r2, r7
 800056e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000572:	fa20 f407 	lsr.w	r4, r0, r7
 8000576:	fa05 f301 	lsl.w	r3, r5, r1
 800057a:	431c      	orrs	r4, r3
 800057c:	40fd      	lsrs	r5, r7
 800057e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000582:	fa00 f301 	lsl.w	r3, r0, r1
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	0c20      	lsrs	r0, r4, #16
 800058c:	fa1f fe8c 	uxth.w	lr, ip
 8000590:	fb09 5518 	mls	r5, r9, r8, r5
 8000594:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000598:	fb08 f00e 	mul.w	r0, r8, lr
 800059c:	42a8      	cmp	r0, r5
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	d90b      	bls.n	80005bc <__udivmoddi4+0x1b8>
 80005a4:	eb1c 0505 	adds.w	r5, ip, r5
 80005a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80005ac:	f080 8088 	bcs.w	80006c0 <__udivmoddi4+0x2bc>
 80005b0:	42a8      	cmp	r0, r5
 80005b2:	f240 8085 	bls.w	80006c0 <__udivmoddi4+0x2bc>
 80005b6:	f1a8 0802 	sub.w	r8, r8, #2
 80005ba:	4465      	add	r5, ip
 80005bc:	1a2d      	subs	r5, r5, r0
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb5 f0f9 	udiv	r0, r5, r9
 80005c4:	fb09 5510 	mls	r5, r9, r0, r5
 80005c8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80005cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80005d0:	45ae      	cmp	lr, r5
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x1e2>
 80005d4:	eb1c 0505 	adds.w	r5, ip, r5
 80005d8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005dc:	d26c      	bcs.n	80006b8 <__udivmoddi4+0x2b4>
 80005de:	45ae      	cmp	lr, r5
 80005e0:	d96a      	bls.n	80006b8 <__udivmoddi4+0x2b4>
 80005e2:	3802      	subs	r0, #2
 80005e4:	4465      	add	r5, ip
 80005e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ea:	fba0 9402 	umull	r9, r4, r0, r2
 80005ee:	eba5 050e 	sub.w	r5, r5, lr
 80005f2:	42a5      	cmp	r5, r4
 80005f4:	46c8      	mov	r8, r9
 80005f6:	46a6      	mov	lr, r4
 80005f8:	d356      	bcc.n	80006a8 <__udivmoddi4+0x2a4>
 80005fa:	d053      	beq.n	80006a4 <__udivmoddi4+0x2a0>
 80005fc:	b15e      	cbz	r6, 8000616 <__udivmoddi4+0x212>
 80005fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000602:	eb65 050e 	sbc.w	r5, r5, lr
 8000606:	fa05 f707 	lsl.w	r7, r5, r7
 800060a:	fa22 f301 	lsr.w	r3, r2, r1
 800060e:	40cd      	lsrs	r5, r1
 8000610:	431f      	orrs	r7, r3
 8000612:	e9c6 7500 	strd	r7, r5, [r6]
 8000616:	2100      	movs	r1, #0
 8000618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061c:	f1c2 0320 	rsb	r3, r2, #32
 8000620:	fa20 f103 	lsr.w	r1, r0, r3
 8000624:	fa0c fc02 	lsl.w	ip, ip, r2
 8000628:	fa25 f303 	lsr.w	r3, r5, r3
 800062c:	4095      	lsls	r5, r2
 800062e:	430d      	orrs	r5, r1
 8000630:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000634:	fa1f fe8c 	uxth.w	lr, ip
 8000638:	fbb3 f1f7 	udiv	r1, r3, r7
 800063c:	fb07 3011 	mls	r0, r7, r1, r3
 8000640:	0c2b      	lsrs	r3, r5, #16
 8000642:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000646:	fb01 f00e 	mul.w	r0, r1, lr
 800064a:	4298      	cmp	r0, r3
 800064c:	fa04 f402 	lsl.w	r4, r4, r2
 8000650:	d908      	bls.n	8000664 <__udivmoddi4+0x260>
 8000652:	eb1c 0303 	adds.w	r3, ip, r3
 8000656:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800065a:	d22f      	bcs.n	80006bc <__udivmoddi4+0x2b8>
 800065c:	4298      	cmp	r0, r3
 800065e:	d92d      	bls.n	80006bc <__udivmoddi4+0x2b8>
 8000660:	3902      	subs	r1, #2
 8000662:	4463      	add	r3, ip
 8000664:	1a1b      	subs	r3, r3, r0
 8000666:	b2ad      	uxth	r5, r5
 8000668:	fbb3 f0f7 	udiv	r0, r3, r7
 800066c:	fb07 3310 	mls	r3, r7, r0, r3
 8000670:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000674:	fb00 f30e 	mul.w	r3, r0, lr
 8000678:	42ab      	cmp	r3, r5
 800067a:	d908      	bls.n	800068e <__udivmoddi4+0x28a>
 800067c:	eb1c 0505 	adds.w	r5, ip, r5
 8000680:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000684:	d216      	bcs.n	80006b4 <__udivmoddi4+0x2b0>
 8000686:	42ab      	cmp	r3, r5
 8000688:	d914      	bls.n	80006b4 <__udivmoddi4+0x2b0>
 800068a:	3802      	subs	r0, #2
 800068c:	4465      	add	r5, ip
 800068e:	1aed      	subs	r5, r5, r3
 8000690:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000694:	e738      	b.n	8000508 <__udivmoddi4+0x104>
 8000696:	4631      	mov	r1, r6
 8000698:	4630      	mov	r0, r6
 800069a:	e707      	b.n	80004ac <__udivmoddi4+0xa8>
 800069c:	4686      	mov	lr, r0
 800069e:	e6e5      	b.n	800046c <__udivmoddi4+0x68>
 80006a0:	4618      	mov	r0, r3
 80006a2:	e6fa      	b.n	800049a <__udivmoddi4+0x96>
 80006a4:	454b      	cmp	r3, r9
 80006a6:	d2a9      	bcs.n	80005fc <__udivmoddi4+0x1f8>
 80006a8:	ebb9 0802 	subs.w	r8, r9, r2
 80006ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006b0:	3801      	subs	r0, #1
 80006b2:	e7a3      	b.n	80005fc <__udivmoddi4+0x1f8>
 80006b4:	4640      	mov	r0, r8
 80006b6:	e7ea      	b.n	800068e <__udivmoddi4+0x28a>
 80006b8:	4620      	mov	r0, r4
 80006ba:	e794      	b.n	80005e6 <__udivmoddi4+0x1e2>
 80006bc:	4641      	mov	r1, r8
 80006be:	e7d1      	b.n	8000664 <__udivmoddi4+0x260>
 80006c0:	46d0      	mov	r8, sl
 80006c2:	e77b      	b.n	80005bc <__udivmoddi4+0x1b8>
 80006c4:	3b02      	subs	r3, #2
 80006c6:	4465      	add	r5, ip
 80006c8:	e732      	b.n	8000530 <__udivmoddi4+0x12c>
 80006ca:	4608      	mov	r0, r1
 80006cc:	e709      	b.n	80004e2 <__udivmoddi4+0xde>
 80006ce:	4464      	add	r4, ip
 80006d0:	3802      	subs	r0, #2
 80006d2:	e742      	b.n	800055a <__udivmoddi4+0x156>

080006d4 <__aeabi_idiv0>:
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <MX_DMA_Init>:
#include "../../Core/Inc/dma.h"

/* DMA handles*/

void MX_DMA_Init(void)
{
 80006d8:	b500      	push	{lr}
 80006da:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006dc:	2100      	movs	r1, #0
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_DMA_Init+0x30>)
 80006e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80006e8:	631a      	str	r2, [r3, #48]	; 0x30
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006f4:	460a      	mov	r2, r1
 80006f6:	2044      	movs	r0, #68	; 0x44
 80006f8:	f001 f8cc 	bl	8001894 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006fc:	2044      	movs	r0, #68	; 0x44
 80006fe:	f001 f901 	bl	8001904 <HAL_NVIC_EnableIRQ>

}
 8000702:	b003      	add	sp, #12
 8000704:	f85d fb04 	ldr.w	pc, [sp], #4
 8000708:	40023800 	.word	0x40023800

0800070c <victim_>:
// 	  else
// 		  max = num2;
// 	}
// }

__attribute__((optimize(0))) void victim_(){
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	MY_NOP();
 8000710:	46c0      	nop			; (mov r8, r8)
	SETUP_CONTENTION();
 8000712:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	TEN_NOPS();
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46c0      	nop			; (mov r8, r8)
	TEN_NOPS();
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46c0      	nop			; (mov r8, r8)
	TEN_NOPS();
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46c0      	nop			; (mov r8, r8)
	TEN_NOPS();
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000766:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000768:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800076a:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800076c:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800076e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000770:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000772:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000774:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000776:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000778:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800077a:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800077c:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800077e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000780:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000782:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000784:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000786:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	46c0      	nop			; (mov r8, r8)
	TEN_NOPS();
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80007b0:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007b2:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007b4:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007b6:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007b8:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007ba:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007bc:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007be:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007c0:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007c2:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007c4:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007c6:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007c8:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007ca:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007cc:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80007ce:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80007e4:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80007fa:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000810:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000826:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 800083c:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46c0      	nop			; (mov r8, r8)
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000852:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46c0      	nop			; (mov r8, r8)
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000868:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 800087e:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000894:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80008aa:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80008c0:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80008d6:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80008ec:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000902:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000918:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800091a:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800091c:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 800091e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000920:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000922:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000924:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000926:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000928:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 800093e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000940:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000956:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000958:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 800096e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000970:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000986:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000988:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 800099e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80009a0:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80009b6:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80009b8:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46c0      	nop			; (mov r8, r8)
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80009ce:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80009d0:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80009e6:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 80009e8:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 80009fe:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000a00:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000a16:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000a18:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000a2e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000a30:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000a46:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000a48:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000a5e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000a60:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000a76:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000a78:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000a8e:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000a90:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000aa6:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000aa8:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46c0      	nop			; (mov r8, r8)
	__asm volatile("ldr r1, [r5]");
 8000abe:	6829      	ldr	r1, [r5, #0]
	__asm volatile("ldr r1, [r5]");
 8000ac0:	6829      	ldr	r1, [r5, #0]
	TEN_NOPS();
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46c0      	nop			; (mov r8, r8)
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <if_code>:

__attribute__((optimize(0))) void if_code(){
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0

	MY_NOP();
 8000ae4:	46c0      	nop			; (mov r8, r8)
	SETUP_CONTENTION();
 8000ae6:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	TEN_NOPS();
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46c0      	nop			; (mov r8, r8)
	int s, v=0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]

	if(s == 0){
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <if_code+0x30>
		v = 12;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	607b      	str	r3, [r7, #4]
	}
	else{
		v = 22;
	}
}
 8000b0c:	e001      	b.n	8000b12 <if_code+0x34>
		v = 22;
 8000b0e:	2316      	movs	r3, #22
 8000b10:	607b      	str	r3, [r7, #4]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <get_accurate_trace>:
// START PROFILING ATTACK

TickType counter = 0;
TickRefType cntValue = &counter;

__attribute__((optimize(0))) void get_accurate_trace(int clock_to_collide, void (*victim)()){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]

	// int volatile CR1[1] = {0x80}; // Uncomment this when trying to perform contention on SRAM2

	TIM1->CNT = 0 - clock_to_collide; // Changing the collision clock
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	425a      	negs	r2, r3
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <get_accurate_trace+0x30>)
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->SR = 0;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <get_accurate_trace+0x30>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
	TIM1->DIER = 0; // Disable Update DMA request
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <get_accurate_trace+0x30>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]

	// Fixes weird bug, where the timings depend on the auto reload register, although it should not
	if(clock_to_collide%2 == 0 ) // if it is an even number
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d105      	bne.n	8000b50 <get_accurate_trace+0x34>
		TIM1->ARR = 2;
 8000b44:	4b01      	ldr	r3, [pc, #4]	; (8000b4c <get_accurate_trace+0x30>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b4a:	e004      	b.n	8000b56 <get_accurate_trace+0x3a>
 8000b4c:	40010000 	.word	0x40010000
	else
		TIM1->ARR = 1;
 8000b50:	4b85      	ldr	r3, [pc, #532]	; (8000d68 <get_accurate_trace+0x24c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c

    HAL_TIM_Base_Start(&htim2);
 8000b56:	4885      	ldr	r0, [pc, #532]	; (8000d6c <get_accurate_trace+0x250>)
 8000b58:	f001 fda1 	bl	800269e <HAL_TIM_Base_Start>
	// Configure and enable DMA
	HAL_DMA_Start(&hdma_tim1_up, (uint32_t)CR1, (uint32_t)&TIM2->CR1, 1);
 8000b5c:	4984      	ldr	r1, [pc, #528]	; (8000d70 <get_accurate_trace+0x254>)
 8000b5e:	2301      	movs	r3, #1
 8000b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b64:	4883      	ldr	r0, [pc, #524]	; (8000d74 <get_accurate_trace+0x258>)
 8000b66:	f000 ffd3 	bl	8001b10 <HAL_DMA_Start>
	__HAL_DMA_ENABLE(&hdma_tim1_up);
 8000b6a:	4b82      	ldr	r3, [pc, #520]	; (8000d74 <get_accurate_trace+0x258>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b80      	ldr	r3, [pc, #512]	; (8000d74 <get_accurate_trace+0x258>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f042 0201 	orr.w	r2, r2, #1
 8000b78:	601a      	str	r2, [r3, #0]

	TIM1->DIER = 1<<8; //Enable Update DMA request
 8000b7a:	4b7b      	ldr	r3, [pc, #492]	; (8000d68 <get_accurate_trace+0x24c>)
 8000b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b80:	60da      	str	r2, [r3, #12]
	//TIM1->CR1 |= (1<<3); // One pulse mode

	// Enable both timers at the same time
	//__HAL_TIM_ENABLE(&htim2);
	__HAL_TIM_ENABLE(&htim1);
 8000b82:	4b7d      	ldr	r3, [pc, #500]	; (8000d78 <get_accurate_trace+0x25c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <get_accurate_trace+0x25c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0201 	orr.w	r2, r2, #1
 8000b90:	601a      	str	r2, [r3, #0]

	// 8 CYCLES of delay for the hardware to do its thing
	FIVE_NOPS();
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46c0      	nop			; (mov r8, r8)
	MY_NOP();
 8000b9c:	46c0      	nop			; (mov r8, r8)
	MY_NOP();
 8000b9e:	46c0      	nop			; (mov r8, r8)
	MY_NOP();
 8000ba0:	46c0      	nop			; (mov r8, r8)
//	int val = ChainTask(Task1);
	//GetCounterValue(myCounter, cntValue);

	if_code();
 8000ba2:	f7ff ff9c 	bl	8000ade <if_code>
		first = 0;
		my_printf("val: %d\r\n", val);
	}*/

	// Stop gadget. NOPS for the DMA shutdown.
	HUND_NOPS();
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46c0      	nop			; (mov r8, r8)
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46c0      	nop			; (mov r8, r8)
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46c0      	nop			; (mov r8, r8)
	HUND_NOPS();
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46c0      	nop			; (mov r8, r8)
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46c0      	nop			; (mov r8, r8)
	__HAL_TIM_DISABLE(&htim1);
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <get_accurate_trace+0x25c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6a1a      	ldr	r2, [r3, #32]
 8000d3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d11b      	bne.n	8000d7e <get_accurate_trace+0x262>
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <get_accurate_trace+0x25c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6a1a      	ldr	r2, [r3, #32]
 8000d4c:	f240 4344 	movw	r3, #1092	; 0x444
 8000d50:	4013      	ands	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d113      	bne.n	8000d7e <get_accurate_trace+0x262>
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <get_accurate_trace+0x25c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <get_accurate_trace+0x25c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0201 	bic.w	r2, r2, #1
 8000d64:	e00a      	b.n	8000d7c <get_accurate_trace+0x260>
 8000d66:	bf00      	nop
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	20000554 	.word	0x20000554
 8000d70:	20000000 	.word	0x20000000
 8000d74:	200004b4 	.word	0x200004b4
 8000d78:	20000514 	.word	0x20000514
 8000d7c:	601a      	str	r2, [r3, #0]
	HAL_DMA_Abort(&hdma_tim1_up);
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <get_accurate_trace+0x278>)
 8000d80:	f000 feea 	bl	8001b58 <HAL_DMA_Abort>
	HAL_TIM_Base_Stop(&htim2);
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <get_accurate_trace+0x27c>)
 8000d86:	f001 fc9c 	bl	80026c2 <HAL_TIM_Base_Stop>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200004b4 	.word	0x200004b4
 8000d98:	20000554 	.word	0x20000554

08000d9c <process_accurate_collision>:

__attribute__((optimize(0))) void process_accurate_collision(int collision_n){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	int value = TIM2->CNT;
 8000da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000daa:	60fb      	str	r3, [r7, #12]
	my_printf("%d @ %d\r\n", value, collision_n);
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68f9      	ldr	r1, [r7, #12]
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <process_accurate_collision+0x2c>)
 8000db2:	f000 f99f 	bl	80010f4 <my_printf>
	//my_printf("cntValue: %d\r\n", cntValue);

	TIM2->CNT = 0;
 8000db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
	// Empirically tested

}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	080034f4 	.word	0x080034f4

08000dcc <accurate_trace>:

__attribute__((optimize(0))) void accurate_trace(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

	my_printf("BEGIN\r\n");
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <accurate_trace+0x3c>)
 8000dd4:	f000 f98e 	bl	80010f4 <my_printf>

	for(int clk = 0; clk < 500; clk++){
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	e009      	b.n	8000df2 <accurate_trace+0x26>
		get_accurate_trace(clk, victim_);
 8000dde:	490b      	ldr	r1, [pc, #44]	; (8000e0c <accurate_trace+0x40>)
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fe9b 	bl	8000b1c <get_accurate_trace>
		process_accurate_collision(clk);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffd8 	bl	8000d9c <process_accurate_collision>
	for(int clk = 0; clk < 500; clk++){
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3301      	adds	r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000df8:	dbf1      	blt.n	8000dde <accurate_trace+0x12>
	}

	my_printf("END\r\n");
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <accurate_trace+0x44>)
 8000dfc:	f000 f97a 	bl	80010f4 <my_printf>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	08003500 	.word	0x08003500
 8000e0c:	0800070d 	.word	0x0800070d
 8000e10:	08003508 	.word	0x08003508

08000e14 <Error_Handler>:
{
 8000e14:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1a:	4802      	ldr	r0, [pc, #8]	; (8000e24 <Error_Handler+0x10>)
 8000e1c:	f001 f8d2 	bl	8001fc4 <HAL_GPIO_TogglePin>
	while (1){;}
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0xc>
 8000e22:	bf00      	nop
 8000e24:	40020c00 	.word	0x40020c00

08000e28 <SerialISR>:
{
 8000e28:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&husart2);
 8000e2a:	4802      	ldr	r0, [pc, #8]	; (8000e34 <SerialISR+0xc>)
 8000e2c:	f002 f894 	bl	8002f58 <HAL_UART_IRQHandler>
}
 8000e30:	bd08      	pop	{r3, pc}
 8000e32:	bf00      	nop
 8000e34:	20000594 	.word	0x20000594

08000e38 <DMA2_Stream5_IRQHandler>:
{
 8000e38:	b508      	push	{r3, lr}
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000e3a:	4802      	ldr	r0, [pc, #8]	; (8000e44 <DMA2_Stream5_IRQHandler+0xc>)
 8000e3c:	f000 feea 	bl	8001c14 <HAL_DMA_IRQHandler>
}
 8000e40:	bd08      	pop	{r3, pc}
 8000e42:	bf00      	nop
 8000e44:	200004b4 	.word	0x200004b4

08000e48 <MX_GPIO_Init>:
{
 8000e48:	b500      	push	{lr}
 8000e4a:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	9302      	str	r3, [sp, #8]
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9304      	str	r3, [sp, #16]
 8000e56:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_GPIO_Init+0x44>)
 8000e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e5e:	f042 0208 	orr.w	r2, r2, #8
 8000e62:	631a      	str	r2, [r3, #48]	; 0x30
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000e6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7c:	a901      	add	r1, sp, #4
 8000e7e:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_GPIO_Init+0x48>)
 8000e80:	f000 ffb6 	bl	8001df0 <HAL_GPIO_Init>
}
 8000e84:	b007      	add	sp, #28
 8000e86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020c00 	.word	0x40020c00

08000e94 <idle_hook>:
	time2 = SysTick->VAL;
	my_printf("Time = %d\n",time1-time2-7); // 7 clks without nothing
}

void idle_hook(void)
{
 8000e94:	b508      	push	{r3, lr}

	my_printf("ERIKAv3\n\r");
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <idle_hook+0x10>)
 8000e98:	f000 f92c 	bl	80010f4 <my_printf>
	accurate_trace();
 8000e9c:	f7ff ff96 	bl	8000dcc <accurate_trace>

//	measure_time();

	while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <idle_hook+0xc>
 8000ea2:	bf00      	nop
 8000ea4:	0800351c 	.word	0x0800351c

08000ea8 <main>:

	//DemoHAL_MainFunction();
}

int main(void)
{
 8000ea8:	b510      	push	{r4, lr}
	HAL_Init();
 8000eaa:	f000 fca5 	bl	80017f8 <HAL_Init>

	SysTick->CTRL = 0; //Disable systick
 8000eae:	2400      	movs	r4, #0
 8000eb0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000eb4:	611c      	str	r4, [r3, #16]

	SystemClock_Config();
 8000eb6:	f000 f931 	bl	800111c <SystemClock_Config>

	MX_DMA_Init();
 8000eba:	f7ff fc0d 	bl	80006d8 <MX_DMA_Init>
	MX_TIM1_Init();
 8000ebe:	f000 fa41 	bl	8001344 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000ec2:	f000 fa7f 	bl	80013c4 <MX_TIM2_Init>

	//MX_TIM2_Init();
	MX_GPIO_Init();
 8000ec6:	f7ff ffbf 	bl	8000e48 <MX_GPIO_Init>
	MX_USART2_Init();
 8000eca:	f000 fb0d 	bl	80014e8 <MX_USART2_Init>

	//HAL_TIM_Base_Start_IT(&htim2);

	StartOS(OSDEFAULTAPPMODE);
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f002 f8ee 	bl	80030b0 <StartOS>

	return 0;
}
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	bd10      	pop	{r4, pc}

08000ed8 <my_utoa_dec>:
#include "../../Core/Inc/main.h"
#include <stdio.h>


static void my_utoa_dec(unsigned int value, char *buf)
{
 8000ed8:	b084      	sub	sp, #16
    char temp[10];
    unsigned int i = 0;

    if (value == 0) {
 8000eda:	4602      	mov	r2, r0
 8000edc:	b108      	cbz	r0, 8000ee2 <my_utoa_dec+0xa>
    unsigned int i = 0;
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e015      	b.n	8000f0e <my_utoa_dec+0x36>
        buf[0] = '0';
 8000ee2:	2330      	movs	r3, #48	; 0x30
 8000ee4:	700b      	strb	r3, [r1, #0]
        buf[1] = '\0';
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	704b      	strb	r3, [r1, #1]
        return;
 8000eea:	e020      	b.n	8000f2e <my_utoa_dec+0x56>
    }

    while (value && i < sizeof(temp)) {
        temp[i++] = '0' + (value % 10);
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <my_utoa_dec+0x5c>)
 8000eee:	fba3 c302 	umull	ip, r3, r3, r2
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	469c      	mov	ip, r3
 8000ef6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000efa:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8000efe:	3330      	adds	r3, #48	; 0x30
 8000f00:	f100 0210 	add.w	r2, r0, #16
 8000f04:	446a      	add	r2, sp
 8000f06:	f802 3c0c 	strb.w	r3, [r2, #-12]
        value /= 10;
 8000f0a:	4662      	mov	r2, ip
        temp[i++] = '0' + (value % 10);
 8000f0c:	3001      	adds	r0, #1
    while (value && i < sizeof(temp)) {
 8000f0e:	b152      	cbz	r2, 8000f26 <my_utoa_dec+0x4e>
 8000f10:	2809      	cmp	r0, #9
 8000f12:	d9eb      	bls.n	8000eec <my_utoa_dec+0x14>
 8000f14:	2200      	movs	r2, #0
 8000f16:	e006      	b.n	8000f26 <my_utoa_dec+0x4e>
    }

    for (unsigned int j = 0; j < i; ++j) {
        buf[j] = temp[i - j - 1];
 8000f18:	1a83      	subs	r3, r0, r2
 8000f1a:	330f      	adds	r3, #15
 8000f1c:	446b      	add	r3, sp
 8000f1e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f22:	548b      	strb	r3, [r1, r2]
    for (unsigned int j = 0; j < i; ++j) {
 8000f24:	3201      	adds	r2, #1
 8000f26:	4290      	cmp	r0, r2
 8000f28:	d8f6      	bhi.n	8000f18 <my_utoa_dec+0x40>
    }

    buf[i] = '\0';
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	540b      	strb	r3, [r1, r0]
}
 8000f2e:	b004      	add	sp, #16
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	cccccccd 	.word	0xcccccccd

08000f38 <my_utoa_hex>:

static void my_utoa_hex(unsigned int value, char *buf)
{
 8000f38:	b410      	push	{r4}
 8000f3a:	b083      	sub	sp, #12
    static const char hex_chars[] = "0123456789ABCDEF";
    char temp[8];
    unsigned int i = 0;

    if (value == 0) {
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b108      	cbz	r0, 8000f44 <my_utoa_hex+0xc>
    unsigned int i = 0;
 8000f40:	2000      	movs	r0, #0
 8000f42:	e010      	b.n	8000f66 <my_utoa_hex+0x2e>
        buf[0] = '0';
 8000f44:	2330      	movs	r3, #48	; 0x30
 8000f46:	700b      	strb	r3, [r1, #0]
        buf[1] = '\0';
 8000f48:	2300      	movs	r3, #0
 8000f4a:	704b      	strb	r3, [r1, #1]
        return;
 8000f4c:	e01b      	b.n	8000f86 <my_utoa_hex+0x4e>
    }

    while (value && i < sizeof(temp)) {
        temp[i++] = hex_chars[value & 0xF];
 8000f4e:	f003 020f 	and.w	r2, r3, #15
 8000f52:	4c0e      	ldr	r4, [pc, #56]	; (8000f8c <my_utoa_hex+0x54>)
 8000f54:	f814 c002 	ldrb.w	ip, [r4, r2]
 8000f58:	f100 0208 	add.w	r2, r0, #8
 8000f5c:	446a      	add	r2, sp
 8000f5e:	f802 cc08 	strb.w	ip, [r2, #-8]
        value >>= 4;
 8000f62:	091b      	lsrs	r3, r3, #4
        temp[i++] = hex_chars[value & 0xF];
 8000f64:	3001      	adds	r0, #1
    while (value && i < sizeof(temp)) {
 8000f66:	b153      	cbz	r3, 8000f7e <my_utoa_hex+0x46>
 8000f68:	2807      	cmp	r0, #7
 8000f6a:	d9f0      	bls.n	8000f4e <my_utoa_hex+0x16>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e006      	b.n	8000f7e <my_utoa_hex+0x46>
    }

    for (unsigned int j = 0; j < i; ++j) {
        buf[j] = temp[i - j - 1];
 8000f70:	1ac2      	subs	r2, r0, r3
 8000f72:	3207      	adds	r2, #7
 8000f74:	446a      	add	r2, sp
 8000f76:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f7a:	54ca      	strb	r2, [r1, r3]
    for (unsigned int j = 0; j < i; ++j) {
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d8f6      	bhi.n	8000f70 <my_utoa_hex+0x38>
    }

    buf[i] = '\0';
 8000f82:	2300      	movs	r3, #0
 8000f84:	540b      	strb	r3, [r1, r0]
}
 8000f86:	b003      	add	sp, #12
 8000f88:	bc10      	pop	{r4}
 8000f8a:	4770      	bx	lr
 8000f8c:	08003528 	.word	0x08003528

08000f90 <my_format>:
static int my_format(char *out_buf, size_t max_len, const char *fmt, __builtin_va_list args)
{
 8000f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	4607      	mov	r7, r0
 8000f98:	4688      	mov	r8, r1
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	9301      	str	r3, [sp, #4]
    const char *p = fmt;
    char *out = out_buf;
 8000f9e:	4604      	mov	r4, r0
    char num_buf[16];

    while (*p && (size_t)(out - out_buf) < max_len - 1) {
 8000fa0:	e086      	b.n	80010b0 <my_format+0x120>
        if (*p == '%') {
            p++;

            int width = 0;
            while (*p >= '0' && *p <= '9') {
            	width = width * 10 + (*p - '0');
 8000fa2:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8000fa6:	3b30      	subs	r3, #48	; 0x30
 8000fa8:	eb03 0949 	add.w	r9, r3, r9, lsl #1
            	p++;
 8000fac:	3501      	adds	r5, #1
            while (*p >= '0' && *p <= '9') {
 8000fae:	782b      	ldrb	r3, [r5, #0]
 8000fb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	2a09      	cmp	r2, #9
 8000fb8:	d9f3      	bls.n	8000fa2 <my_format+0x12>
            }

            switch (*p) {
 8000fba:	3b63      	subs	r3, #99	; 0x63
 8000fbc:	2b15      	cmp	r3, #21
 8000fbe:	d86c      	bhi.n	800109a <my_format+0x10a>
 8000fc0:	e8df f003 	tbb	[pc, r3]
 8000fc4:	6b6b0b64 	.word	0x6b6b0b64
 8000fc8:	6b6b6b6b 	.word	0x6b6b6b6b
 8000fcc:	6b6b6b6b 	.word	0x6b6b6b6b
 8000fd0:	6b6b6b6b 	.word	0x6b6b6b6b
 8000fd4:	6b6b6b56 	.word	0x6b6b6b56
 8000fd8:	446b      	.short	0x446b
            case 'd': {
            	int val = __builtin_va_arg(args, int);
 8000fda:	9b01      	ldr	r3, [sp, #4]
 8000fdc:	1d1a      	adds	r2, r3, #4
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	f8d3 a000 	ldr.w	sl, [r3]
            	int is_negative = val < 0;
            	if (is_negative) val = -val;
 8000fe4:	f1ba 0f00 	cmp.w	sl, #0
 8000fe8:	db0c      	blt.n	8001004 <my_format+0x74>
            	int val = __builtin_va_arg(args, int);
 8000fea:	4650      	mov	r0, sl

            	my_utoa_dec((unsigned int)val, num_buf);
 8000fec:	a902      	add	r1, sp, #8
 8000fee:	f7ff ff73 	bl	8000ed8 <my_utoa_dec>
            	size_t len = strlen(num_buf) + (is_negative ? 1 : 0);
 8000ff2:	a802      	add	r0, sp, #8
 8000ff4:	f7ff f904 	bl	8000200 <strlen>
 8000ff8:	f1ba 0f00 	cmp.w	sl, #0
 8000ffc:	db05      	blt.n	800100a <my_format+0x7a>
 8000ffe:	2300      	movs	r3, #0
 8001000:	4403      	add	r3, r0

				while ((int)len < width && (size_t)(out - out_buf) < max_len - 1) {
 8001002:	e008      	b.n	8001016 <my_format+0x86>
            	if (is_negative) val = -val;
 8001004:	f1ca 0000 	rsb	r0, sl, #0
 8001008:	e7f0      	b.n	8000fec <my_format+0x5c>
            	size_t len = strlen(num_buf) + (is_negative ? 1 : 0);
 800100a:	2301      	movs	r3, #1
 800100c:	e7f8      	b.n	8001000 <my_format+0x70>
					*out++ = ' ';
 800100e:	2220      	movs	r2, #32
 8001010:	f804 2b01 	strb.w	r2, [r4], #1
					len++;
 8001014:	3301      	adds	r3, #1
				while ((int)len < width && (size_t)(out - out_buf) < max_len - 1) {
 8001016:	454b      	cmp	r3, r9
 8001018:	da02      	bge.n	8001020 <my_format+0x90>
 800101a:	1be2      	subs	r2, r4, r7
 800101c:	42b2      	cmp	r2, r6
 800101e:	d3f6      	bcc.n	800100e <my_format+0x7e>
				}

				if (is_negative && (size_t)(out - out_buf) < max_len - 1) {
 8001020:	f1ba 0f00 	cmp.w	sl, #0
 8001024:	db01      	blt.n	800102a <my_format+0x9a>
					*out++ = '-';
 8001026:	ab02      	add	r3, sp, #8
 8001028:	e009      	b.n	800103e <my_format+0xae>
				if (is_negative && (size_t)(out - out_buf) < max_len - 1) {
 800102a:	1be3      	subs	r3, r4, r7
 800102c:	42b3      	cmp	r3, r6
 800102e:	d2fa      	bcs.n	8001026 <my_format+0x96>
					*out++ = '-';
 8001030:	232d      	movs	r3, #45	; 0x2d
 8001032:	f804 3b01 	strb.w	r3, [r4], #1
 8001036:	e7f6      	b.n	8001026 <my_format+0x96>
				}

				for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
					*out++ = *n;
 8001038:	f804 2b01 	strb.w	r2, [r4], #1
				for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 800103c:	3301      	adds	r3, #1
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	2a00      	cmp	r2, #0
 8001042:	d034      	beq.n	80010ae <my_format+0x11e>
 8001044:	1be1      	subs	r1, r4, r7
 8001046:	42b1      	cmp	r1, r6
 8001048:	d3f6      	bcc.n	8001038 <my_format+0xa8>
 800104a:	e030      	b.n	80010ae <my_format+0x11e>

				break;
            }
                case 'x': {
                    unsigned int val = __builtin_va_arg(args, unsigned int);
 800104c:	9b01      	ldr	r3, [sp, #4]
 800104e:	1d1a      	adds	r2, r3, #4
 8001050:	9201      	str	r2, [sp, #4]
                    my_utoa_hex(val, num_buf);
 8001052:	a902      	add	r1, sp, #8
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	f7ff ff6f 	bl	8000f38 <my_utoa_hex>
                    for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 800105a:	ab02      	add	r3, sp, #8
 800105c:	e002      	b.n	8001064 <my_format+0xd4>
                        *out++ = *n;
 800105e:	f804 2b01 	strb.w	r2, [r4], #1
                    for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 8001062:	3301      	adds	r3, #1
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	b312      	cbz	r2, 80010ae <my_format+0x11e>
 8001068:	1be1      	subs	r1, r4, r7
 800106a:	42b1      	cmp	r1, r6
 800106c:	d3f7      	bcc.n	800105e <my_format+0xce>
 800106e:	e01e      	b.n	80010ae <my_format+0x11e>
                    break;
                }
                case 's': {
                    char *str = __builtin_va_arg(args, char*);
 8001070:	9b01      	ldr	r3, [sp, #4]
 8001072:	1d1a      	adds	r2, r3, #4
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
                    while (*str && (size_t)(out - out_buf) < max_len - 1)
 8001078:	e002      	b.n	8001080 <my_format+0xf0>
                        *out++ = *str++;
 800107a:	3301      	adds	r3, #1
 800107c:	f804 2b01 	strb.w	r2, [r4], #1
                    while (*str && (size_t)(out - out_buf) < max_len - 1)
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	b1a2      	cbz	r2, 80010ae <my_format+0x11e>
 8001084:	1be1      	subs	r1, r4, r7
 8001086:	42b1      	cmp	r1, r6
 8001088:	d3f7      	bcc.n	800107a <my_format+0xea>
 800108a:	e010      	b.n	80010ae <my_format+0x11e>
                    break;
                }
                case 'c': {
                    char ch = (char)__builtin_va_arg(args, int);
 800108c:	9b01      	ldr	r3, [sp, #4]
 800108e:	1d1a      	adds	r2, r3, #4
 8001090:	9201      	str	r2, [sp, #4]
 8001092:	781b      	ldrb	r3, [r3, #0]
                    *out++ = ch;
 8001094:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
 8001098:	e009      	b.n	80010ae <my_format+0x11e>
                }
                default:
                    *out++ = '%';
 800109a:	4623      	mov	r3, r4
 800109c:	2225      	movs	r2, #37	; 0x25
 800109e:	f803 2b02 	strb.w	r2, [r3], #2
                    *out++ = *p;
 80010a2:	782a      	ldrb	r2, [r5, #0]
 80010a4:	7062      	strb	r2, [r4, #1]
 80010a6:	461c      	mov	r4, r3
 80010a8:	e001      	b.n	80010ae <my_format+0x11e>
            }
        } else {
            *out++ = *p;
 80010aa:	f804 2b01 	strb.w	r2, [r4], #1
        }
        p++;
 80010ae:	3501      	adds	r5, #1
    while (*p && (size_t)(out - out_buf) < max_len - 1) {
 80010b0:	782a      	ldrb	r2, [r5, #0]
 80010b2:	b152      	cbz	r2, 80010ca <my_format+0x13a>
 80010b4:	1be3      	subs	r3, r4, r7
 80010b6:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80010ba:	42b3      	cmp	r3, r6
 80010bc:	d205      	bcs.n	80010ca <my_format+0x13a>
        if (*p == '%') {
 80010be:	2a25      	cmp	r2, #37	; 0x25
 80010c0:	d1f3      	bne.n	80010aa <my_format+0x11a>
            p++;
 80010c2:	3501      	adds	r5, #1
            int width = 0;
 80010c4:	f04f 0900 	mov.w	r9, #0
            while (*p >= '0' && *p <= '9') {
 80010c8:	e771      	b.n	8000fae <my_format+0x1e>
    }

    *out = '\0';
 80010ca:	2300      	movs	r3, #0
 80010cc:	7023      	strb	r3, [r4, #0]
    return (int)(out - out_buf);
}
 80010ce:	1be0      	subs	r0, r4, r7
 80010d0:	b006      	add	sp, #24
 80010d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080010d8 <serial_print>:



void serial_print(char const * msg)
{
 80010d8:	b510      	push	{r4, lr}
 80010da:	4604      	mov	r4, r0
//	SuspendAllInterrupts();
//	HAL_UART_Transmit_IT(&husart2, (uint8_t *)msg, strlen(msg));
//	ResumeAllInterrupts();

	// Uart polling
	HAL_UART_Transmit(&husart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80010dc:	f7ff f890 	bl	8000200 <strlen>
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010e4:	b282      	uxth	r2, r0
 80010e6:	4621      	mov	r1, r4
 80010e8:	4801      	ldr	r0, [pc, #4]	; (80010f0 <serial_print+0x18>)
 80010ea:	f001 fe66 	bl	8002dba <HAL_UART_Transmit>
}
 80010ee:	bd10      	pop	{r4, pc}
 80010f0:	20000594 	.word	0x20000594

080010f4 <my_printf>:


void my_printf(const char *fmt, ...)
{
 80010f4:	b40f      	push	{r0, r1, r2, r3}
 80010f6:	b500      	push	{lr}
 80010f8:	b0a3      	sub	sp, #140	; 0x8c
 80010fa:	ab24      	add	r3, sp, #144	; 0x90
 80010fc:	f853 2b04 	ldr.w	r2, [r3], #4
    char buf[128];

    __builtin_va_list args;
    __builtin_va_start(args, fmt);
 8001100:	9301      	str	r3, [sp, #4]
    my_format(buf, sizeof(buf), fmt, args);
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	a802      	add	r0, sp, #8
 8001106:	f7ff ff43 	bl	8000f90 <my_format>
    __builtin_va_end(args);

    serial_print(buf);
 800110a:	a802      	add	r0, sp, #8
 800110c:	f7ff ffe4 	bl	80010d8 <serial_print>
}
 8001110:	b023      	add	sp, #140	; 0x8c
 8001112:	f85d eb04 	ldr.w	lr, [sp], #4
 8001116:	b004      	add	sp, #16
 8001118:	4770      	bx	lr
	...

0800111c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 800111c:	b500      	push	{lr}
 800111e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001120:	2230      	movs	r2, #48	; 0x30
 8001122:	2100      	movs	r1, #0
 8001124:	a808      	add	r0, sp, #32
 8001126:	f000 fa7f 	bl	8001628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112a:	2300      	movs	r3, #0
 800112c:	9303      	str	r3, [sp, #12]
 800112e:	9304      	str	r3, [sp, #16]
 8001130:	9305      	str	r3, [sp, #20]
 8001132:	9306      	str	r3, [sp, #24]
 8001134:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <SystemClock_Config+0x9c>)
 800113a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800113c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001140:	6411      	str	r1, [r2, #64]	; 0x40
 8001142:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001144:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001148:	9201      	str	r2, [sp, #4]
 800114a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <SystemClock_Config+0xa0>)
 8001150:	6811      	ldr	r1, [r2, #0]
 8001152:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001156:	6011      	str	r1, [r2, #0]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800115e:	9202      	str	r2, [sp, #8]
 8001160:	9a02      	ldr	r2, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001162:	2202      	movs	r2, #2
 8001164:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001166:	2101      	movs	r1, #1
 8001168:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116a:	2110      	movs	r1, #16
 800116c:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001170:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001172:	2308      	movs	r3, #8
 8001174:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001176:	2332      	movs	r3, #50	; 0x32
 8001178:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117a:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800117c:	2307      	movs	r3, #7
 800117e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	a808      	add	r0, sp, #32
 8001182:	f000 ff29 	bl	8001fd8 <HAL_RCC_OscConfig>
 8001186:	b988      	cbnz	r0, 80011ac <SystemClock_Config+0x90>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001188:	230f      	movs	r3, #15
 800118a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118c:	2302      	movs	r3, #2
 800118e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001198:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800119a:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800119c:	2101      	movs	r1, #1
 800119e:	a803      	add	r0, sp, #12
 80011a0:	f001 f97a 	bl	8002498 <HAL_RCC_ClockConfig>
 80011a4:	b928      	cbnz	r0, 80011b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
  }
}
 80011a6:	b015      	add	sp, #84	; 0x54
 80011a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011ac:	f7ff fe32 	bl	8000e14 <Error_Handler>
 80011b0:	e7ea      	b.n	8001188 <SystemClock_Config+0x6c>
    Error_Handler();
 80011b2:	f7ff fe2f 	bl	8000e14 <Error_Handler>
}
 80011b6:	e7f6      	b.n	80011a6 <SystemClock_Config+0x8a>
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b500      	push	{lr}
 80011c2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c4:	2100      	movs	r1, #0
 80011c6:	9100      	str	r1, [sp, #0]
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x3c>)
 80011ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
 80011d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011d4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011d8:	9200      	str	r2, [sp, #0]
 80011da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	9101      	str	r1, [sp, #4]
 80011de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011f0:	2007      	movs	r0, #7
 80011f2:	f000 fb3d 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f6:	b003      	add	sp, #12
 80011f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80011fc:	40023800 	.word	0x40023800

08001200 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <HardFault_Handler>

08001202 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <MemManage_Handler>

08001204 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <BusFault_Handler>

08001206 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <UsageFault_Handler>

08001208 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001208:	4770      	bx	lr

0800120a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120e:	f000 fb09 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001212:	bd08      	pop	{r3, pc}

08001214 <FuncTask1>:
	}										\
} while ( 0 ) 								\


TASK(Task1)
{
 8001214:	b510      	push	{r4, lr}
	static OsEE_bool volatile stk_wrong = OSEE_FALSE;
	static OsEE_addr volatile old_sp = 0;

	static uint16_t volatile Task1_count;

	my_printf("Task1: %d\r\n", Task1_count);
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <FuncTask1+0x98>)
 8001218:	8819      	ldrh	r1, [r3, #0]
 800121a:	b289      	uxth	r1, r1
 800121c:	4824      	ldr	r0, [pc, #144]	; (80012b0 <FuncTask1+0x9c>)
 800121e:	f7ff ff69 	bl	80010f4 <my_printf>

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001222:	4c24      	ldr	r4, [pc, #144]	; (80012b4 <FuncTask1+0xa0>)
 8001224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001228:	4620      	mov	r0, r4
 800122a:	f000 fecb 	bl	8001fc4 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800122e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001232:	4620      	mov	r0, r4
 8001234:	f000 fec6 	bl	8001fc4 <HAL_GPIO_TogglePin>


	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123e:	4620      	mov	r0, r4
 8001240:	f000 feba 	bl	8001fb8 <HAL_GPIO_WritePin>

	HAL_Delay(HAL_DELAY_MS);
 8001244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001248:	f000 fafe 	bl	8001848 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001252:	4620      	mov	r0, r4
 8001254:	f000 feb0 	bl	8001fb8 <HAL_GPIO_WritePin>

	HAL_Delay(HAL_DELAY_MS);
 8001258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125c:	f000 faf4 	bl	8001848 <HAL_Delay>

	osEE_CheckStackIntegrity();
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <FuncTask1+0xa4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b9c3      	cbnz	r3, 8001298 <FuncTask1+0x84>
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <FuncTask1+0xa8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b193      	cbz	r3, 8001292 <FuncTask1+0x7e>
OSEE_STATIC_INLINE FUNC(OsEE_addr, OS_CODE) OSEE_ALWAYS_INLINE
osEE_get_SP (
void
) {
  VAR(OsEE_addr, AUTOMATIC) temp;
  OSEE_GET_SP(temp);
 800126c:	466b      	mov	r3, sp
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <FuncTask1+0xa8>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d010      	beq.n	8001298 <FuncTask1+0x84>
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <FuncTask1+0xa4>)
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <FuncTask1+0xa0>)
 8001282:	f000 fe9f 	bl	8001fc4 <HAL_GPIO_TogglePin>
 8001286:	f001 ff0b 	bl	80030a0 <DisableAllInterrupts>
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <FuncTask1+0xac>)
 800128c:	f7ff ff32 	bl	80010f4 <my_printf>
 8001290:	e7fe      	b.n	8001290 <FuncTask1+0x7c>
 8001292:	466a      	mov	r2, sp
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <FuncTask1+0xa8>)
 8001296:	601a      	str	r2, [r3, #0]

	++Task1_count;
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <FuncTask1+0x98>)
 800129a:	8813      	ldrh	r3, [r2, #0]
 800129c:	b29b      	uxth	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	8013      	strh	r3, [r2, #0]

	TerminateTask();
 80012a4:	f001 ff3e 	bl	8003124 <TerminateTask>
}
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	bf00      	nop
 80012ac:	200004a4 	.word	0x200004a4
 80012b0:	0800353c 	.word	0x0800353c
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	200004b1 	.word	0x200004b1
 80012bc:	200004ac 	.word	0x200004ac
 80012c0:	08003548 	.word	0x08003548

080012c4 <FuncTask2>:

TASK(Task2)
{
 80012c4:	b508      	push	{r3, lr}
	static OsEE_bool volatile stk_wrong = OSEE_FALSE;
	static OsEE_addr volatile old_sp = 0;

	static uint16_t volatile Task2_count;

	my_printf("Task2: %d\r\n", Task2_count);
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <FuncTask2+0x68>)
 80012c8:	8819      	ldrh	r1, [r3, #0]
 80012ca:	b289      	uxth	r1, r1
 80012cc:	4818      	ldr	r0, [pc, #96]	; (8001330 <FuncTask2+0x6c>)
 80012ce:	f7ff ff11 	bl	80010f4 <my_printf>

	HAL_Delay(HAL_DELAY_MS);
 80012d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d6:	f000 fab7 	bl	8001848 <HAL_Delay>

	HAL_Delay(HAL_DELAY_MS);
 80012da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012de:	f000 fab3 	bl	8001848 <HAL_Delay>

	osEE_CheckStackIntegrity();
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <FuncTask2+0x70>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b9c3      	cbnz	r3, 800131a <FuncTask2+0x56>
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <FuncTask2+0x74>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b193      	cbz	r3, 8001314 <FuncTask2+0x50>
 80012ee:	466b      	mov	r3, sp
 80012f0:	4a11      	ldr	r2, [pc, #68]	; (8001338 <FuncTask2+0x74>)
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d010      	beq.n	800131a <FuncTask2+0x56>
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <FuncTask2+0x70>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <FuncTask2+0x78>)
 8001304:	f000 fe5e 	bl	8001fc4 <HAL_GPIO_TogglePin>
 8001308:	f001 feca 	bl	80030a0 <DisableAllInterrupts>
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <FuncTask2+0x7c>)
 800130e:	f7ff fef1 	bl	80010f4 <my_printf>
 8001312:	e7fe      	b.n	8001312 <FuncTask2+0x4e>
 8001314:	466a      	mov	r2, sp
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <FuncTask2+0x74>)
 8001318:	601a      	str	r2, [r3, #0]

	++Task2_count;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <FuncTask2+0x68>)
 800131c:	8813      	ldrh	r3, [r2, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	3301      	adds	r3, #1
 8001322:	b29b      	uxth	r3, r3
 8001324:	8013      	strh	r3, [r2, #0]

	TerminateTask();
 8001326:	f001 fefd 	bl	8003124 <TerminateTask>
}
 800132a:	bd08      	pop	{r3, pc}
 800132c:	200004a6 	.word	0x200004a6
 8001330:	08003564 	.word	0x08003564
 8001334:	200004b0 	.word	0x200004b0
 8001338:	200004a8 	.word	0x200004a8
 800133c:	40020c00 	.word	0x40020c00
 8001340:	08003570 	.word	0x08003570

08001344 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001344:	b500      	push	{lr}
 8001346:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001348:	2300      	movs	r3, #0
 800134a:	9302      	str	r3, [sp, #8]
 800134c:	9303      	str	r3, [sp, #12]
 800134e:	9304      	str	r3, [sp, #16]
 8001350:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001356:	4819      	ldr	r0, [pc, #100]	; (80013bc <MX_TIM1_Init+0x78>)
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <MX_TIM1_Init+0x7c>)
 800135a:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 800135c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1;
 8001360:	2201      	movs	r2, #1
 8001362:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001366:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800136c:	f001 fa26 	bl	80027bc <HAL_TIM_Base_Init>
 8001370:	b9c0      	cbnz	r0, 80013a4 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001378:	a902      	add	r1, sp, #8
 800137a:	4810      	ldr	r0, [pc, #64]	; (80013bc <MX_TIM1_Init+0x78>)
 800137c:	f001 fa68 	bl	8002850 <HAL_TIM_ConfigClockSource>
 8001380:	b998      	cbnz	r0, 80013aa <MX_TIM1_Init+0x66>
  {
    Error_Handler();
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001382:	2108      	movs	r1, #8
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <MX_TIM1_Init+0x78>)
 8001386:	f001 fa33 	bl	80027f0 <HAL_TIM_OnePulse_Init>
 800138a:	b988      	cbnz	r0, 80013b0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800138c:	2320      	movs	r3, #32
 800138e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001394:	4669      	mov	r1, sp
 8001396:	4809      	ldr	r0, [pc, #36]	; (80013bc <MX_TIM1_Init+0x78>)
 8001398:	f001 fb38 	bl	8002a0c <HAL_TIMEx_MasterConfigSynchronization>
 800139c:	b958      	cbnz	r0, 80013b6 <MX_TIM1_Init+0x72>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139e:	b007      	add	sp, #28
 80013a0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80013a4:	f7ff fd36 	bl	8000e14 <Error_Handler>
 80013a8:	e7e3      	b.n	8001372 <MX_TIM1_Init+0x2e>
    Error_Handler();
 80013aa:	f7ff fd33 	bl	8000e14 <Error_Handler>
 80013ae:	e7e8      	b.n	8001382 <MX_TIM1_Init+0x3e>
    Error_Handler();
 80013b0:	f7ff fd30 	bl	8000e14 <Error_Handler>
 80013b4:	e7ea      	b.n	800138c <MX_TIM1_Init+0x48>
    Error_Handler();
 80013b6:	f7ff fd2d 	bl	8000e14 <Error_Handler>
}
 80013ba:	e7f0      	b.n	800139e <MX_TIM1_Init+0x5a>
 80013bc:	20000514 	.word	0x20000514
 80013c0:	40010000 	.word	0x40010000

080013c4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013c4:	b500      	push	{lr}
 80013c6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c8:	2300      	movs	r3, #0
 80013ca:	9308      	str	r3, [sp, #32]
 80013cc:	9309      	str	r3, [sp, #36]	; 0x24
 80013ce:	930a      	str	r3, [sp, #40]	; 0x28
 80013d0:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013d2:	9303      	str	r3, [sp, #12]
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	9305      	str	r3, [sp, #20]
 80013d8:	9306      	str	r3, [sp, #24]
 80013da:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e0:	481a      	ldr	r0, [pc, #104]	; (800144c <MX_TIM2_Init+0x88>)
 80013e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e6:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 80013e8:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f0:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f6:	f001 f9e1 	bl	80027bc <HAL_TIM_Base_Init>
 80013fa:	b9d8      	cbnz	r0, 8001434 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001402:	a908      	add	r1, sp, #32
 8001404:	4811      	ldr	r0, [pc, #68]	; (800144c <MX_TIM2_Init+0x88>)
 8001406:	f001 fa23 	bl	8002850 <HAL_TIM_ConfigClockSource>
 800140a:	b9b0      	cbnz	r0, 800143a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800140c:	2304      	movs	r3, #4
 800140e:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001410:	2300      	movs	r3, #0
 8001412:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001414:	a903      	add	r1, sp, #12
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_TIM2_Init+0x88>)
 8001418:	f001 face 	bl	80029b8 <HAL_TIM_SlaveConfigSynchro>
 800141c:	b980      	cbnz	r0, 8001440 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001424:	a901      	add	r1, sp, #4
 8001426:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_TIM2_Init+0x88>)
 8001428:	f001 faf0 	bl	8002a0c <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	b958      	cbnz	r0, 8001446 <MX_TIM2_Init+0x82>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800142e:	b00d      	add	sp, #52	; 0x34
 8001430:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001434:	f7ff fcee 	bl	8000e14 <Error_Handler>
 8001438:	e7e0      	b.n	80013fc <MX_TIM2_Init+0x38>
    Error_Handler();
 800143a:	f7ff fceb 	bl	8000e14 <Error_Handler>
 800143e:	e7e5      	b.n	800140c <MX_TIM2_Init+0x48>
    Error_Handler();
 8001440:	f7ff fce8 	bl	8000e14 <Error_Handler>
 8001444:	e7eb      	b.n	800141e <MX_TIM2_Init+0x5a>
    Error_Handler();
 8001446:	f7ff fce5 	bl	8000e14 <Error_Handler>
}
 800144a:	e7f0      	b.n	800142e <MX_TIM2_Init+0x6a>
 800144c:	20000554 	.word	0x20000554

08001450 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001450:	b510      	push	{r4, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	4604      	mov	r4, r0

  if(tim_baseHandle->Instance==TIM1)
 8001456:	6803      	ldr	r3, [r0, #0]
 8001458:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <HAL_TIM_Base_MspInit+0x88>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d004      	beq.n	8001468 <HAL_TIM_Base_MspInit+0x18>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 800145e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001462:	d02c      	beq.n	80014be <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001464:	b002      	add	sp, #8
 8001466:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8001470:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001472:	f041 0101 	orr.w	r1, r1, #1
 8001476:	6451      	str	r1, [r2, #68]	; 0x44
 8001478:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800147a:	f002 0201 	and.w	r2, r2, #1
 800147e:	9200      	str	r2, [sp, #0]
 8001480:	9a00      	ldr	r2, [sp, #0]
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001482:	4816      	ldr	r0, [pc, #88]	; (80014dc <HAL_TIM_Base_MspInit+0x8c>)
 8001484:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_TIM_Base_MspInit+0x90>)
 8001486:	6002      	str	r2, [r0, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001488:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800148c:	6042      	str	r2, [r0, #4]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148e:	6083      	str	r3, [r0, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001490:	60c3      	str	r3, [r0, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8001492:	6103      	str	r3, [r0, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001494:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001498:	6142      	str	r2, [r0, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800149a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149e:	6182      	str	r2, [r0, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 80014a0:	61c3      	str	r3, [r0, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80014a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80014a6:	6202      	str	r2, [r0, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a8:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80014aa:	f000 facb 	bl	8001a44 <HAL_DMA_Init>
 80014ae:	b918      	cbnz	r0, 80014b8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_TIM_Base_MspInit+0x8c>)
 80014b2:	6223      	str	r3, [r4, #32]
 80014b4:	639c      	str	r4, [r3, #56]	; 0x38
 80014b6:	e7d5      	b.n	8001464 <HAL_TIM_Base_MspInit+0x14>
      Error_Handler();
 80014b8:	f7ff fcac 	bl	8000e14 <Error_Handler>
 80014bc:	e7f8      	b.n	80014b0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_TIM_Base_MspInit+0x94>)
 80014c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	9b01      	ldr	r3, [sp, #4]
}
 80014d6:	e7c5      	b.n	8001464 <HAL_TIM_Base_MspInit+0x14>
 80014d8:	40010000 	.word	0x40010000
 80014dc:	200004b4 	.word	0x200004b4
 80014e0:	40026488 	.word	0x40026488
 80014e4:	40023800 	.word	0x40023800

080014e8 <MX_USART2_Init>:
//     HAL_UART_Transmit(&husart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
//     return ch;
// }

void MX_USART2_Init(void)
{
 80014e8:	b508      	push	{r3, lr}
    husart2.Instance         = USART2;
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <MX_USART2_Init+0x2c>)
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_USART2_Init+0x30>)
 80014ee:	6003      	str	r3, [r0, #0]
    husart2.Init.BaudRate    = 115200;
 80014f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014f4:	6043      	str	r3, [r0, #4]
    husart2.Init.Mode        = UART_MODE_TX_RX;
 80014f6:	230c      	movs	r3, #12
 80014f8:	6143      	str	r3, [r0, #20]
    husart2.Init.WordLength  = UART_WORDLENGTH_8B;
 80014fa:	2300      	movs	r3, #0
 80014fc:	6083      	str	r3, [r0, #8]
    husart2.Init.StopBits    = UART_STOPBITS_1;
 80014fe:	60c3      	str	r3, [r0, #12]
    husart2.Init.Parity      = UART_PARITY_NONE;
 8001500:	6103      	str	r3, [r0, #16]
    husart2.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8001502:	6183      	str	r3, [r0, #24]
    husart2.Init.OverSampling= UART_OVERSAMPLING_16;
 8001504:	61c3      	str	r3, [r0, #28]

    if (HAL_UART_Init(&husart2) != HAL_OK)
 8001506:	f001 fc29 	bl	8002d5c <HAL_UART_Init>
 800150a:	b900      	cbnz	r0, 800150e <MX_USART2_Init+0x26>
    {
    	Error_Handler();
    }
}
 800150c:	bd08      	pop	{r3, pc}
    	Error_Handler();
 800150e:	f7ff fc81 	bl	8000e14 <Error_Handler>
}
 8001512:	e7fb      	b.n	800150c <MX_USART2_Init+0x24>
 8001514:	20000594 	.word	0x20000594
 8001518:	40004400 	.word	0x40004400

0800151c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800151c:	b500      	push	{lr}
 800151e:	b089      	sub	sp, #36	; 0x24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	2300      	movs	r3, #0
 8001522:	9303      	str	r3, [sp, #12]
 8001524:	9304      	str	r3, [sp, #16]
 8001526:	9305      	str	r3, [sp, #20]
 8001528:	9306      	str	r3, [sp, #24]
 800152a:	9307      	str	r3, [sp, #28]

    if(uartHandle->Instance == USART2)
 800152c:	6802      	ldr	r2, [r0, #0]
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_UART_MspInit+0x68>)
 8001530:	429a      	cmp	r2, r3
 8001532:	d002      	beq.n	800153a <HAL_UART_MspInit+0x1e>
        GPIO_InitStruct.Pull      = GPIO_NOPULL;
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    }
}
 8001534:	b009      	add	sp, #36	; 0x24
 8001536:	f85d fb04 	ldr.w	pc, [sp], #4
        __HAL_RCC_USART2_CLK_ENABLE();
 800153a:	2100      	movs	r1, #0
 800153c:	9101      	str	r1, [sp, #4]
 800153e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001544:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
 800154a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800154c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	9102      	str	r1, [sp, #8]
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001558:	f042 0201 	orr.w	r2, r2, #1
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pin       = GPIO_PIN_2 | GPIO_PIN_3;
 8001568:	230c      	movs	r3, #12
 800156a:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	9306      	str	r3, [sp, #24]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001574:	2307      	movs	r3, #7
 8001576:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	a903      	add	r1, sp, #12
 800157a:	4803      	ldr	r0, [pc, #12]	; (8001588 <HAL_UART_MspInit+0x6c>)
 800157c:	f000 fc38 	bl	8001df0 <HAL_GPIO_Init>
}
 8001580:	e7d8      	b.n	8001534 <HAL_UART_MspInit+0x18>
 8001582:	bf00      	nop
 8001584:	40004400 	.word	0x40004400
 8001588:	40020000 	.word	0x40020000

0800158c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001590:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001592:	e003      	b.n	800159c <LoopCopyDataInit>

08001594 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001596:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001598:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800159a:	3104      	adds	r1, #4

0800159c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800159c:	480b      	ldr	r0, [pc, #44]	; (80015cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015a4:	d3f6      	bcc.n	8001594 <CopyDataInit>
  ldr  r2, =_sbss
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015a8:	e002      	b.n	80015b0 <LoopFillZerobss>

080015aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015ac:	f842 3b04 	str.w	r3, [r2], #4

080015b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015b4:	d3f9      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015b6:	f001 fd6b 	bl	8003090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ba:	f000 f811 	bl	80015e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015be:	f7ff fc73 	bl	8000ea8 <main>
  bx  lr    
 80015c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015c8:	0800366c 	.word	0x0800366c
  ldr  r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015d0:	20000488 	.word	0x20000488
  ldr  r2, =_sbss
 80015d4:	20000488 	.word	0x20000488
  ldr  r3, = _ebss
 80015d8:	200009fc 	.word	0x200009fc

080015dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC_IRQHandler>
	...

080015e0 <__libc_init_array>:
 80015e0:	b570      	push	{r4, r5, r6, lr}
 80015e2:	4e0d      	ldr	r6, [pc, #52]	; (8001618 <__libc_init_array+0x38>)
 80015e4:	4d0d      	ldr	r5, [pc, #52]	; (800161c <__libc_init_array+0x3c>)
 80015e6:	1b76      	subs	r6, r6, r5
 80015e8:	10b6      	asrs	r6, r6, #2
 80015ea:	d006      	beq.n	80015fa <__libc_init_array+0x1a>
 80015ec:	2400      	movs	r4, #0
 80015ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f2:	3401      	adds	r4, #1
 80015f4:	4798      	blx	r3
 80015f6:	42a6      	cmp	r6, r4
 80015f8:	d1f9      	bne.n	80015ee <__libc_init_array+0xe>
 80015fa:	4e09      	ldr	r6, [pc, #36]	; (8001620 <__libc_init_array+0x40>)
 80015fc:	4d09      	ldr	r5, [pc, #36]	; (8001624 <__libc_init_array+0x44>)
 80015fe:	1b76      	subs	r6, r6, r5
 8001600:	f001 ff6c 	bl	80034dc <_init>
 8001604:	10b6      	asrs	r6, r6, #2
 8001606:	d006      	beq.n	8001616 <__libc_init_array+0x36>
 8001608:	2400      	movs	r4, #0
 800160a:	f855 3b04 	ldr.w	r3, [r5], #4
 800160e:	3401      	adds	r4, #1
 8001610:	4798      	blx	r3
 8001612:	42a6      	cmp	r6, r4
 8001614:	d1f9      	bne.n	800160a <__libc_init_array+0x2a>
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	08003660 	.word	0x08003660
 800161c:	08003660 	.word	0x08003660
 8001620:	08003668 	.word	0x08003668
 8001624:	08003660 	.word	0x08003660

08001628 <memset>:
 8001628:	0783      	lsls	r3, r0, #30
 800162a:	b530      	push	{r4, r5, lr}
 800162c:	d048      	beq.n	80016c0 <memset+0x98>
 800162e:	1e54      	subs	r4, r2, #1
 8001630:	2a00      	cmp	r2, #0
 8001632:	d03f      	beq.n	80016b4 <memset+0x8c>
 8001634:	b2ca      	uxtb	r2, r1
 8001636:	4603      	mov	r3, r0
 8001638:	e001      	b.n	800163e <memset+0x16>
 800163a:	3c01      	subs	r4, #1
 800163c:	d33a      	bcc.n	80016b4 <memset+0x8c>
 800163e:	f803 2b01 	strb.w	r2, [r3], #1
 8001642:	079d      	lsls	r5, r3, #30
 8001644:	d1f9      	bne.n	800163a <memset+0x12>
 8001646:	2c03      	cmp	r4, #3
 8001648:	d92d      	bls.n	80016a6 <memset+0x7e>
 800164a:	b2cd      	uxtb	r5, r1
 800164c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001650:	2c0f      	cmp	r4, #15
 8001652:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001656:	d936      	bls.n	80016c6 <memset+0x9e>
 8001658:	f1a4 0210 	sub.w	r2, r4, #16
 800165c:	f022 0c0f 	bic.w	ip, r2, #15
 8001660:	f103 0e20 	add.w	lr, r3, #32
 8001664:	44e6      	add	lr, ip
 8001666:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800166a:	f103 0210 	add.w	r2, r3, #16
 800166e:	e942 5504 	strd	r5, r5, [r2, #-16]
 8001672:	e942 5502 	strd	r5, r5, [r2, #-8]
 8001676:	3210      	adds	r2, #16
 8001678:	4572      	cmp	r2, lr
 800167a:	d1f8      	bne.n	800166e <memset+0x46>
 800167c:	f10c 0201 	add.w	r2, ip, #1
 8001680:	f014 0f0c 	tst.w	r4, #12
 8001684:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001688:	f004 0c0f 	and.w	ip, r4, #15
 800168c:	d013      	beq.n	80016b6 <memset+0x8e>
 800168e:	f1ac 0304 	sub.w	r3, ip, #4
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	3304      	adds	r3, #4
 8001698:	4413      	add	r3, r2
 800169a:	f842 5b04 	str.w	r5, [r2], #4
 800169e:	4293      	cmp	r3, r2
 80016a0:	d1fb      	bne.n	800169a <memset+0x72>
 80016a2:	f00c 0403 	and.w	r4, ip, #3
 80016a6:	b12c      	cbz	r4, 80016b4 <memset+0x8c>
 80016a8:	b2ca      	uxtb	r2, r1
 80016aa:	441c      	add	r4, r3
 80016ac:	f803 2b01 	strb.w	r2, [r3], #1
 80016b0:	429c      	cmp	r4, r3
 80016b2:	d1fb      	bne.n	80016ac <memset+0x84>
 80016b4:	bd30      	pop	{r4, r5, pc}
 80016b6:	4664      	mov	r4, ip
 80016b8:	4613      	mov	r3, r2
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d1f4      	bne.n	80016a8 <memset+0x80>
 80016be:	e7f9      	b.n	80016b4 <memset+0x8c>
 80016c0:	4603      	mov	r3, r0
 80016c2:	4614      	mov	r4, r2
 80016c4:	e7bf      	b.n	8001646 <memset+0x1e>
 80016c6:	461a      	mov	r2, r3
 80016c8:	46a4      	mov	ip, r4
 80016ca:	e7e0      	b.n	800168e <memset+0x66>

080016cc <register_fini>:
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <register_fini+0xc>)
 80016ce:	b113      	cbz	r3, 80016d6 <register_fini+0xa>
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <register_fini+0x10>)
 80016d2:	f000 b805 	b.w	80016e0 <atexit>
 80016d6:	4770      	bx	lr
 80016d8:	00000000 	.word	0x00000000
 80016dc:	080016ed 	.word	0x080016ed

080016e0 <atexit>:
 80016e0:	2300      	movs	r3, #0
 80016e2:	4601      	mov	r1, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 b81a 	b.w	8001720 <__register_exitproc>

080016ec <__libc_fini_array>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <__libc_fini_array+0x24>)
 80016f0:	4d08      	ldr	r5, [pc, #32]	; (8001714 <__libc_fini_array+0x28>)
 80016f2:	1b5b      	subs	r3, r3, r5
 80016f4:	109c      	asrs	r4, r3, #2
 80016f6:	d007      	beq.n	8001708 <__libc_fini_array+0x1c>
 80016f8:	3b04      	subs	r3, #4
 80016fa:	441d      	add	r5, r3
 80016fc:	3c01      	subs	r4, #1
 80016fe:	f855 3904 	ldr.w	r3, [r5], #-4
 8001702:	4798      	blx	r3
 8001704:	2c00      	cmp	r4, #0
 8001706:	d1f9      	bne.n	80016fc <__libc_fini_array+0x10>
 8001708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800170c:	f001 beec 	b.w	80034e8 <_fini>
 8001710:	0800366c 	.word	0x0800366c
 8001714:	08003668 	.word	0x08003668

08001718 <__retarget_lock_acquire_recursive>:
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop

0800171c <__retarget_lock_release_recursive>:
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop

08001720 <__register_exitproc>:
 8001720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001724:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80017a4 <__register_exitproc+0x84>
 8001728:	4606      	mov	r6, r0
 800172a:	f8da 0000 	ldr.w	r0, [sl]
 800172e:	4698      	mov	r8, r3
 8001730:	460f      	mov	r7, r1
 8001732:	4691      	mov	r9, r2
 8001734:	f7ff fff0 	bl	8001718 <__retarget_lock_acquire_recursive>
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <__register_exitproc+0x88>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8001740:	b324      	cbz	r4, 800178c <__register_exitproc+0x6c>
 8001742:	6865      	ldr	r5, [r4, #4]
 8001744:	2d1f      	cmp	r5, #31
 8001746:	dc26      	bgt.n	8001796 <__register_exitproc+0x76>
 8001748:	b95e      	cbnz	r6, 8001762 <__register_exitproc+0x42>
 800174a:	1c6b      	adds	r3, r5, #1
 800174c:	3502      	adds	r5, #2
 800174e:	f8da 0000 	ldr.w	r0, [sl]
 8001752:	6063      	str	r3, [r4, #4]
 8001754:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8001758:	f7ff ffe0 	bl	800171c <__retarget_lock_release_recursive>
 800175c:	2000      	movs	r0, #0
 800175e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001762:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8001766:	2301      	movs	r3, #1
 8001768:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800176c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8001770:	40ab      	lsls	r3, r5
 8001772:	431a      	orrs	r2, r3
 8001774:	2e02      	cmp	r6, #2
 8001776:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800177a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800177e:	d1e4      	bne.n	800174a <__register_exitproc+0x2a>
 8001780:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8001784:	4313      	orrs	r3, r2
 8001786:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800178a:	e7de      	b.n	800174a <__register_exitproc+0x2a>
 800178c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8001790:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8001794:	e7d5      	b.n	8001742 <__register_exitproc+0x22>
 8001796:	f8da 0000 	ldr.w	r0, [sl]
 800179a:	f7ff ffbf 	bl	800171c <__retarget_lock_release_recursive>
 800179e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017a2:	e7dc      	b.n	800175e <__register_exitproc+0x3e>
 80017a4:	20000478 	.word	0x20000478
 80017a8:	08003634 	.word	0x08003634

080017ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b510      	push	{r4, lr}
 80017ae:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_InitTick+0x40>)
 80017b2:	7818      	ldrb	r0, [r3, #0]
 80017b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80017bc:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_InitTick+0x44>)
 80017be:	6810      	ldr	r0, [r2, #0]
 80017c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017c4:	f000 f8ac 	bl	8001920 <HAL_SYSTICK_Config>
 80017c8:	b968      	cbnz	r0, 80017e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ca:	2c0f      	cmp	r4, #15
 80017cc:	d901      	bls.n	80017d2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80017ce:	2001      	movs	r0, #1
 80017d0:	e00a      	b.n	80017e8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d2:	2200      	movs	r2, #0
 80017d4:	4621      	mov	r1, r4
 80017d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017da:	f000 f85b 	bl	8001894 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_InitTick+0x48>)
 80017e0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017e2:	2000      	movs	r0, #0
 80017e4:	e000      	b.n	80017e8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80017e6:	2001      	movs	r0, #1
}
 80017e8:	bd10      	pop	{r4, pc}
 80017ea:	bf00      	nop
 80017ec:	2000047c 	.word	0x2000047c
 80017f0:	20000484 	.word	0x20000484
 80017f4:	20000480 	.word	0x20000480

080017f8 <HAL_Init>:
{
 80017f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_Init+0x28>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001802:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800180a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 f82f 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	200f      	movs	r0, #15
 8001814:	f7ff ffca 	bl	80017ac <HAL_InitTick>
  HAL_MspInit();
 8001818:	f7ff fcd2 	bl	80011c0 <HAL_MspInit>
}
 800181c:	2000      	movs	r0, #0
 800181e:	bd08      	pop	{r3, pc}
 8001820:	40023c00 	.word	0x40023c00

08001824 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_IncTick+0x10>)
 8001826:	6811      	ldr	r1, [r2, #0]
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <HAL_IncTick+0x14>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	440b      	add	r3, r1
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200009f8 	.word	0x200009f8
 8001838:	2000047c 	.word	0x2000047c

0800183c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800183c:	4b01      	ldr	r3, [pc, #4]	; (8001844 <HAL_GetTick+0x8>)
 800183e:	6818      	ldr	r0, [r3, #0]
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	200009f8 	.word	0x200009f8

08001848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff fff6 	bl	800183c <HAL_GetTick>
 8001850:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001856:	d002      	beq.n	800185e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_Delay+0x24>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185e:	f7ff ffed 	bl	800183c <HAL_GetTick>
 8001862:	1b40      	subs	r0, r0, r5
 8001864:	42a0      	cmp	r0, r4
 8001866:	d3fa      	bcc.n	800185e <HAL_Delay+0x16>
  {
  }
}
 8001868:	bd38      	pop	{r3, r4, r5, pc}
 800186a:	bf00      	nop
 800186c:	2000047c 	.word	0x2000047c

08001870 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001872:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001874:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	0200      	lsls	r0, r0, #8
 800187e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001882:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800188c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001894:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_NVIC_SetPriority+0x68>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189e:	f1c3 0c07 	rsb	ip, r3, #7
 80018a2:	f1bc 0f04 	cmp.w	ip, #4
 80018a6:	bf28      	it	cs
 80018a8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ac:	f103 0e04 	add.w	lr, r3, #4
 80018b0:	f1be 0f06 	cmp.w	lr, #6
 80018b4:	d918      	bls.n	80018e8 <HAL_NVIC_SetPriority+0x54>
 80018b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80018bc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80018c0:	ea21 010c 	bic.w	r1, r1, ip
 80018c4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c6:	fa0e f303 	lsl.w	r3, lr, r3
 80018ca:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ce:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018d0:	2800      	cmp	r0, #0
 80018d2:	db0b      	blt.n	80018ec <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	0109      	lsls	r1, r1, #4
 80018d6:	b2c9      	uxtb	r1, r1
 80018d8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018dc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018e0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018e4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e8:	2300      	movs	r3, #0
 80018ea:	e7e5      	b.n	80018b8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	f000 000f 	and.w	r0, r0, #15
 80018f0:	0109      	lsls	r1, r1, #4
 80018f2:	b2c9      	uxtb	r1, r1
 80018f4:	4b02      	ldr	r3, [pc, #8]	; (8001900 <HAL_NVIC_SetPriority+0x6c>)
 80018f6:	5419      	strb	r1, [r3, r0]
 80018f8:	e7f4      	b.n	80018e4 <HAL_NVIC_SetPriority+0x50>
 80018fa:	bf00      	nop
 80018fc:	e000ed00 	.word	0xe000ed00
 8001900:	e000ed14 	.word	0xe000ed14

08001904 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001904:	2800      	cmp	r0, #0
 8001906:	db07      	blt.n	8001918 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001908:	f000 021f 	and.w	r2, r0, #31
 800190c:	0940      	lsrs	r0, r0, #5
 800190e:	2301      	movs	r3, #1
 8001910:	4093      	lsls	r3, r2
 8001912:	4a02      	ldr	r2, [pc, #8]	; (800191c <HAL_NVIC_EnableIRQ+0x18>)
 8001914:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001920:	3801      	subs	r0, #1
 8001922:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001926:	d20b      	bcs.n	8001940 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001928:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800192c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <HAL_SYSTICK_Config+0x24>)
 8001930:	21f0      	movs	r1, #240	; 0xf0
 8001932:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001936:	2000      	movs	r0, #0
 8001938:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	2207      	movs	r2, #7
 800193c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001940:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001948:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800194a:	6805      	ldr	r5, [r0, #0]
 800194c:	682c      	ldr	r4, [r5, #0]
 800194e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001952:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001954:	6804      	ldr	r4, [r0, #0]
 8001956:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001958:	6883      	ldr	r3, [r0, #8]
 800195a:	2b40      	cmp	r3, #64	; 0x40
 800195c:	d005      	beq.n	800196a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800195e:	6803      	ldr	r3, [r0, #0]
 8001960:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001962:	6803      	ldr	r3, [r0, #0]
 8001964:	60da      	str	r2, [r3, #12]
  }
}
 8001966:	bc30      	pop	{r4, r5}
 8001968:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800196a:	6803      	ldr	r3, [r0, #0]
 800196c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800196e:	6803      	ldr	r3, [r0, #0]
 8001970:	60d9      	str	r1, [r3, #12]
 8001972:	e7f8      	b.n	8001966 <DMA_SetConfig+0x1e>

08001974 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001974:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001976:	6803      	ldr	r3, [r0, #0]
 8001978:	b2d9      	uxtb	r1, r3
 800197a:	3910      	subs	r1, #16
 800197c:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <DMA_CalcBaseAndBitshift+0x38>)
 800197e:	fba2 4201 	umull	r4, r2, r2, r1
 8001982:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001984:	4c0a      	ldr	r4, [pc, #40]	; (80019b0 <DMA_CalcBaseAndBitshift+0x3c>)
 8001986:	5ca2      	ldrb	r2, [r4, r2]
 8001988:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 800198a:	295f      	cmp	r1, #95	; 0x5f
 800198c:	d908      	bls.n	80019a0 <DMA_CalcBaseAndBitshift+0x2c>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800198e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	3304      	adds	r3, #4
 8001998:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800199a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800199c:	bc10      	pop	{r4}
 800199e:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019a0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019a4:	f023 0303 	bic.w	r3, r3, #3
 80019a8:	6583      	str	r3, [r0, #88]	; 0x58
 80019aa:	e7f6      	b.n	800199a <DMA_CalcBaseAndBitshift+0x26>
 80019ac:	aaaaaaab 	.word	0xaaaaaaab
 80019b0:	08003638 	.word	0x08003638

080019b4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019b6:	6982      	ldr	r2, [r0, #24]
 80019b8:	b992      	cbnz	r2, 80019e0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d00a      	beq.n	80019d4 <DMA_CheckFifoParam+0x20>
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d002      	beq.n	80019c8 <DMA_CheckFifoParam+0x14>
 80019c2:	b10b      	cbz	r3, 80019c8 <DMA_CheckFifoParam+0x14>
 80019c4:	2000      	movs	r0, #0
 80019c6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80019ce:	d128      	bne.n	8001a22 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80019d0:	2000      	movs	r0, #0
 80019d2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019da:	d024      	beq.n	8001a26 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80019dc:	2000      	movs	r0, #0
 80019de:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80019e4:	d009      	beq.n	80019fa <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d925      	bls.n	8001a36 <DMA_CheckFifoParam+0x82>
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d125      	bne.n	8001a3a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80019f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80019f4:	d123      	bne.n	8001a3e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80019f6:	2000      	movs	r0, #0
 80019f8:	4770      	bx	lr
    switch (tmp)
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d803      	bhi.n	8001a06 <DMA_CheckFifoParam+0x52>
 80019fe:	e8df f003 	tbb	[pc, r3]
 8001a02:	0414      	.short	0x0414
 8001a04:	0a14      	.short	0x0a14
 8001a06:	2000      	movs	r0, #0
 8001a08:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001a10:	d10d      	bne.n	8001a2e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a12:	2000      	movs	r0, #0
 8001a14:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001a18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a1c:	d009      	beq.n	8001a32 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	2000      	movs	r0, #0
 8001a20:	4770      	bx	lr
        status = HAL_ERROR;
 8001a22:	2001      	movs	r0, #1
 8001a24:	4770      	bx	lr
        status = HAL_ERROR;
 8001a26:	2001      	movs	r0, #1
 8001a28:	4770      	bx	lr
      status = HAL_ERROR;
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a2e:	2001      	movs	r0, #1
 8001a30:	4770      	bx	lr
        status = HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
 8001a34:	4770      	bx	lr
      status = HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
 8001a38:	4770      	bx	lr
    switch (tmp)
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001a3e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_DMA_Init>:
{
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fef8 	bl	800183c <HAL_GetTick>
 8001a4c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001a4e:	2c00      	cmp	r4, #0
 8001a50:	d05a      	beq.n	8001b08 <HAL_DMA_Init+0xc4>
  __HAL_UNLOCK(hdma);
 8001a52:	2300      	movs	r3, #0
 8001a54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001a5e:	6822      	ldr	r2, [r4, #0]
 8001a60:	6813      	ldr	r3, [r2, #0]
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	f012 0f01 	tst.w	r2, #1
 8001a70:	d00a      	beq.n	8001a88 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a72:	f7ff fee3 	bl	800183c <HAL_GetTick>
 8001a76:	1b43      	subs	r3, r0, r5
 8001a78:	2b05      	cmp	r3, #5
 8001a7a:	d9f5      	bls.n	8001a68 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a7c:	2320      	movs	r3, #32
 8001a7e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a80:	2003      	movs	r0, #3
 8001a82:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001a86:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001a88:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a8a:	4820      	ldr	r0, [pc, #128]	; (8001b0c <HAL_DMA_Init+0xc8>)
 8001a8c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8e:	6861      	ldr	r1, [r4, #4]
 8001a90:	68a2      	ldr	r2, [r4, #8]
 8001a92:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a94:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a96:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a98:	6921      	ldr	r1, [r4, #16]
 8001a9a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a9c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa0:	69a1      	ldr	r1, [r4, #24]
 8001aa2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa8:	6a21      	ldr	r1, [r4, #32]
 8001aaa:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aac:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ab0:	2904      	cmp	r1, #4
 8001ab2:	d01e      	beq.n	8001af2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001ab4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001ab6:	6826      	ldr	r6, [r4, #0]
 8001ab8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001aba:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ac0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d107      	bne.n	8001ad6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001ac6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ac8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001acc:	b11b      	cbz	r3, 8001ad6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff ff70 	bl	80019b4 <DMA_CheckFifoParam>
 8001ad4:	b990      	cbnz	r0, 8001afc <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001ad6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f7ff ff4b 	bl	8001974 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ade:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ae0:	233f      	movs	r3, #63	; 0x3f
 8001ae2:	4093      	lsls	r3, r2
 8001ae4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001af0:	e7c9      	b.n	8001a86 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001af4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001af6:	4301      	orrs	r1, r0
 8001af8:	430a      	orrs	r2, r1
 8001afa:	e7db      	b.n	8001ab4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001b00:	2001      	movs	r0, #1
 8001b02:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001b06:	e7be      	b.n	8001a86 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
 8001b0a:	e7bc      	b.n	8001a86 <HAL_DMA_Init+0x42>
 8001b0c:	f010803f 	.word	0xf010803f

08001b10 <HAL_DMA_Start>:
{
 8001b10:	b538      	push	{r3, r4, r5, lr}
 8001b12:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001b14:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001b18:	2801      	cmp	r0, #1
 8001b1a:	d01b      	beq.n	8001b54 <HAL_DMA_Start+0x44>
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b22:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001b26:	b2c0      	uxtb	r0, r0
 8001b28:	2801      	cmp	r0, #1
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_Start+0x26>
    __HAL_UNLOCK(hdma);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 8001b32:	2002      	movs	r0, #2
}
 8001b34:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b36:	2002      	movs	r0, #2
 8001b38:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b3c:	2500      	movs	r5, #0
 8001b3e:	6565      	str	r5, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff ff01 	bl	8001948 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8001b46:	6822      	ldr	r2, [r4, #0]
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b50:	4628      	mov	r0, r5
 8001b52:	e7ef      	b.n	8001b34 <HAL_DMA_Start+0x24>
  __HAL_LOCK(hdma);
 8001b54:	2002      	movs	r0, #2
 8001b56:	e7ed      	b.n	8001b34 <HAL_DMA_Start+0x24>

08001b58 <HAL_DMA_Abort>:
{
 8001b58:	b570      	push	{r4, r5, r6, lr}
 8001b5a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b5c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001b5e:	f7ff fe6d 	bl	800183c <HAL_GetTick>
 8001b62:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b64:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d006      	beq.n	8001b7c <HAL_DMA_Abort+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001b72:	2300      	movs	r3, #0
 8001b74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001b78:	2001      	movs	r0, #1
}
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b7c:	6822      	ldr	r2, [r4, #0]
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	f023 0316 	bic.w	r3, r3, #22
 8001b84:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b86:	6822      	ldr	r2, [r4, #0]
 8001b88:	6953      	ldr	r3, [r2, #20]
 8001b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b8e:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b92:	b1e3      	cbz	r3, 8001bce <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b94:	6822      	ldr	r2, [r4, #0]
 8001b96:	6813      	ldr	r3, [r2, #0]
 8001b98:	f023 0308 	bic.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b9e:	6822      	ldr	r2, [r4, #0]
 8001ba0:	6813      	ldr	r3, [r2, #0]
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f013 0f01 	tst.w	r3, #1
 8001bb0:	d011      	beq.n	8001bd6 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb2:	f7ff fe43 	bl	800183c <HAL_GetTick>
 8001bb6:	1b43      	subs	r3, r0, r5
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d9f5      	bls.n	8001ba8 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bbc:	2320      	movs	r3, #32
 8001bbe:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001bcc:	e7d5      	b.n	8001b7a <HAL_DMA_Abort+0x22>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1df      	bne.n	8001b94 <HAL_DMA_Abort+0x3c>
 8001bd4:	e7e3      	b.n	8001b9e <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bd8:	233f      	movs	r3, #63	; 0x3f
 8001bda:	4093      	lsls	r3, r2
 8001bdc:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001bea:	e7c6      	b.n	8001b7a <HAL_DMA_Abort+0x22>

08001bec <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d003      	beq.n	8001bfe <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfe:	2305      	movs	r3, #5
 8001c00:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c04:	6802      	ldr	r2, [r0, #0]
 8001c06:	6813      	ldr	r3, [r2, #0]
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c0e:	2000      	movs	r0, #0
}
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_DMA_IRQHandler>:
{
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c1e:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <HAL_DMA_IRQHandler+0x1d4>)
 8001c20:	681d      	ldr	r5, [r3, #0]
 8001c22:	4b72      	ldr	r3, [pc, #456]	; (8001dec <HAL_DMA_IRQHandler+0x1d8>)
 8001c24:	fba3 3505 	umull	r3, r5, r3, r5
 8001c28:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8001c2c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c2e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001c30:	2308      	movs	r3, #8
 8001c32:	4093      	lsls	r3, r2
 8001c34:	4233      	tst	r3, r6
 8001c36:	d010      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c38:	6803      	ldr	r3, [r0, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	f012 0f04 	tst.w	r2, #4
 8001c40:	d00b      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f022 0204 	bic.w	r2, r2, #4
 8001c48:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c4a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001c4c:	2308      	movs	r3, #8
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c52:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c5a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	4233      	tst	r3, r6
 8001c62:	d009      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c64:	6822      	ldr	r2, [r4, #0]
 8001c66:	6952      	ldr	r2, [r2, #20]
 8001c68:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001c6c:	d004      	beq.n	8001c78 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c6e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c72:	f043 0302 	orr.w	r3, r3, #2
 8001c76:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c78:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	4233      	tst	r3, r6
 8001c80:	d009      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c82:	6822      	ldr	r2, [r4, #0]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	f012 0f02 	tst.w	r2, #2
 8001c8a:	d004      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c8c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001c98:	2310      	movs	r3, #16
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	4233      	tst	r3, r6
 8001c9e:	d024      	beq.n	8001cea <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ca0:	6822      	ldr	r2, [r4, #0]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	f012 0f08 	tst.w	r2, #8
 8001ca8:	d01f      	beq.n	8001cea <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001caa:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001cb4:	d00d      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001cbc:	d104      	bne.n	8001cc8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8001cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cc0:	b19b      	cbz	r3, 8001cea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4798      	blx	r3
 8001cc6:	e010      	b.n	8001cea <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001cca:	b173      	cbz	r3, 8001cea <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4798      	blx	r3
 8001cd0:	e00b      	b.n	8001cea <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001cd8:	d103      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ce4:	b10b      	cbz	r3, 8001cea <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001cec:	2320      	movs	r3, #32
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	4233      	tst	r3, r6
 8001cf2:	d055      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cf4:	6822      	ldr	r2, [r4, #0]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	f012 0f10 	tst.w	r2, #16
 8001cfc:	d050      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cfe:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d00:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d00e      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001d12:	d033      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001d1a:	d12a      	bne.n	8001d72 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8001d1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d03e      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8001d22:	4620      	mov	r0, r4
 8001d24:	4798      	blx	r3
 8001d26:	e03b      	b.n	8001da0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d28:	6822      	ldr	r2, [r4, #0]
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	f023 0316 	bic.w	r3, r3, #22
 8001d30:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	6953      	ldr	r3, [r2, #20]
 8001d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d3a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d3e:	b1a3      	cbz	r3, 8001d6a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d40:	6822      	ldr	r2, [r4, #0]
 8001d42:	6813      	ldr	r3, [r2, #0]
 8001d44:	f023 0308 	bic.w	r3, r3, #8
 8001d48:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001d4c:	233f      	movs	r3, #63	; 0x3f
 8001d4e:	4093      	lsls	r3, r2
 8001d50:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001d52:	2300      	movs	r3, #0
 8001d54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001d5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d03f      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001d64:	4620      	mov	r0, r4
 8001d66:	4798      	blx	r3
        return;
 8001d68:	e03c      	b.n	8001de4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e7      	bne.n	8001d40 <HAL_DMA_IRQHandler+0x12c>
 8001d70:	e7eb      	b.n	8001d4a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001d72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d74:	b1a3      	cbz	r3, 8001da0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001d76:	4620      	mov	r0, r4
 8001d78:	4798      	blx	r3
 8001d7a:	e011      	b.n	8001da0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001d82:	d109      	bne.n	8001d98 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	f022 0210 	bic.w	r2, r2, #16
 8001d8a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001d98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d9a:	b10b      	cbz	r3, 8001da0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001da0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001da2:	b1fb      	cbz	r3, 8001de4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001da4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001da6:	f013 0f01 	tst.w	r3, #1
 8001daa:	d017      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dac:	2305      	movs	r3, #5
 8001dae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001db2:	6822      	ldr	r2, [r4, #0]
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	f023 0301 	bic.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001dbc:	9b01      	ldr	r3, [sp, #4]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	42ab      	cmp	r3, r5
 8001dc4:	d804      	bhi.n	8001dd0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f013 0f01 	tst.w	r3, #1
 8001dce:	d1f5      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001ddc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001dde:	b10b      	cbz	r3, 8001de4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001de0:	4620      	mov	r0, r4
 8001de2:	4798      	blx	r3
}
 8001de4:	b003      	add	sp, #12
 8001de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de8:	20000484 	.word	0x20000484
 8001dec:	1b4e81b5 	.word	0x1b4e81b5

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	e037      	b.n	8001e68 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df8:	2207      	movs	r2, #7
 8001dfa:	e000      	b.n	8001dfe <HAL_GPIO_Init+0xe>
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	40aa      	lsls	r2, r5
 8001e00:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e02:	3402      	adds	r4, #2
 8001e04:	4d68      	ldr	r5, [pc, #416]	; (8001fa8 <HAL_GPIO_Init+0x1b8>)
 8001e06:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e0a:	4a68      	ldr	r2, [pc, #416]	; (8001fac <HAL_GPIO_Init+0x1bc>)
 8001e0c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	ea6f 020c 	mvn.w	r2, ip
 8001e12:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e16:	684e      	ldr	r6, [r1, #4]
 8001e18:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8001e1c:	d001      	beq.n	8001e22 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8001e1e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8001e22:	4c62      	ldr	r4, [pc, #392]	; (8001fac <HAL_GPIO_Init+0x1bc>)
 8001e24:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8001e26:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2c:	684e      	ldr	r6, [r1, #4]
 8001e2e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001e32:	d001      	beq.n	8001e38 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8001e34:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001e38:	4c5c      	ldr	r4, [pc, #368]	; (8001fac <HAL_GPIO_Init+0x1bc>)
 8001e3a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e42:	684e      	ldr	r6, [r1, #4]
 8001e44:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001e48:	d001      	beq.n	8001e4e <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 8001e4a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001e4e:	4c57      	ldr	r4, [pc, #348]	; (8001fac <HAL_GPIO_Init+0x1bc>)
 8001e50:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001e52:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e56:	684d      	ldr	r5, [r1, #4]
 8001e58:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001e5c:	d001      	beq.n	8001e62 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8001e5e:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8001e62:	4c52      	ldr	r4, [pc, #328]	; (8001fac <HAL_GPIO_Init+0x1bc>)
 8001e64:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e66:	3301      	adds	r3, #1
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	f200 809a 	bhi.w	8001fa2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001e6e:	2201      	movs	r2, #1
 8001e70:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	680c      	ldr	r4, [r1, #0]
 8001e74:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001e78:	ea32 0404 	bics.w	r4, r2, r4
 8001e7c:	d1f3      	bne.n	8001e66 <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7e:	684c      	ldr	r4, [r1, #4]
 8001e80:	1e65      	subs	r5, r4, #1
 8001e82:	2d01      	cmp	r5, #1
 8001e84:	d903      	bls.n	8001e8e <HAL_GPIO_Init+0x9e>
 8001e86:	2c11      	cmp	r4, #17
 8001e88:	d001      	beq.n	8001e8e <HAL_GPIO_Init+0x9e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8a:	2c12      	cmp	r4, #18
 8001e8c:	d112      	bne.n	8001eb4 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR; 
 8001e8e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	005e      	lsls	r6, r3, #1
 8001e92:	2403      	movs	r4, #3
 8001e94:	40b4      	lsls	r4, r6
 8001e96:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9a:	68cc      	ldr	r4, [r1, #12]
 8001e9c:	40b4      	lsls	r4, r6
 8001e9e:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001ea0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ea2:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ea8:	684c      	ldr	r4, [r1, #4]
 8001eaa:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8001eb2:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8001eb4:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eb6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001eba:	2403      	movs	r4, #3
 8001ebc:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ec0:	43e2      	mvns	r2, r4
 8001ec2:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec6:	688c      	ldr	r4, [r1, #8]
 8001ec8:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ecc:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001ece:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed0:	684c      	ldr	r4, [r1, #4]
 8001ed2:	2c02      	cmp	r4, #2
 8001ed4:	d001      	beq.n	8001eda <HAL_GPIO_Init+0xea>
 8001ed6:	2c12      	cmp	r4, #18
 8001ed8:	d10f      	bne.n	8001efa <HAL_GPIO_Init+0x10a>
        temp = GPIOx->AFR[position >> 3U];
 8001eda:	08dd      	lsrs	r5, r3, #3
 8001edc:	3508      	adds	r5, #8
 8001ede:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ee2:	f003 0407 	and.w	r4, r3, #7
 8001ee6:	00a6      	lsls	r6, r4, #2
 8001ee8:	240f      	movs	r4, #15
 8001eea:	40b4      	lsls	r4, r6
 8001eec:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef0:	690c      	ldr	r4, [r1, #16]
 8001ef2:	40b4      	lsls	r4, r6
 8001ef4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001ef6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8001efa:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efc:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001efe:	684a      	ldr	r2, [r1, #4]
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f08:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001f0a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f0c:	684a      	ldr	r2, [r1, #4]
 8001f0e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001f12:	d0a8      	beq.n	8001e66 <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f14:	2200      	movs	r2, #0
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <HAL_GPIO_Init+0x1c0>)
 8001f1a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001f1c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001f20:	6454      	str	r4, [r2, #68]	; 0x44
 8001f22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f24:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001f28:	9201      	str	r2, [sp, #4]
 8001f2a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f2c:	089c      	lsrs	r4, r3, #2
 8001f2e:	1ca5      	adds	r5, r4, #2
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_GPIO_Init+0x1b8>)
 8001f32:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f36:	f003 0203 	and.w	r2, r3, #3
 8001f3a:	0095      	lsls	r5, r2, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	40aa      	lsls	r2, r5
 8001f40:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <HAL_GPIO_Init+0x1c4>)
 8001f46:	4290      	cmp	r0, r2
 8001f48:	f43f af58 	beq.w	8001dfc <HAL_GPIO_Init+0xc>
 8001f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f50:	4290      	cmp	r0, r2
 8001f52:	d01a      	beq.n	8001f8a <HAL_GPIO_Init+0x19a>
 8001f54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f58:	4290      	cmp	r0, r2
 8001f5a:	d018      	beq.n	8001f8e <HAL_GPIO_Init+0x19e>
 8001f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f60:	4290      	cmp	r0, r2
 8001f62:	d016      	beq.n	8001f92 <HAL_GPIO_Init+0x1a2>
 8001f64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d014      	beq.n	8001f96 <HAL_GPIO_Init+0x1a6>
 8001f6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f70:	4290      	cmp	r0, r2
 8001f72:	d012      	beq.n	8001f9a <HAL_GPIO_Init+0x1aa>
 8001f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f78:	4290      	cmp	r0, r2
 8001f7a:	d010      	beq.n	8001f9e <HAL_GPIO_Init+0x1ae>
 8001f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f80:	4290      	cmp	r0, r2
 8001f82:	f43f af39 	beq.w	8001df8 <HAL_GPIO_Init+0x8>
 8001f86:	2208      	movs	r2, #8
 8001f88:	e739      	b.n	8001dfe <HAL_GPIO_Init+0xe>
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	e737      	b.n	8001dfe <HAL_GPIO_Init+0xe>
 8001f8e:	2202      	movs	r2, #2
 8001f90:	e735      	b.n	8001dfe <HAL_GPIO_Init+0xe>
 8001f92:	2203      	movs	r2, #3
 8001f94:	e733      	b.n	8001dfe <HAL_GPIO_Init+0xe>
 8001f96:	2204      	movs	r2, #4
 8001f98:	e731      	b.n	8001dfe <HAL_GPIO_Init+0xe>
 8001f9a:	2205      	movs	r2, #5
 8001f9c:	e72f      	b.n	8001dfe <HAL_GPIO_Init+0xe>
 8001f9e:	2206      	movs	r2, #6
 8001fa0:	e72d      	b.n	8001dfe <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 8001fa2:	b003      	add	sp, #12
 8001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40013800 	.word	0x40013800
 8001fac:	40013c00 	.word	0x40013c00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020000 	.word	0x40020000

08001fb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	b10a      	cbz	r2, 8001fbe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fba:	6181      	str	r1, [r0, #24]
 8001fbc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fbe:	0409      	lsls	r1, r1, #16
 8001fc0:	6181      	str	r1, [r0, #24]
  }
}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001fc4:	6943      	ldr	r3, [r0, #20]
 8001fc6:	ea31 0303 	bics.w	r3, r1, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fcc:	6181      	str	r1, [r0, #24]
  }
}
 8001fce:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fd0:	0409      	lsls	r1, r1, #16
 8001fd2:	6181      	str	r1, [r0, #24]
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	b082      	sub	sp, #8
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fdc:	4604      	mov	r4, r0
 8001fde:	2800      	cmp	r0, #0
 8001fe0:	f000 81d7 	beq.w	8002392 <HAL_RCC_OscConfig+0x3ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe4:	6803      	ldr	r3, [r0, #0]
 8001fe6:	f013 0f01 	tst.w	r3, #1
 8001fea:	d03b      	beq.n	8002064 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fec:	4b9f      	ldr	r3, [pc, #636]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d02c      	beq.n	8002052 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff8:	4b9c      	ldr	r3, [pc, #624]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002000:	2b08      	cmp	r3, #8
 8002002:	d021      	beq.n	8002048 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002004:	6863      	ldr	r3, [r4, #4]
 8002006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200a:	d04f      	beq.n	80020ac <HAL_RCC_OscConfig+0xd4>
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d052      	beq.n	80020b8 <HAL_RCC_OscConfig+0xe0>
 8002012:	4b96      	ldr	r3, [pc, #600]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002022:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002024:	6863      	ldr	r3, [r4, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d050      	beq.n	80020cc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fc07 	bl	800183c <HAL_GetTick>
 800202e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002030:	4b8e      	ldr	r3, [pc, #568]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002038:	d114      	bne.n	8002064 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203a:	f7ff fbff 	bl	800183c <HAL_GetTick>
 800203e:	1b40      	subs	r0, r0, r5
 8002040:	2864      	cmp	r0, #100	; 0x64
 8002042:	d9f5      	bls.n	8002030 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002044:	2003      	movs	r0, #3
 8002046:	e1a5      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002048:	4b88      	ldr	r3, [pc, #544]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002050:	d0d8      	beq.n	8002004 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002052:	4b86      	ldr	r3, [pc, #536]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800205a:	d003      	beq.n	8002064 <HAL_RCC_OscConfig+0x8c>
 800205c:	6863      	ldr	r3, [r4, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 819a 	beq.w	8002398 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	f013 0f02 	tst.w	r3, #2
 800206a:	d054      	beq.n	8002116 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206c:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f013 0f0c 	tst.w	r3, #12
 8002074:	d03e      	beq.n	80020f4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b7d      	ldr	r3, [pc, #500]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d033      	beq.n	80020ea <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002082:	68e3      	ldr	r3, [r4, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d068      	beq.n	800215a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b79      	ldr	r3, [pc, #484]	; (8002270 <HAL_RCC_OscConfig+0x298>)
 800208a:	2201      	movs	r2, #1
 800208c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff fbd5 	bl	800183c <HAL_GetTick>
 8002092:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	4b75      	ldr	r3, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f013 0f02 	tst.w	r3, #2
 800209c:	d154      	bne.n	8002148 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209e:	f7ff fbcd 	bl	800183c <HAL_GetTick>
 80020a2:	1b40      	subs	r0, r0, r5
 80020a4:	2802      	cmp	r0, #2
 80020a6:	d9f5      	bls.n	8002094 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80020a8:	2003      	movs	r0, #3
 80020aa:	e173      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ac:	4a6f      	ldr	r2, [pc, #444]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020ae:	6813      	ldr	r3, [r2, #0]
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e7b5      	b.n	8002024 <HAL_RCC_OscConfig+0x4c>
 80020b8:	4b6c      	ldr	r3, [pc, #432]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	e7ab      	b.n	8002024 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80020cc:	f7ff fbb6 	bl	800183c <HAL_GetTick>
 80020d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020da:	d0c3      	beq.n	8002064 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7ff fbae 	bl	800183c <HAL_GetTick>
 80020e0:	1b40      	subs	r0, r0, r5
 80020e2:	2864      	cmp	r0, #100	; 0x64
 80020e4:	d9f5      	bls.n	80020d2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80020e6:	2003      	movs	r0, #3
 80020e8:	e154      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b60      	ldr	r3, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020f2:	d1c6      	bne.n	8002082 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f4:	4b5d      	ldr	r3, [pc, #372]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f013 0f02 	tst.w	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_OscConfig+0x12e>
 80020fe:	68e3      	ldr	r3, [r4, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	f040 814b 	bne.w	800239c <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002106:	4a59      	ldr	r2, [pc, #356]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002108:	6813      	ldr	r3, [r2, #0]
 800210a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800210e:	6921      	ldr	r1, [r4, #16]
 8002110:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002114:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	f013 0f08 	tst.w	r3, #8
 800211c:	d042      	beq.n	80021a4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800211e:	6963      	ldr	r3, [r4, #20]
 8002120:	b36b      	cbz	r3, 800217e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_OscConfig+0x298>)
 8002124:	2201      	movs	r2, #1
 8002126:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7ff fb87 	bl	800183c <HAL_GetTick>
 800212e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002130:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002134:	f013 0f02 	tst.w	r3, #2
 8002138:	d134      	bne.n	80021a4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213a:	f7ff fb7f 	bl	800183c <HAL_GetTick>
 800213e:	1b40      	subs	r0, r0, r5
 8002140:	2802      	cmp	r0, #2
 8002142:	d9f5      	bls.n	8002130 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002144:	2003      	movs	r0, #3
 8002146:	e125      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4a48      	ldr	r2, [pc, #288]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800214a:	6813      	ldr	r3, [r2, #0]
 800214c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002150:	6921      	ldr	r1, [r4, #16]
 8002152:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e7dd      	b.n	8002116 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800215a:	4b45      	ldr	r3, [pc, #276]	; (8002270 <HAL_RCC_OscConfig+0x298>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002160:	f7ff fb6c 	bl	800183c <HAL_GetTick>
 8002164:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f013 0f02 	tst.w	r3, #2
 800216e:	d0d2      	beq.n	8002116 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002170:	f7ff fb64 	bl	800183c <HAL_GetTick>
 8002174:	1b40      	subs	r0, r0, r5
 8002176:	2802      	cmp	r0, #2
 8002178:	d9f5      	bls.n	8002166 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800217a:	2003      	movs	r0, #3
 800217c:	e10a      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217e:	4b3c      	ldr	r3, [pc, #240]	; (8002270 <HAL_RCC_OscConfig+0x298>)
 8002180:	2200      	movs	r2, #0
 8002182:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7ff fb59 	bl	800183c <HAL_GetTick>
 800218a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800218e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002190:	f013 0f02 	tst.w	r3, #2
 8002194:	d006      	beq.n	80021a4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002196:	f7ff fb51 	bl	800183c <HAL_GetTick>
 800219a:	1b40      	subs	r0, r0, r5
 800219c:	2802      	cmp	r0, #2
 800219e:	d9f5      	bls.n	800218c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80021a0:	2003      	movs	r0, #3
 80021a2:	e0f7      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	f013 0f04 	tst.w	r3, #4
 80021aa:	d077      	beq.n	800229c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ac:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021b4:	d133      	bne.n	800221e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80021bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021ce:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b28      	ldr	r3, [pc, #160]	; (8002274 <HAL_RCC_OscConfig+0x29c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021d8:	d023      	beq.n	8002222 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021da:	68a3      	ldr	r3, [r4, #8]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d034      	beq.n	800224a <HAL_RCC_OscConfig+0x272>
 80021e0:	2b05      	cmp	r3, #5
 80021e2:	d038      	beq.n	8002256 <HAL_RCC_OscConfig+0x27e>
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80021e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	671a      	str	r2, [r3, #112]	; 0x70
 80021ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021f0:	f022 0204 	bic.w	r2, r2, #4
 80021f4:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f6:	68a3      	ldr	r3, [r4, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d03d      	beq.n	8002278 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fc:	f7ff fb1e 	bl	800183c <HAL_GetTick>
 8002200:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002202:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	f013 0f02 	tst.w	r3, #2
 800220a:	d146      	bne.n	800229a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7ff fb16 	bl	800183c <HAL_GetTick>
 8002210:	1b80      	subs	r0, r0, r6
 8002212:	f241 3388 	movw	r3, #5000	; 0x1388
 8002216:	4298      	cmp	r0, r3
 8002218:	d9f3      	bls.n	8002202 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800221a:	2003      	movs	r0, #3
 800221c:	e0ba      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2500      	movs	r5, #0
 8002220:	e7d6      	b.n	80021d0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002222:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_RCC_OscConfig+0x29c>)
 8002224:	6813      	ldr	r3, [r2, #0]
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800222c:	f7ff fb06 	bl	800183c <HAL_GetTick>
 8002230:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_OscConfig+0x29c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f413 7f80 	tst.w	r3, #256	; 0x100
 800223a:	d1ce      	bne.n	80021da <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223c:	f7ff fafe 	bl	800183c <HAL_GetTick>
 8002240:	1b80      	subs	r0, r0, r6
 8002242:	2802      	cmp	r0, #2
 8002244:	d9f5      	bls.n	8002232 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002246:	2003      	movs	r0, #3
 8002248:	e0a4      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800224c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6713      	str	r3, [r2, #112]	; 0x70
 8002254:	e7cf      	b.n	80021f6 <HAL_RCC_OscConfig+0x21e>
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800225a:	f042 0204 	orr.w	r2, r2, #4
 800225e:	671a      	str	r2, [r3, #112]	; 0x70
 8002260:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	671a      	str	r2, [r3, #112]	; 0x70
 8002268:	e7c5      	b.n	80021f6 <HAL_RCC_OscConfig+0x21e>
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	42470000 	.word	0x42470000
 8002274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fae0 	bl	800183c <HAL_GetTick>
 800227c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCC_OscConfig+0x3e4>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002282:	f013 0f02 	tst.w	r3, #2
 8002286:	d008      	beq.n	800229a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002288:	f7ff fad8 	bl	800183c <HAL_GetTick>
 800228c:	1b80      	subs	r0, r0, r6
 800228e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002292:	4298      	cmp	r0, r3
 8002294:	d9f3      	bls.n	800227e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e07c      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229a:	b9e5      	cbnz	r5, 80022d6 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229c:	69a3      	ldr	r3, [r4, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d07e      	beq.n	80023a0 <HAL_RCC_OscConfig+0x3c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a2:	4a46      	ldr	r2, [pc, #280]	; (80023bc <HAL_RCC_OscConfig+0x3e4>)
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	f002 020c 	and.w	r2, r2, #12
 80022aa:	2a08      	cmp	r2, #8
 80022ac:	d051      	beq.n	8002352 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d017      	beq.n	80022e2 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b43      	ldr	r3, [pc, #268]	; (80023c0 <HAL_RCC_OscConfig+0x3e8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fac0 	bl	800183c <HAL_GetTick>
 80022bc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_RCC_OscConfig+0x3e4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022c6:	d042      	beq.n	800234e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff fab8 	bl	800183c <HAL_GetTick>
 80022cc:	1b00      	subs	r0, r0, r4
 80022ce:	2802      	cmp	r0, #2
 80022d0:	d9f5      	bls.n	80022be <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80022d2:	2003      	movs	r0, #3
 80022d4:	e05e      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d6:	4a39      	ldr	r2, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0x3e4>)
 80022d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	e7dc      	b.n	800229c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_RCC_OscConfig+0x3e8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80022e8:	f7ff faa8 	bl	800183c <HAL_GetTick>
 80022ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	4b33      	ldr	r3, [pc, #204]	; (80023bc <HAL_RCC_OscConfig+0x3e4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022f6:	d006      	beq.n	8002306 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff faa0 	bl	800183c <HAL_GetTick>
 80022fc:	1b40      	subs	r0, r0, r5
 80022fe:	2802      	cmp	r0, #2
 8002300:	d9f5      	bls.n	80022ee <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8002302:	2003      	movs	r0, #3
 8002304:	e046      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002306:	69e3      	ldr	r3, [r4, #28]
 8002308:	6a22      	ldr	r2, [r4, #32]
 800230a:	4313      	orrs	r3, r2
 800230c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800230e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002312:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002314:	0852      	lsrs	r2, r2, #1
 8002316:	3a01      	subs	r2, #1
 8002318:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800231c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800231e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002322:	4a26      	ldr	r2, [pc, #152]	; (80023bc <HAL_RCC_OscConfig+0x3e4>)
 8002324:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_RCC_OscConfig+0x3e8>)
 8002328:	2201      	movs	r2, #1
 800232a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800232c:	f7ff fa86 	bl	800183c <HAL_GetTick>
 8002330:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <HAL_RCC_OscConfig+0x3e4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff fa7e 	bl	800183c <HAL_GetTick>
 8002340:	1b00      	subs	r0, r0, r4
 8002342:	2802      	cmp	r0, #2
 8002344:	d9f5      	bls.n	8002332 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002346:	2003      	movs	r0, #3
 8002348:	e024      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800234a:	2000      	movs	r0, #0
 800234c:	e022      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
 800234e:	2000      	movs	r0, #0
 8002350:	e020      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002352:	2b01      	cmp	r3, #1
 8002354:	d026      	beq.n	80023a4 <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_OscConfig+0x3e4>)
 8002358:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800235e:	69e2      	ldr	r2, [r4, #28]
 8002360:	4291      	cmp	r1, r2
 8002362:	d121      	bne.n	80023a8 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002364:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002368:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	428a      	cmp	r2, r1
 800236c:	d11e      	bne.n	80023ac <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800236e:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002370:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002374:	401a      	ands	r2, r3
 8002376:	428a      	cmp	r2, r1
 8002378:	d11a      	bne.n	80023b0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800237a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002380:	428a      	cmp	r2, r1
 8002382:	d117      	bne.n	80023b4 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002384:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002388:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800238a:	4293      	cmp	r3, r2
 800238c:	d114      	bne.n	80023b8 <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 800238e:	2000      	movs	r0, #0
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
    return HAL_ERROR;
 8002392:	2001      	movs	r0, #1
}
 8002394:	b002      	add	sp, #8
 8002396:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002398:	2001      	movs	r0, #1
 800239a:	e7fb      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
        return HAL_ERROR;
 800239c:	2001      	movs	r0, #1
 800239e:	e7f9      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
  return HAL_OK;
 80023a0:	2000      	movs	r0, #0
 80023a2:	e7f7      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
        return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
 80023a6:	e7f5      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
          return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
 80023aa:	e7f3      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
 80023ac:	2001      	movs	r0, #1
 80023ae:	e7f1      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
 80023b0:	2001      	movs	r0, #1
 80023b2:	e7ef      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
 80023b4:	2001      	movs	r0, #1
 80023b6:	e7ed      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
 80023b8:	2001      	movs	r0, #1
 80023ba:	e7eb      	b.n	8002394 <HAL_RCC_OscConfig+0x3bc>
 80023bc:	40023800 	.word	0x40023800
 80023c0:	42470000 	.word	0x42470000

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d057      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0xbe>
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d157      	bne.n	8002486 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d6:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023e4:	d02a      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_GetSysClockFreq+0xc8>)
 80023e8:	6859      	ldr	r1, [r3, #4]
 80023ea:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80023ee:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80023f2:	ebb1 000c 	subs.w	r0, r1, ip
 80023f6:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80023fa:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80023fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002402:	0181      	lsls	r1, r0, #6
 8002404:	1a09      	subs	r1, r1, r0
 8002406:	eb63 030e 	sbc.w	r3, r3, lr
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002410:	00c9      	lsls	r1, r1, #3
 8002412:	eb11 0c0c 	adds.w	ip, r1, ip
 8002416:	f143 0300 	adc.w	r3, r3, #0
 800241a:	0259      	lsls	r1, r3, #9
 800241c:	2300      	movs	r3, #0
 800241e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002422:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002426:	f7fd ffd5 	bl	80003d4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_RCC_GetSysClockFreq+0xc8>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002432:	3301      	adds	r3, #1
 8002434:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002436:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800243a:	e025      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0xc8>)
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002444:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002448:	ebb1 000c 	subs.w	r0, r1, ip
 800244c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002450:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002454:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002458:	0181      	lsls	r1, r0, #6
 800245a:	1a09      	subs	r1, r1, r0
 800245c:	eb63 030e 	sbc.w	r3, r3, lr
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002466:	00c9      	lsls	r1, r1, #3
 8002468:	eb11 0c0c 	adds.w	ip, r1, ip
 800246c:	f143 0300 	adc.w	r3, r3, #0
 8002470:	0299      	lsls	r1, r3, #10
 8002472:	2300      	movs	r3, #0
 8002474:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002478:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 800247c:	f7fd ffaa 	bl	80003d4 <__aeabi_uldivmod>
 8002480:	e7d3      	b.n	800242a <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002484:	e000      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002486:	4803      	ldr	r0, [pc, #12]	; (8002494 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002488:	bd08      	pop	{r3, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	007a1200 	.word	0x007a1200
 8002494:	00f42400 	.word	0x00f42400

08002498 <HAL_RCC_ClockConfig>:
{
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800249c:	4604      	mov	r4, r0
 800249e:	2800      	cmp	r0, #0
 80024a0:	f000 8098 	beq.w	80025d4 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_RCC_ClockConfig+0x14c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	428b      	cmp	r3, r1
 80024ae:	d208      	bcs.n	80024c2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b0:	b2cb      	uxtb	r3, r1
 80024b2:	4a4c      	ldr	r2, [pc, #304]	; (80025e4 <HAL_RCC_ClockConfig+0x14c>)
 80024b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	6813      	ldr	r3, [r2, #0]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	428b      	cmp	r3, r1
 80024be:	f040 808b 	bne.w	80025d8 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	f013 0f02 	tst.w	r3, #2
 80024c8:	d017      	beq.n	80024fa <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ca:	f013 0f04 	tst.w	r3, #4
 80024ce:	d004      	beq.n	80024da <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 80024d2:	6893      	ldr	r3, [r2, #8]
 80024d4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	f013 0f08 	tst.w	r3, #8
 80024e0:	d004      	beq.n	80024ec <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e2:	4a41      	ldr	r2, [pc, #260]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 80024e4:	6893      	ldr	r3, [r2, #8]
 80024e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ea:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4a3e      	ldr	r2, [pc, #248]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 80024ee:	6893      	ldr	r3, [r2, #8]
 80024f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f4:	68a1      	ldr	r1, [r4, #8]
 80024f6:	430b      	orrs	r3, r1
 80024f8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	f013 0f01 	tst.w	r3, #1
 8002500:	d032      	beq.n	8002568 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	6863      	ldr	r3, [r4, #4]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d021      	beq.n	800254c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002508:	1e9a      	subs	r2, r3, #2
 800250a:	2a01      	cmp	r2, #1
 800250c:	d925      	bls.n	800255a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250e:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 8002510:	6812      	ldr	r2, [r2, #0]
 8002512:	f012 0f02 	tst.w	r2, #2
 8002516:	d061      	beq.n	80025dc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002518:	4933      	ldr	r1, [pc, #204]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 800251a:	688a      	ldr	r2, [r1, #8]
 800251c:	f022 0203 	bic.w	r2, r2, #3
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002524:	f7ff f98a 	bl	800183c <HAL_GetTick>
 8002528:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	6862      	ldr	r2, [r4, #4]
 8002534:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002538:	d016      	beq.n	8002568 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f7ff f97f 	bl	800183c <HAL_GetTick>
 800253e:	1b80      	subs	r0, r0, r6
 8002540:	f241 3388 	movw	r3, #5000	; 0x1388
 8002544:	4298      	cmp	r0, r3
 8002546:	d9f0      	bls.n	800252a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002548:	2003      	movs	r0, #3
 800254a:	e042      	b.n	80025d2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002554:	d1e0      	bne.n	8002518 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002556:	2001      	movs	r0, #1
 8002558:	e03b      	b.n	80025d2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4a23      	ldr	r2, [pc, #140]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002562:	d1d9      	bne.n	8002518 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
 8002566:	e034      	b.n	80025d2 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_ClockConfig+0x14c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	42ab      	cmp	r3, r5
 8002572:	d907      	bls.n	8002584 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002574:	b2ea      	uxtb	r2, r5
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_ClockConfig+0x14c>)
 8002578:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 030f 	and.w	r3, r3, #15
 8002580:	42ab      	cmp	r3, r5
 8002582:	d12d      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f013 0f04 	tst.w	r3, #4
 800258a:	d006      	beq.n	800259a <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258c:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 800258e:	6893      	ldr	r3, [r2, #8]
 8002590:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002594:	68e1      	ldr	r1, [r4, #12]
 8002596:	430b      	orrs	r3, r1
 8002598:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	f013 0f08 	tst.w	r3, #8
 80025a0:	d007      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a2:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 80025a4:	6893      	ldr	r3, [r2, #8]
 80025a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025aa:	6921      	ldr	r1, [r4, #16]
 80025ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025b0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025b2:	f7ff ff07 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_ClockConfig+0x150>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_RCC_ClockConfig+0x154>)
 80025c0:	5cd3      	ldrb	r3, [r2, r3]
 80025c2:	40d8      	lsrs	r0, r3
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_ClockConfig+0x158>)
 80025c6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x15c>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	f7ff f8ee 	bl	80017ac <HAL_InitTick>
  return HAL_OK;
 80025d0:	2000      	movs	r0, #0
}
 80025d2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e7fc      	b.n	80025d2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80025d8:	2001      	movs	r0, #1
 80025da:	e7fa      	b.n	80025d2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 80025dc:	2001      	movs	r0, #1
 80025de:	e7f8      	b.n	80025d2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 80025e0:	2001      	movs	r0, #1
 80025e2:	e7f6      	b.n	80025d2 <HAL_RCC_ClockConfig+0x13a>
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08003640 	.word	0x08003640
 80025f0:	20000484 	.word	0x20000484
 80025f4:	20000480 	.word	0x20000480

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80025f8:	4b01      	ldr	r3, [pc, #4]	; (8002600 <HAL_RCC_GetHCLKFreq+0x8>)
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000484 	.word	0x20000484

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002606:	f7ff fff7 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <HAL_RCC_GetPCLK1Freq+0x18>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002612:	4a03      	ldr	r2, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
}
 8002616:	40d8      	lsrs	r0, r3
 8002618:	bd08      	pop	{r3, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	08003650 	.word	0x08003650

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002626:	f7ff ffe7 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
 800262a:	4b04      	ldr	r3, [pc, #16]	; (800263c <HAL_RCC_GetPCLK2Freq+0x18>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002632:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
}
 8002636:	40d8      	lsrs	r0, r3
 8002638:	bd08      	pop	{r3, pc}
 800263a:	bf00      	nop
 800263c:	40023800 	.word	0x40023800
 8002640:	08003650 	.word	0x08003650

08002644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002644:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002646:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002648:	6a04      	ldr	r4, [r0, #32]
 800264a:	f024 0401 	bic.w	r4, r4, #1
 800264e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002650:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002652:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002656:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800265a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800265e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002660:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002662:	6203      	str	r3, [r0, #32]
}
 8002664:	bc10      	pop	{r4}
 8002666:	4770      	bx	lr

08002668 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002668:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266a:	6a04      	ldr	r4, [r0, #32]
 800266c:	f024 0410 	bic.w	r4, r4, #16
 8002670:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002672:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002674:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002676:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800267a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800267e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002682:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002686:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002688:	6203      	str	r3, [r0, #32]
}
 800268a:	bc10      	pop	{r4}
 800268c:	4770      	bx	lr

0800268e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800268e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002694:	430b      	orrs	r3, r1
 8002696:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800269a:	6083      	str	r3, [r0, #8]
}
 800269c:	4770      	bx	lr

0800269e <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a4:	6802      	ldr	r2, [r0, #0]
 80026a6:	6893      	ldr	r3, [r2, #8]
 80026a8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ac:	2b06      	cmp	r3, #6
 80026ae:	d003      	beq.n	80026b8 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 80026b0:	6813      	ldr	r3, [r2, #0]
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80026be:	2000      	movs	r0, #0
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 80026c8:	6803      	ldr	r3, [r0, #0]
 80026ca:	6a19      	ldr	r1, [r3, #32]
 80026cc:	f241 1211 	movw	r2, #4369	; 0x1111
 80026d0:	4211      	tst	r1, r2
 80026d2:	d108      	bne.n	80026e6 <HAL_TIM_Base_Stop+0x24>
 80026d4:	6a19      	ldr	r1, [r3, #32]
 80026d6:	f240 4244 	movw	r2, #1092	; 0x444
 80026da:	4211      	tst	r1, r2
 80026dc:	d103      	bne.n	80026e6 <HAL_TIM_Base_Stop+0x24>
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f022 0201 	bic.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80026ec:	2000      	movs	r0, #0
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIM_OnePulse_MspInit>:
}
 80026f0:	4770      	bx	lr
	...

080026f4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80026f4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <TIM_Base_SetConfig+0xc4>)
 80026f8:	4290      	cmp	r0, r2
 80026fa:	d012      	beq.n	8002722 <TIM_Base_SetConfig+0x2e>
 80026fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002700:	d00f      	beq.n	8002722 <TIM_Base_SetConfig+0x2e>
 8002702:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002706:	4290      	cmp	r0, r2
 8002708:	d00b      	beq.n	8002722 <TIM_Base_SetConfig+0x2e>
 800270a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800270e:	4290      	cmp	r0, r2
 8002710:	d007      	beq.n	8002722 <TIM_Base_SetConfig+0x2e>
 8002712:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002716:	4290      	cmp	r0, r2
 8002718:	d003      	beq.n	8002722 <TIM_Base_SetConfig+0x2e>
 800271a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800271e:	4290      	cmp	r0, r2
 8002720:	d103      	bne.n	800272a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002726:	684a      	ldr	r2, [r1, #4]
 8002728:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272a:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <TIM_Base_SetConfig+0xc4>)
 800272c:	4290      	cmp	r0, r2
 800272e:	d02a      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 8002730:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002734:	d027      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 8002736:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800273a:	4290      	cmp	r0, r2
 800273c:	d023      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 800273e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002742:	4290      	cmp	r0, r2
 8002744:	d01f      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 8002746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800274a:	4290      	cmp	r0, r2
 800274c:	d01b      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 800274e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002752:	4290      	cmp	r0, r2
 8002754:	d017      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 8002756:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800275a:	4290      	cmp	r0, r2
 800275c:	d013      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 800275e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002762:	4290      	cmp	r0, r2
 8002764:	d00f      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 8002766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800276a:	4290      	cmp	r0, r2
 800276c:	d00b      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 800276e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002772:	4290      	cmp	r0, r2
 8002774:	d007      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 8002776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800277a:	4290      	cmp	r0, r2
 800277c:	d003      	beq.n	8002786 <TIM_Base_SetConfig+0x92>
 800277e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002782:	4290      	cmp	r0, r2
 8002784:	d103      	bne.n	800278e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278a:	68ca      	ldr	r2, [r1, #12]
 800278c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800278e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002792:	694a      	ldr	r2, [r1, #20]
 8002794:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002796:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002798:	688b      	ldr	r3, [r1, #8]
 800279a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800279c:	680b      	ldr	r3, [r1, #0]
 800279e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <TIM_Base_SetConfig+0xc4>)
 80027a2:	4298      	cmp	r0, r3
 80027a4:	d003      	beq.n	80027ae <TIM_Base_SetConfig+0xba>
 80027a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027aa:	4298      	cmp	r0, r3
 80027ac:	d101      	bne.n	80027b2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80027ae:	690b      	ldr	r3, [r1, #16]
 80027b0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80027b2:	2301      	movs	r3, #1
 80027b4:	6143      	str	r3, [r0, #20]
}
 80027b6:	4770      	bx	lr
 80027b8:	40010000 	.word	0x40010000

080027bc <HAL_TIM_Base_Init>:
{
 80027bc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80027be:	4604      	mov	r4, r0
 80027c0:	b1a0      	cbz	r0, 80027ec <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027c6:	b163      	cbz	r3, 80027e2 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	2302      	movs	r3, #2
 80027ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ce:	4621      	mov	r1, r4
 80027d0:	f851 0b04 	ldr.w	r0, [r1], #4
 80027d4:	f7ff ff8e 	bl	80026f4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80027d8:	2301      	movs	r3, #1
 80027da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80027de:	2000      	movs	r0, #0
}
 80027e0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80027e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80027e6:	f7fe fe33 	bl	8001450 <HAL_TIM_Base_MspInit>
 80027ea:	e7ed      	b.n	80027c8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
 80027ee:	e7f7      	b.n	80027e0 <HAL_TIM_Base_Init+0x24>

080027f0 <HAL_TIM_OnePulse_Init>:
{
 80027f0:	b538      	push	{r3, r4, r5, lr}
 80027f2:	460d      	mov	r5, r1
  if (htim == NULL)
 80027f4:	4604      	mov	r4, r0
 80027f6:	b1e8      	cbz	r0, 8002834 <HAL_TIM_OnePulse_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 80027f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027fc:	b1ab      	cbz	r3, 800282a <HAL_TIM_OnePulse_Init+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 80027fe:	2302      	movs	r3, #2
 8002800:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002804:	4621      	mov	r1, r4
 8002806:	f851 0b04 	ldr.w	r0, [r1], #4
 800280a:	f7ff ff73 	bl	80026f4 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	6813      	ldr	r3, [r2, #0]
 8002812:	f023 0308 	bic.w	r3, r3, #8
 8002816:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8002818:	6823      	ldr	r3, [r4, #0]
 800281a:	6819      	ldr	r1, [r3, #0]
 800281c:	430d      	orrs	r5, r1
 800281e:	601d      	str	r5, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002820:	2301      	movs	r3, #1
 8002822:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002826:	2000      	movs	r0, #0
}
 8002828:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800282a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 800282e:	f7ff ff5f 	bl	80026f0 <HAL_TIM_OnePulse_MspInit>
 8002832:	e7e4      	b.n	80027fe <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 8002834:	2001      	movs	r0, #1
 8002836:	e7f7      	b.n	8002828 <HAL_TIM_OnePulse_Init+0x38>

08002838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002838:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800283a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800283c:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002840:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002844:	430a      	orrs	r2, r1
 8002846:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800284a:	6082      	str	r2, [r0, #8]
}
 800284c:	bc10      	pop	{r4}
 800284e:	4770      	bx	lr

08002850 <HAL_TIM_ConfigClockSource>:
{
 8002850:	b510      	push	{r4, lr}
 8002852:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002854:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002858:	2b01      	cmp	r3, #1
 800285a:	d064      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0xd6>
 800285c:	2301      	movs	r3, #1
 800285e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002868:	6802      	ldr	r2, [r0, #0]
 800286a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800286c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002870:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002874:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002876:	680b      	ldr	r3, [r1, #0]
 8002878:	2b60      	cmp	r3, #96	; 0x60
 800287a:	d040      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0xae>
 800287c:	d822      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x74>
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d047      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xc2>
 8002882:	d90b      	bls.n	800289c <HAL_TIM_ConfigClockSource+0x4c>
 8002884:	2b50      	cmp	r3, #80	; 0x50
 8002886:	d10e      	bne.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002888:	68ca      	ldr	r2, [r1, #12]
 800288a:	6849      	ldr	r1, [r1, #4]
 800288c:	6800      	ldr	r0, [r0, #0]
 800288e:	f7ff fed9 	bl	8002644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002892:	2150      	movs	r1, #80	; 0x50
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	f7ff fefa 	bl	800268e <TIM_ITRx_SetConfig>
      break;
 800289a:	e004      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800289c:	2b20      	cmp	r3, #32
 800289e:	d00c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x6a>
 80028a0:	d908      	bls.n	80028b4 <HAL_TIM_ConfigClockSource+0x64>
 80028a2:	2b30      	cmp	r3, #48	; 0x30
 80028a4:	d009      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80028b2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80028b4:	b10b      	cbz	r3, 80028ba <HAL_TIM_ConfigClockSource+0x6a>
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d1f5      	bne.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ba:	4619      	mov	r1, r3
 80028bc:	6820      	ldr	r0, [r4, #0]
 80028be:	f7ff fee6 	bl	800268e <TIM_ITRx_SetConfig>
      break;
 80028c2:	e7f0      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80028c4:	2b70      	cmp	r3, #112	; 0x70
 80028c6:	d00e      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x96>
 80028c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028cc:	d1eb      	bne.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 80028ce:	68cb      	ldr	r3, [r1, #12]
 80028d0:	684a      	ldr	r2, [r1, #4]
 80028d2:	6889      	ldr	r1, [r1, #8]
 80028d4:	6800      	ldr	r0, [r0, #0]
 80028d6:	f7ff ffaf 	bl	8002838 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028da:	6822      	ldr	r2, [r4, #0]
 80028dc:	6893      	ldr	r3, [r2, #8]
 80028de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e2:	6093      	str	r3, [r2, #8]
      break;
 80028e4:	e7df      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 80028e6:	68cb      	ldr	r3, [r1, #12]
 80028e8:	684a      	ldr	r2, [r1, #4]
 80028ea:	6889      	ldr	r1, [r1, #8]
 80028ec:	6800      	ldr	r0, [r0, #0]
 80028ee:	f7ff ffa3 	bl	8002838 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80028fa:	6093      	str	r3, [r2, #8]
      break;
 80028fc:	e7d3      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028fe:	68ca      	ldr	r2, [r1, #12]
 8002900:	6849      	ldr	r1, [r1, #4]
 8002902:	6800      	ldr	r0, [r0, #0]
 8002904:	f7ff feb0 	bl	8002668 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002908:	2160      	movs	r1, #96	; 0x60
 800290a:	6820      	ldr	r0, [r4, #0]
 800290c:	f7ff febf 	bl	800268e <TIM_ITRx_SetConfig>
      break;
 8002910:	e7c9      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002912:	68ca      	ldr	r2, [r1, #12]
 8002914:	6849      	ldr	r1, [r1, #4]
 8002916:	6800      	ldr	r0, [r0, #0]
 8002918:	f7ff fe94 	bl	8002644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	6820      	ldr	r0, [r4, #0]
 8002920:	f7ff feb5 	bl	800268e <TIM_ITRx_SetConfig>
      break;
 8002924:	e7bf      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8002926:	2002      	movs	r0, #2
 8002928:	e7c3      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x62>

0800292a <TIM_SlaveTimer_SetConfig>:
{
 800292a:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 800292c:	6804      	ldr	r4, [r0, #0]
 800292e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002930:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002934:	684b      	ldr	r3, [r1, #4]
 8002936:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002938:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800293c:	680a      	ldr	r2, [r1, #0]
 800293e:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8002940:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8002942:	684b      	ldr	r3, [r1, #4]
 8002944:	2b60      	cmp	r3, #96	; 0x60
 8002946:	d02c      	beq.n	80029a2 <TIM_SlaveTimer_SetConfig+0x78>
 8002948:	d80c      	bhi.n	8002964 <TIM_SlaveTimer_SetConfig+0x3a>
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d014      	beq.n	8002978 <TIM_SlaveTimer_SetConfig+0x4e>
 800294e:	2b50      	cmp	r3, #80	; 0x50
 8002950:	d106      	bne.n	8002960 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	690a      	ldr	r2, [r1, #16]
 8002954:	6889      	ldr	r1, [r1, #8]
 8002956:	6800      	ldr	r0, [r0, #0]
 8002958:	f7ff fe74 	bl	8002644 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 800295c:	2000      	movs	r0, #0
      break;
 800295e:	e028      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 8002960:	2000      	movs	r0, #0
 8002962:	e026      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x88>
 8002964:	2b70      	cmp	r3, #112	; 0x70
 8002966:	d123      	bne.n	80029b0 <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 8002968:	690b      	ldr	r3, [r1, #16]
 800296a:	688a      	ldr	r2, [r1, #8]
 800296c:	68c9      	ldr	r1, [r1, #12]
 800296e:	6800      	ldr	r0, [r0, #0]
 8002970:	f7ff ff62 	bl	8002838 <TIM_ETR_SetConfig>
  return HAL_OK;
 8002974:	2000      	movs	r0, #0
      break;
 8002976:	e01c      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x88>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002978:	680b      	ldr	r3, [r1, #0]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d01a      	beq.n	80029b4 <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 800297e:	6803      	ldr	r3, [r0, #0]
 8002980:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002982:	6a1a      	ldr	r2, [r3, #32]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800298a:	6802      	ldr	r2, [r0, #0]
 800298c:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800298e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002992:	6909      	ldr	r1, [r1, #16]
 8002994:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8002998:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 800299a:	6803      	ldr	r3, [r0, #0]
 800299c:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 800299e:	2000      	movs	r0, #0
      break;
 80029a0:	e007      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x88>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	690a      	ldr	r2, [r1, #16]
 80029a4:	6889      	ldr	r1, [r1, #8]
 80029a6:	6800      	ldr	r0, [r0, #0]
 80029a8:	f7ff fe5e 	bl	8002668 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 80029ac:	2000      	movs	r0, #0
      break;
 80029ae:	e000      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 80029b0:	2000      	movs	r0, #0
}
 80029b2:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 80029b4:	2001      	movs	r0, #1
 80029b6:	e7fc      	b.n	80029b2 <TIM_SlaveTimer_SetConfig+0x88>

080029b8 <HAL_TIM_SlaveConfigSynchro>:
{
 80029b8:	b510      	push	{r4, lr}
 80029ba:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80029bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d020      	beq.n	8002a06 <HAL_TIM_SlaveConfigSynchro+0x4e>
 80029c4:	2301      	movs	r3, #1
 80029c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80029ca:	2302      	movs	r3, #2
 80029cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80029d0:	f7ff ffab 	bl	800292a <TIM_SlaveTimer_SetConfig>
 80029d4:	b980      	cbnz	r0, 80029f8 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80029d6:	6822      	ldr	r2, [r4, #0]
 80029d8:	68d3      	ldr	r3, [r2, #12]
 80029da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029de:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80029e0:	6822      	ldr	r2, [r4, #0]
 80029e2:	68d3      	ldr	r3, [r2, #12]
 80029e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029e8:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	2301      	movs	r3, #1
 80029ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80029f0:	2300      	movs	r3, #0
 80029f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80029f6:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 80029f8:	2001      	movs	r0, #1
 80029fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80029fe:	2300      	movs	r3, #0
 8002a00:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8002a04:	e7f7      	b.n	80029f6 <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8002a06:	2002      	movs	r0, #2
 8002a08:	e7f5      	b.n	80029f6 <HAL_TIM_SlaveConfigSynchro+0x3e>
	...

08002a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a0c:	b410      	push	{r4}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d03b      	beq.n	8002a8e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002a16:	2301      	movs	r3, #1
 8002a18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a22:	6803      	ldr	r3, [r0, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a26:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a28:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a2c:	680a      	ldr	r2, [r1, #0]
 8002a2e:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d01a      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d017      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002a42:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00f      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002a52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002a5a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002a62:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002a6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d104      	bne.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a72:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a76:	684a      	ldr	r2, [r1, #4]
 8002a78:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a7a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a82:	2300      	movs	r3, #0
 8002a84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002a88:	4618      	mov	r0, r3
}
 8002a8a:	bc10      	pop	{r4}
 8002a8c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a8e:	2002      	movs	r0, #2
 8002a90:	e7fb      	b.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000

08002a98 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a98:	6802      	ldr	r2, [r0, #0]
 8002a9a:	68d3      	ldr	r3, [r2, #12]
 8002a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aa0:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	6802      	ldr	r2, [r0, #0]
 8002aa4:	6953      	ldr	r3, [r2, #20]
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aac:	2320      	movs	r3, #32
 8002aae:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8002ab2:	4770      	bx	lr

08002ab4 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ab4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b21      	cmp	r3, #33	; 0x21
 8002abc:	d001      	beq.n	8002ac2 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002abe:	2002      	movs	r0, #2
  }
}
 8002ac0:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ac2:	6883      	ldr	r3, [r0, #8]
 8002ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac8:	d017      	beq.n	8002afa <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002aca:	6a03      	ldr	r3, [r0, #32]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	6202      	str	r2, [r0, #32]
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	6803      	ldr	r3, [r0, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002ad6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002ae0:	b94b      	cbnz	r3, 8002af6 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ae2:	6802      	ldr	r2, [r0, #0]
 8002ae4:	68d3      	ldr	r3, [r2, #12]
 8002ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aea:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002aec:	6802      	ldr	r2, [r0, #0]
 8002aee:	68d3      	ldr	r3, [r2, #12]
 8002af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af4:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002af6:	2000      	movs	r0, #0
 8002af8:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002afa:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	6802      	ldr	r2, [r0, #0]
 8002b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b04:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002b06:	6903      	ldr	r3, [r0, #16]
 8002b08:	b91b      	cbnz	r3, 8002b12 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8002b0a:	6a03      	ldr	r3, [r0, #32]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	6203      	str	r3, [r0, #32]
 8002b10:	e7e1      	b.n	8002ad6 <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8002b12:	6a03      	ldr	r3, [r0, #32]
 8002b14:	3301      	adds	r3, #1
 8002b16:	6203      	str	r3, [r0, #32]
 8002b18:	e7dd      	b.n	8002ad6 <UART_Transmit_IT+0x22>
	...

08002b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b1c:	b538      	push	{r3, r4, r5, lr}
 8002b1e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b20:	6802      	ldr	r2, [r0, #0]
 8002b22:	6913      	ldr	r3, [r2, #16]
 8002b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b28:	68c1      	ldr	r1, [r0, #12]
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b2e:	6883      	ldr	r3, [r0, #8]
 8002b30:	6902      	ldr	r2, [r0, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	6942      	ldr	r2, [r0, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	69c2      	ldr	r2, [r0, #28]
 8002b3a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002b3c:	6801      	ldr	r1, [r0, #0]
 8002b3e:	68cb      	ldr	r3, [r1, #12]
 8002b40:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b44:	f023 030c 	bic.w	r3, r3, #12
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b4c:	6802      	ldr	r2, [r0, #0]
 8002b4e:	6953      	ldr	r3, [r2, #20]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b54:	6981      	ldr	r1, [r0, #24]
 8002b56:	430b      	orrs	r3, r1
 8002b58:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b5a:	69c3      	ldr	r3, [r0, #28]
 8002b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b60:	d035      	beq.n	8002bce <UART_SetConfig+0xb2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b62:	6803      	ldr	r3, [r0, #0]
 8002b64:	4a60      	ldr	r2, [pc, #384]	; (8002ce8 <UART_SetConfig+0x1cc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	f000 8091 	beq.w	8002c8e <UART_SetConfig+0x172>
 8002b6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b70:	4293      	cmp	r3, r2
 8002b72:	f000 808c 	beq.w	8002c8e <UART_SetConfig+0x172>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b76:	f7ff fd45 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	1803      	adds	r3, r0, r0
 8002b7e:	4149      	adcs	r1, r1
 8002b80:	181b      	adds	r3, r3, r0
 8002b82:	f141 0100 	adc.w	r1, r1, #0
 8002b86:	00c9      	lsls	r1, r1, #3
 8002b88:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	1818      	adds	r0, r3, r0
 8002b90:	6863      	ldr	r3, [r4, #4]
 8002b92:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002b96:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002b9a:	f141 0100 	adc.w	r1, r1, #0
 8002b9e:	f7fd fc19 	bl	80003d4 <__aeabi_uldivmod>
 8002ba2:	4d52      	ldr	r5, [pc, #328]	; (8002cec <UART_SetConfig+0x1d0>)
 8002ba4:	fba5 3200 	umull	r3, r2, r5, r0
 8002ba8:	0951      	lsrs	r1, r2, #5
 8002baa:	2364      	movs	r3, #100	; 0x64
 8002bac:	fb03 0311 	mls	r3, r3, r1, r0
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	3332      	adds	r3, #50	; 0x32
 8002bb4:	fba5 2303 	umull	r2, r3, r5, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bbe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	6821      	ldr	r1, [r4, #0]
 8002bc8:	4413      	add	r3, r2
 8002bca:	608b      	str	r3, [r1, #8]
    }
  }
}
 8002bcc:	e08a      	b.n	8002ce4 <UART_SetConfig+0x1c8>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bce:	6803      	ldr	r3, [r0, #0]
 8002bd0:	4a45      	ldr	r2, [pc, #276]	; (8002ce8 <UART_SetConfig+0x1cc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d02f      	beq.n	8002c36 <UART_SetConfig+0x11a>
 8002bd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02b      	beq.n	8002c36 <UART_SetConfig+0x11a>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bde:	f7ff fd11 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002be2:	2300      	movs	r3, #0
 8002be4:	1802      	adds	r2, r0, r0
 8002be6:	eb43 0103 	adc.w	r1, r3, r3
 8002bea:	1812      	adds	r2, r2, r0
 8002bec:	f141 0100 	adc.w	r1, r1, #0
 8002bf0:	00c9      	lsls	r1, r1, #3
 8002bf2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bf6:	00d2      	lsls	r2, r2, #3
 8002bf8:	1810      	adds	r0, r2, r0
 8002bfa:	f141 0100 	adc.w	r1, r1, #0
 8002bfe:	6862      	ldr	r2, [r4, #4]
 8002c00:	1892      	adds	r2, r2, r2
 8002c02:	415b      	adcs	r3, r3
 8002c04:	f7fd fbe6 	bl	80003d4 <__aeabi_uldivmod>
 8002c08:	4d38      	ldr	r5, [pc, #224]	; (8002cec <UART_SetConfig+0x1d0>)
 8002c0a:	fba5 3200 	umull	r3, r2, r5, r0
 8002c0e:	0951      	lsrs	r1, r2, #5
 8002c10:	2364      	movs	r3, #100	; 0x64
 8002c12:	fb03 0311 	mls	r3, r3, r1, r0
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	fba5 2303 	umull	r2, r3, r5, r3
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	005a      	lsls	r2, r3, #1
 8002c22:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002c26:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	6821      	ldr	r1, [r4, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]
 8002c34:	e056      	b.n	8002ce4 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c36:	f7ff fcf5 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	1802      	adds	r2, r0, r0
 8002c3e:	eb43 0103 	adc.w	r1, r3, r3
 8002c42:	1812      	adds	r2, r2, r0
 8002c44:	f141 0100 	adc.w	r1, r1, #0
 8002c48:	00c9      	lsls	r1, r1, #3
 8002c4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c4e:	00d2      	lsls	r2, r2, #3
 8002c50:	1810      	adds	r0, r2, r0
 8002c52:	f141 0100 	adc.w	r1, r1, #0
 8002c56:	6862      	ldr	r2, [r4, #4]
 8002c58:	1892      	adds	r2, r2, r2
 8002c5a:	415b      	adcs	r3, r3
 8002c5c:	f7fd fbba 	bl	80003d4 <__aeabi_uldivmod>
 8002c60:	4d22      	ldr	r5, [pc, #136]	; (8002cec <UART_SetConfig+0x1d0>)
 8002c62:	fba5 3200 	umull	r3, r2, r5, r0
 8002c66:	0951      	lsrs	r1, r2, #5
 8002c68:	2364      	movs	r3, #100	; 0x64
 8002c6a:	fb03 0311 	mls	r3, r3, r1, r0
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	3332      	adds	r3, #50	; 0x32
 8002c72:	fba5 2303 	umull	r2, r3, r5, r3
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	005a      	lsls	r2, r3, #1
 8002c7a:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002c7e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	6821      	ldr	r1, [r4, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]
 8002c8c:	e02a      	b.n	8002ce4 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c8e:	f7ff fcc9 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c92:	2100      	movs	r1, #0
 8002c94:	1803      	adds	r3, r0, r0
 8002c96:	4149      	adcs	r1, r1
 8002c98:	181b      	adds	r3, r3, r0
 8002c9a:	f141 0100 	adc.w	r1, r1, #0
 8002c9e:	00c9      	lsls	r1, r1, #3
 8002ca0:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	1818      	adds	r0, r3, r0
 8002ca8:	6863      	ldr	r3, [r4, #4]
 8002caa:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002cae:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002cb2:	f141 0100 	adc.w	r1, r1, #0
 8002cb6:	f7fd fb8d 	bl	80003d4 <__aeabi_uldivmod>
 8002cba:	4d0c      	ldr	r5, [pc, #48]	; (8002cec <UART_SetConfig+0x1d0>)
 8002cbc:	fba5 3200 	umull	r3, r2, r5, r0
 8002cc0:	0951      	lsrs	r1, r2, #5
 8002cc2:	2364      	movs	r3, #100	; 0x64
 8002cc4:	fb03 0311 	mls	r3, r3, r1, r0
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	3332      	adds	r3, #50	; 0x32
 8002ccc:	fba5 2303 	umull	r2, r3, r5, r3
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cd6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	6821      	ldr	r1, [r4, #0]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
}
 8002ce4:	bd38      	pop	{r3, r4, r5, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40011000 	.word	0x40011000
 8002cec:	51eb851f 	.word	0x51eb851f

08002cf0 <UART_WaitOnFlagUntilTimeout>:
{
 8002cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cf4:	4605      	mov	r5, r0
 8002cf6:	460f      	mov	r7, r1
 8002cf8:	4616      	mov	r6, r2
 8002cfa:	4699      	mov	r9, r3
 8002cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d00:	682c      	ldr	r4, [r5, #0]
 8002d02:	6824      	ldr	r4, [r4, #0]
 8002d04:	ea37 0304 	bics.w	r3, r7, r4
 8002d08:	bf0c      	ite	eq
 8002d0a:	f04f 0c01 	moveq.w	ip, #1
 8002d0e:	f04f 0c00 	movne.w	ip, #0
 8002d12:	45b4      	cmp	ip, r6
 8002d14:	d11f      	bne.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002d1a:	d0f1      	beq.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d1c:	f1b8 0f00 	cmp.w	r8, #0
 8002d20:	d005      	beq.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x3e>
 8002d22:	f7fe fd8b 	bl	800183c <HAL_GetTick>
 8002d26:	eba0 0009 	sub.w	r0, r0, r9
 8002d2a:	4540      	cmp	r0, r8
 8002d2c:	d9e8      	bls.n	8002d00 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d2e:	682a      	ldr	r2, [r5, #0]
 8002d30:	68d3      	ldr	r3, [r2, #12]
 8002d32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d36:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d38:	682a      	ldr	r2, [r5, #0]
 8002d3a:	6953      	ldr	r3, [r2, #20]
 8002d3c:	f023 0301 	bic.w	r3, r3, #1
 8002d40:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002d42:	2320      	movs	r3, #32
 8002d44:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d48:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002d52:	2003      	movs	r0, #3
 8002d54:	e000      	b.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8002d56:	2000      	movs	r0, #0
}
 8002d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002d5c <HAL_UART_Init>:
{
 8002d5c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d5e:	4604      	mov	r4, r0
 8002d60:	b348      	cbz	r0, 8002db6 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002d66:	b30b      	cbz	r3, 8002dac <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	2324      	movs	r3, #36	; 0x24
 8002d6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	68d3      	ldr	r3, [r2, #12]
 8002d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d76:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7ff fecf 	bl	8002b1c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	6913      	ldr	r3, [r2, #16]
 8002d82:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002d86:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d88:	6822      	ldr	r2, [r4, #0]
 8002d8a:	6953      	ldr	r3, [r2, #20]
 8002d8c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002d90:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	68d3      	ldr	r3, [r2, #12]
 8002d96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d9a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002da0:	2320      	movs	r3, #32
 8002da2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002da6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002daa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002dac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002db0:	f7fe fbb4 	bl	800151c <HAL_UART_MspInit>
 8002db4:	e7d8      	b.n	8002d68 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002db6:	2001      	movs	r0, #1
 8002db8:	e7f7      	b.n	8002daa <HAL_UART_Init+0x4e>

08002dba <HAL_UART_Transmit>:
{
 8002dba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	460d      	mov	r5, r1
 8002dc4:	4690      	mov	r8, r2
 8002dc6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d153      	bne.n	8002e7a <HAL_UART_Transmit+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d055      	beq.n	8002e82 <HAL_UART_Transmit+0xc8>
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d055      	beq.n	8002e86 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002dda:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d053      	beq.n	8002e8a <HAL_UART_Transmit+0xd0>
 8002de2:	2301      	movs	r3, #1
 8002de4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de8:	f04f 0900 	mov.w	r9, #0
 8002dec:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df0:	2321      	movs	r3, #33	; 0x21
 8002df2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002df6:	f7fe fd21 	bl	800183c <HAL_GetTick>
 8002dfa:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002dfc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e00:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002e04:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8002e08:	e010      	b.n	8002e2c <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e0a:	9600      	str	r6, [sp, #0]
 8002e0c:	463b      	mov	r3, r7
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7ff ff6c 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 8002e18:	2800      	cmp	r0, #0
 8002e1a:	d138      	bne.n	8002e8e <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e1c:	882b      	ldrh	r3, [r5, #0]
 8002e1e:	6822      	ldr	r2, [r4, #0]
 8002e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e24:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e26:	6923      	ldr	r3, [r4, #16]
 8002e28:	b9cb      	cbnz	r3, 8002e5e <HAL_UART_Transmit+0xa4>
          pData += 2U;
 8002e2a:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8002e2c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b1bb      	cbz	r3, 8002e62 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 8002e32:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002e34:	b292      	uxth	r2, r2
 8002e36:	3a01      	subs	r2, #1
 8002e38:	b292      	uxth	r2, r2
 8002e3a:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e3c:	68a3      	ldr	r3, [r4, #8]
 8002e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e42:	d0e2      	beq.n	8002e0a <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e44:	9600      	str	r6, [sp, #0]
 8002e46:	463b      	mov	r3, r7
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff ff4f 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 8002e52:	b9f0      	cbnz	r0, 8002e92 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e54:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	e7e6      	b.n	8002e2c <HAL_UART_Transmit+0x72>
          pData += 1U;
 8002e5e:	3501      	adds	r5, #1
 8002e60:	e7e4      	b.n	8002e2c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e62:	9600      	str	r6, [sp, #0]
 8002e64:	463b      	mov	r3, r7
 8002e66:	2200      	movs	r2, #0
 8002e68:	2140      	movs	r1, #64	; 0x40
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7ff ff40 	bl	8002cf0 <UART_WaitOnFlagUntilTimeout>
 8002e70:	b988      	cbnz	r0, 8002e96 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8002e72:	2320      	movs	r3, #32
 8002e74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002e78:	e000      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8002e7a:	2002      	movs	r0, #2
}
 8002e7c:	b003      	add	sp, #12
 8002e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8002e82:	2001      	movs	r0, #1
 8002e84:	e7fa      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
 8002e86:	2001      	movs	r0, #1
 8002e88:	e7f8      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 8002e8a:	2002      	movs	r0, #2
 8002e8c:	e7f6      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8002e8e:	2003      	movs	r0, #3
 8002e90:	e7f4      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8002e92:	2003      	movs	r0, #3
 8002e94:	e7f2      	b.n	8002e7c <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 8002e96:	2003      	movs	r0, #3
 8002e98:	e7f0      	b.n	8002e7c <HAL_UART_Transmit+0xc2>

08002e9a <HAL_UART_TxCpltCallback>:
}
 8002e9a:	4770      	bx	lr

08002e9c <UART_EndTransmit_IT>:
{
 8002e9c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e9e:	6801      	ldr	r1, [r0, #0]
 8002ea0:	68ca      	ldr	r2, [r1, #12]
 8002ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea6:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002eae:	f7ff fff4 	bl	8002e9a <HAL_UART_TxCpltCallback>
}
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	bd08      	pop	{r3, pc}

08002eb6 <HAL_UART_RxCpltCallback>:
}
 8002eb6:	4770      	bx	lr

08002eb8 <UART_Receive_IT>:
{
 8002eb8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002eba:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b22      	cmp	r3, #34	; 0x22
 8002ec2:	d146      	bne.n	8002f52 <UART_Receive_IT+0x9a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ec4:	6883      	ldr	r3, [r0, #8]
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d00f      	beq.n	8002eec <UART_Receive_IT+0x34>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ecc:	6903      	ldr	r3, [r0, #16]
 8002ece:	bb0b      	cbnz	r3, 8002f14 <UART_Receive_IT+0x5c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ed6:	1c59      	adds	r1, r3, #1
 8002ed8:	6281      	str	r1, [r0, #40]	; 0x28
 8002eda:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002edc:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002ee6:	b1f3      	cbz	r3, 8002f26 <UART_Receive_IT+0x6e>
    return HAL_OK;
 8002ee8:	2000      	movs	r0, #0
}
 8002eea:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002eec:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002eee:	6903      	ldr	r3, [r0, #16]
 8002ef0:	b943      	cbnz	r3, 8002f04 <UART_Receive_IT+0x4c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ef2:	6803      	ldr	r3, [r0, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efa:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002efc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002efe:	3302      	adds	r3, #2
 8002f00:	6283      	str	r3, [r0, #40]	; 0x28
 8002f02:	e7eb      	b.n	8002edc <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f04:	6803      	ldr	r3, [r0, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002f0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f0e:	3301      	adds	r3, #1
 8002f10:	6283      	str	r3, [r0, #40]	; 0x28
 8002f12:	e7e3      	b.n	8002edc <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f14:	6803      	ldr	r3, [r0, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f1a:	1c51      	adds	r1, r2, #1
 8002f1c:	6281      	str	r1, [r0, #40]	; 0x28
 8002f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f22:	7013      	strb	r3, [r2, #0]
 8002f24:	e7da      	b.n	8002edc <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f26:	6802      	ldr	r2, [r0, #0]
 8002f28:	68d3      	ldr	r3, [r2, #12]
 8002f2a:	f023 0320 	bic.w	r3, r3, #32
 8002f2e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f30:	6802      	ldr	r2, [r0, #0]
 8002f32:	68d3      	ldr	r3, [r2, #12]
 8002f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f38:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f3a:	6802      	ldr	r2, [r0, #0]
 8002f3c:	6953      	ldr	r3, [r2, #20]
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002f44:	2320      	movs	r3, #32
 8002f46:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002f4a:	f7ff ffb4 	bl	8002eb6 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002f4e:	2000      	movs	r0, #0
 8002f50:	e7cb      	b.n	8002eea <UART_Receive_IT+0x32>
    return HAL_BUSY;
 8002f52:	2002      	movs	r0, #2
 8002f54:	e7c9      	b.n	8002eea <UART_Receive_IT+0x32>

08002f56 <HAL_UART_ErrorCallback>:
}
 8002f56:	4770      	bx	lr

08002f58 <HAL_UART_IRQHandler>:
{
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f5c:	6802      	ldr	r2, [r0, #0]
 8002f5e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f60:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f62:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002f64:	f013 000f 	ands.w	r0, r3, #15
 8002f68:	d105      	bne.n	8002f76 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f6a:	f013 0f20 	tst.w	r3, #32
 8002f6e:	d002      	beq.n	8002f76 <HAL_UART_IRQHandler+0x1e>
 8002f70:	f011 0f20 	tst.w	r1, #32
 8002f74:	d113      	bne.n	8002f9e <HAL_UART_IRQHandler+0x46>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f76:	b128      	cbz	r0, 8002f84 <HAL_UART_IRQHandler+0x2c>
 8002f78:	f012 0201 	ands.w	r2, r2, #1
 8002f7c:	d113      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x4e>
 8002f7e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002f82:	d110      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f88:	d002      	beq.n	8002f90 <HAL_UART_IRQHandler+0x38>
 8002f8a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f8e:	d16c      	bne.n	800306a <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f94:	d002      	beq.n	8002f9c <HAL_UART_IRQHandler+0x44>
 8002f96:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002f9a:	d16a      	bne.n	8003072 <HAL_UART_IRQHandler+0x11a>
}
 8002f9c:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7ff ff8a 	bl	8002eb8 <UART_Receive_IT>
      return;
 8002fa4:	e7fa      	b.n	8002f9c <HAL_UART_IRQHandler+0x44>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fa6:	f013 0f01 	tst.w	r3, #1
 8002faa:	d006      	beq.n	8002fba <HAL_UART_IRQHandler+0x62>
 8002fac:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002fb0:	d003      	beq.n	8002fba <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002fb4:	f040 0001 	orr.w	r0, r0, #1
 8002fb8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fba:	f013 0f04 	tst.w	r3, #4
 8002fbe:	d004      	beq.n	8002fca <HAL_UART_IRQHandler+0x72>
 8002fc0:	b11a      	cbz	r2, 8002fca <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002fc4:	f040 0002 	orr.w	r0, r0, #2
 8002fc8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fca:	f013 0f02 	tst.w	r3, #2
 8002fce:	d004      	beq.n	8002fda <HAL_UART_IRQHandler+0x82>
 8002fd0:	b11a      	cbz	r2, 8002fda <HAL_UART_IRQHandler+0x82>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002fd4:	f040 0004 	orr.w	r0, r0, #4
 8002fd8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fda:	f013 0f08 	tst.w	r3, #8
 8002fde:	d007      	beq.n	8002ff0 <HAL_UART_IRQHandler+0x98>
 8002fe0:	f011 0f20 	tst.w	r1, #32
 8002fe4:	d100      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x90>
 8002fe6:	b11a      	cbz	r2, 8002ff0 <HAL_UART_IRQHandler+0x98>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fe8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002fea:	f042 0208 	orr.w	r2, r2, #8
 8002fee:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ff0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ff2:	2a00      	cmp	r2, #0
 8002ff4:	d0d2      	beq.n	8002f9c <HAL_UART_IRQHandler+0x44>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ff6:	f013 0f20 	tst.w	r3, #32
 8002ffa:	d002      	beq.n	8003002 <HAL_UART_IRQHandler+0xaa>
 8002ffc:	f011 0f20 	tst.w	r1, #32
 8003000:	d121      	bne.n	8003046 <HAL_UART_IRQHandler+0xee>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800300a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800300c:	f012 0f08 	tst.w	r2, #8
 8003010:	d100      	bne.n	8003014 <HAL_UART_IRQHandler+0xbc>
 8003012:	b323      	cbz	r3, 800305e <HAL_UART_IRQHandler+0x106>
        UART_EndRxTransfer(huart);
 8003014:	4620      	mov	r0, r4
 8003016:	f7ff fd3f 	bl	8002a98 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003022:	d018      	beq.n	8003056 <HAL_UART_IRQHandler+0xfe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800302c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800302e:	b173      	cbz	r3, 800304e <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003030:	4a12      	ldr	r2, [pc, #72]	; (800307c <HAL_UART_IRQHandler+0x124>)
 8003032:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003034:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003036:	f7fe fdd9 	bl	8001bec <HAL_DMA_Abort_IT>
 800303a:	2800      	cmp	r0, #0
 800303c:	d0ae      	beq.n	8002f9c <HAL_UART_IRQHandler+0x44>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800303e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003040:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003042:	4798      	blx	r3
 8003044:	e7aa      	b.n	8002f9c <HAL_UART_IRQHandler+0x44>
        UART_Receive_IT(huart);
 8003046:	4620      	mov	r0, r4
 8003048:	f7ff ff36 	bl	8002eb8 <UART_Receive_IT>
 800304c:	e7d9      	b.n	8003002 <HAL_UART_IRQHandler+0xaa>
            HAL_UART_ErrorCallback(huart);
 800304e:	4620      	mov	r0, r4
 8003050:	f7ff ff81 	bl	8002f56 <HAL_UART_ErrorCallback>
 8003054:	e7a2      	b.n	8002f9c <HAL_UART_IRQHandler+0x44>
          HAL_UART_ErrorCallback(huart);
 8003056:	4620      	mov	r0, r4
 8003058:	f7ff ff7d 	bl	8002f56 <HAL_UART_ErrorCallback>
 800305c:	e79e      	b.n	8002f9c <HAL_UART_IRQHandler+0x44>
        HAL_UART_ErrorCallback(huart);
 800305e:	4620      	mov	r0, r4
 8003060:	f7ff ff79 	bl	8002f56 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003064:	2300      	movs	r3, #0
 8003066:	63e3      	str	r3, [r4, #60]	; 0x3c
    return;
 8003068:	e798      	b.n	8002f9c <HAL_UART_IRQHandler+0x44>
    UART_Transmit_IT(huart);
 800306a:	4620      	mov	r0, r4
 800306c:	f7ff fd22 	bl	8002ab4 <UART_Transmit_IT>
    return;
 8003070:	e794      	b.n	8002f9c <HAL_UART_IRQHandler+0x44>
    UART_EndTransmit_IT(huart);
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff ff12 	bl	8002e9c <UART_EndTransmit_IT>
    return;
 8003078:	e790      	b.n	8002f9c <HAL_UART_IRQHandler+0x44>
 800307a:	bf00      	nop
 800307c:	08003081 	.word	0x08003081

08003080 <UART_DMAAbortOnError>:
{
 8003080:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003082:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003084:	2300      	movs	r3, #0
 8003086:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003088:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800308a:	f7ff ff64 	bl	8002f56 <HAL_UART_ErrorCallback>
}
 800308e:	bd08      	pop	{r3, pc}

08003090 <SystemInit>:

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003090:	4b02      	ldr	r3, [pc, #8]	; (800309c <SystemInit+0xc>)
 8003092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003096:	609a      	str	r2, [r3, #8]
#endif
}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <DisableAllInterrupts>:
(
  void
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
 80030a0:	4b02      	ldr	r3, [pc, #8]	; (80030ac <DisableAllInterrupts+0xc>)
 80030a2:	681b      	ldr	r3, [r3, #0]

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE FUNC(void, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_disableIRQ( void )
{
  OSEE_CLI();
 80030a4:	b672      	cpsid	i
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
 80030a6:	2201      	movs	r2, #1
 80030a8:	779a      	strb	r2, [r3, #30]
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_DisableAllInterrupts);
  return;
}
 80030aa:	4770      	bx	lr
 80030ac:	0800358c 	.word	0x0800358c

080030b0 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
 80030b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030b4:	4607      	mov	r7, r0
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
 80030b6:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <StartOS+0x70>)
 80030b8:	681e      	ldr	r6, [r3, #0]
 * an IRQ and from within a task. */
OSEE_STATIC_INLINE FUNC(OsEE_reg, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_begin_nested_primitive( void )
{
  OsEE_reg flags = 0U;
  OSEE_GET_IPL(flags);
 80030ba:	f3ef 8511 	mrs	r5, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 80030be:	092b      	lsrs	r3, r5, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 80030c0:	3b01      	subs	r3, #1
 80030c2:	2b07      	cmp	r3, #7
 80030c4:	d902      	bls.n	80030cc <StartOS+0x1c>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	f383 8811 	msr	BASEPRI, r3
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
 80030cc:	7c33      	ldrb	r3, [r6, #16]
 80030ce:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 80030d2:	b143      	cbz	r3, 80030e6 <StartOS+0x36>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
 80030d4:	2401      	movs	r4, #1
      osEE_hal_enableIRQ();
    }
#endif /* OSEE_STARTOS_RETURN || OSEE_API_DYNAMIC */
  }

  if (ev != E_OK) {
 80030d6:	b11c      	cbz	r4, 80030e0 <StartOS+0x30>
OSEE_STATIC_INLINE FUNC(void, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_end_nested_primitive(
  VAR(OsEE_reg, AUTOMATIC)	flag
)
{
  OSEE_SET_IPL(flag << OSEE_CORTEX_M_PRIO_SH_BITS);
 80030d8:	f025 050f 	bic.w	r5, r5, #15
 80030dc:	f385 8811 	msr	BASEPRI, r5
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
 80030e0:	4620      	mov	r0, r4
 80030e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif	/* OS_EE_ARCH_CORTEX_M_M4F_FPU */
#endif	/* 0 - [GS]: T.B.C. */
#if	(defined(OSEE_HAS_ORTI)) || (defined(OSEE_HAS_STACK_MONITORING))
    osEE_cortex_m_stack_init();
#endif	/* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */
    osEE_cortex_m_system_init();
 80030e6:	f000 f91c 	bl	8003322 <osEE_cortex_m_system_init>
      p_idle_tdb = p_cdb->p_idle_task;
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <StartOS+0x70>)
 80030ec:	f8d3 8008 	ldr.w	r8, [r3, #8]
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
 80030f0:	2301      	movs	r3, #1
 80030f2:	7433      	strb	r3, [r6, #16]
    p_ccb->app_mode                 = real_mode;
 80030f4:	7477      	strb	r7, [r6, #17]
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
 80030f6:	7c33      	ldrb	r3, [r6, #16]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d00d      	beq.n	800311a <StartOS+0x6a>
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
 80030fe:	7c33      	ldrb	r3, [r6, #16]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d1e7      	bne.n	80030d6 <StartOS+0x26>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
 8003106:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800310a:	460a      	mov	r2, r1
 800310c:	4640      	mov	r0, r8
 800310e:	f7fd f909 	bl	8000324 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_task_end(p_idle_tdb);
 8003112:	4640      	mov	r0, r8
 8003114:	f000 f87e 	bl	8003214 <osEE_task_end>
 8003118:	e7dd      	b.n	80030d6 <StartOS+0x26>
      p_ccb->os_status = OSEE_KERNEL_STARTED;
 800311a:	2302      	movs	r3, #2
 800311c:	7433      	strb	r3, [r6, #16]
 800311e:	e7ee      	b.n	80030fe <StartOS+0x4e>
 8003120:	0800358c 	.word	0x0800358c

08003124 <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
 8003124:	b508      	push	{r3, lr}
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <TerminateTask+0x3c>)
 8003128:	681b      	ldr	r3, [r3, #0]
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
 800312a:	681a      	ldr	r2, [r3, #0]
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
 800312c:	7f19      	ldrb	r1, [r3, #28]
 800312e:	b121      	cbz	r1, 800313a <TerminateTask+0x16>
        p_ccb->s_isr_all_cnt = 0U;
 8003130:	2100      	movs	r1, #0
 8003132:	7719      	strb	r1, [r3, #28]
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
 8003134:	6959      	ldr	r1, [r3, #20]
  OSEE_SET_ISR(flags);
 8003136:	f381 8810 	msr	PRIMASK, r1
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
 800313a:	7f99      	ldrb	r1, [r3, #30]
 800313c:	b111      	cbz	r1, 8003144 <TerminateTask+0x20>
        p_ccb->d_isr_all_cnt = 0U;
 800313e:	2100      	movs	r1, #0
 8003140:	7799      	strb	r1, [r3, #30]
  OSEE_SEI();
 8003142:	b662      	cpsie	i
  OSEE_GET_IPL(flags);
 8003144:	f3ef 8311 	mrs	r3, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 8003148:	091b      	lsrs	r3, r3, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 800314a:	3b01      	subs	r3, #1
 800314c:	2b07      	cmp	r3, #7
 800314e:	d902      	bls.n	8003156 <TerminateTask+0x32>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	f383 8811 	msr	BASEPRI, r3
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
 8003156:	4903      	ldr	r1, [pc, #12]	; (8003164 <TerminateTask+0x40>)
 8003158:	6850      	ldr	r0, [r2, #4]
 800315a:	f7fd f8f1 	bl	8000340 <osEE_hal_terminate_ctx>
 800315e:	bf00      	nop
 8003160:	0800358c 	.word	0x0800358c
 8003164:	08003331 	.word	0x08003331

08003168 <osEE_scheduler_task_not_terminated>:
static FUNC(void, OS_CODE)
  osEE_scheduler_task_not_terminated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_term
)
{
 8003168:	b508      	push	{r3, lr}
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <osEE_scheduler_task_not_terminated+0x3c>)
 800316c:	681b      	ldr	r3, [r3, #0]

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
 800316e:	2200      	movs	r2, #0
 8003170:	775a      	strb	r2, [r3, #29]
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
 8003172:	7f1a      	ldrb	r2, [r3, #28]
 8003174:	b122      	cbz	r2, 8003180 <osEE_scheduler_task_not_terminated+0x18>
    p_ccb->s_isr_all_cnt = 0U;
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
 800317a:	695a      	ldr	r2, [r3, #20]
  OSEE_SET_ISR(flags);
 800317c:	f382 8810 	msr	PRIMASK, r2
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
 8003180:	7f9a      	ldrb	r2, [r3, #30]
 8003182:	b112      	cbz	r2, 800318a <osEE_scheduler_task_not_terminated+0x22>
    p_ccb->d_isr_all_cnt = 0U;
 8003184:	2200      	movs	r2, #0
 8003186:	779a      	strb	r2, [r3, #30]
  OSEE_SEI();
 8003188:	b662      	cpsie	i
  OSEE_GET_IPL(flags);
 800318a:	f3ef 8311 	mrs	r3, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 800318e:	091b      	lsrs	r3, r3, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 8003190:	3b01      	subs	r3, #1
 8003192:	2b07      	cmp	r3, #7
 8003194:	d902      	bls.n	800319c <osEE_scheduler_task_not_terminated+0x34>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	4902      	ldr	r1, [pc, #8]	; (80031a8 <osEE_scheduler_task_not_terminated+0x40>)
 800319e:	6840      	ldr	r0, [r0, #4]
 80031a0:	f7fd f8ce 	bl	8000340 <osEE_hal_terminate_ctx>
 80031a4:	0800358c 	.word	0x0800358c
 80031a8:	08003331 	.word	0x08003331

080031ac <osEE_scheduler_task_wrapper_restore>:
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
 80031ac:	6883      	ldr	r3, [r0, #8]
 80031ae:	2204      	movs	r2, #4
 80031b0:	709a      	strb	r2, [r3, #2]
    }
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
 80031b2:	4770      	bx	lr

080031b4 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
 80031b4:	b538      	push	{r3, r4, r5, lr}
 80031b6:	4604      	mov	r4, r0
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
 80031b8:	6883      	ldr	r3, [r0, #8]
 80031ba:	785d      	ldrb	r5, [r3, #1]
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
 80031bc:	f7ff fff6 	bl	80031ac <osEE_scheduler_task_wrapper_restore>

  if (task_priority < OSEE_ISR_ALL_PRIO) {
 80031c0:	2dff      	cmp	r5, #255	; 0xff
 80031c2:	d006      	beq.n	80031d2 <osEE_scheduler_task_wrapper_run+0x1e>
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
 80031c4:	f015 0f80 	tst.w	r5, #128	; 0x80
 80031c8:	d108      	bne.n	80031dc <osEE_scheduler_task_wrapper_run+0x28>
    OSEE_SET_IPL(OSEE_ISR_UNMASKED << OSEE_CORTEX_M_PRIO_SH_BITS);
 80031ca:	2300      	movs	r3, #0
 80031cc:	f383 8811 	msr	BASEPRI, r3
  OSEE_SEI();
 80031d0:	b662      	cpsie	i
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
 80031d2:	6963      	ldr	r3, [r4, #20]
 80031d4:	4798      	blx	r3

  /* Unexpected TASK Function return */
  osEE_scheduler_task_not_terminated(p_tdb_to);
 80031d6:	4620      	mov	r0, r4
 80031d8:	f7ff ffc6 	bl	8003168 <osEE_scheduler_task_not_terminated>
    OSEE_SET_IPL(
 80031dc:	f1c5 050f 	rsb	r5, r5, #15
 80031e0:	012d      	lsls	r5, r5, #4
 80031e2:	b2ed      	uxtb	r5, r5
 80031e4:	f385 8811 	msr	BASEPRI, r5
 80031e8:	e7f2      	b.n	80031d0 <osEE_scheduler_task_wrapper_run+0x1c>
	...

080031ec <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
 80031ec:	b508      	push	{r3, lr}
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <osEE_idle_hook_wrapper+0x24>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	7c1b      	ldrb	r3, [r3, #16]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d105      	bne.n	8003206 <osEE_idle_hook_wrapper+0x1a>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
 80031fa:	4b05      	ldr	r3, [pc, #20]	; (8003210 <osEE_idle_hook_wrapper+0x24>)
 80031fc:	685b      	ldr	r3, [r3, #4]
    if (p_idle_hook != NULL) {
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f5      	beq.n	80031ee <osEE_idle_hook_wrapper+0x2>
      p_idle_hook();
 8003202:	4798      	blx	r3
 8003204:	e7f3      	b.n	80031ee <osEE_idle_hook_wrapper+0x2>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
 8003206:	4b02      	ldr	r3, [pc, #8]	; (8003210 <osEE_idle_hook_wrapper+0x24>)
 8003208:	6898      	ldr	r0, [r3, #8]
 800320a:	f000 f87c 	bl	8003306 <osEE_idle_task_terminate>
}
 800320e:	bd08      	pop	{r3, pc}
 8003210:	0800358c 	.word	0x0800358c

08003214 <osEE_task_end>:
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
 8003214:	6882      	ldr	r2, [r0, #8]

  p_tcb->current_prio = p_tdb->ready_prio;
 8003216:	7e03      	ldrb	r3, [r0, #24]
 8003218:	7053      	strb	r3, [r2, #1]

  --p_tcb->current_num_of_act;
 800321a:	7813      	ldrb	r3, [r2, #0]
 800321c:	3b01      	subs	r3, #1
 800321e:	b2db      	uxtb	r3, r3
 8003220:	7013      	strb	r3, [r2, #0]

  if (p_tcb->current_num_of_act == 0U) {
 8003222:	b90b      	cbnz	r3, 8003228 <osEE_task_end+0x14>
    p_tcb->status = OSEE_TASK_SUSPENDED;
 8003224:	7093      	strb	r3, [r2, #2]
 8003226:	4770      	bx	lr
  } else {
    p_tcb->status = OSEE_TASK_READY;
 8003228:	2301      	movs	r3, #1
 800322a:	7093      	strb	r3, [r2, #2]
  }
}
 800322c:	4770      	bx	lr
	...

08003230 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
 8003230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <osEE_scheduler_task_terminated+0x74>)
 8003236:	681c      	ldr	r4, [r3, #0]
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
 8003238:	6825      	ldr	r5, [r4, #0]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
 800323a:	68ae      	ldr	r6, [r5, #8]

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
 800323c:	600d      	str	r5, [r1, #0]
    /* We are having a termination so the hook flag has to be
       unset */
    p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
 800323e:	78b3      	ldrb	r3, [r6, #2]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d015      	beq.n	8003270 <osEE_scheduler_task_terminated+0x40>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
 8003244:	68e1      	ldr	r1, [r4, #12]

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
 8003246:	680b      	ldr	r3, [r1, #0]
 8003248:	60e3      	str	r3, [r4, #12]
#endif /* OSEE_HAS_POSTTASKHOOK */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
 800324a:	7e2b      	ldrb	r3, [r5, #24]
 800324c:	7073      	strb	r3, [r6, #1]
      p_tcb_term->status = OSEE_TASK_READY;
 800324e:	2301      	movs	r3, #1
 8003250:	70b3      	strb	r3, [r6, #2]
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
 8003252:	1d23      	adds	r3, r4, #4
 8003254:	462a      	mov	r2, r5
 8003256:	461d      	mov	r5, r3
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f8ef 	bl	800343c <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
 800325e:	4629      	mov	r1, r5
 8003260:	4810      	ldr	r0, [pc, #64]	; (80032a4 <osEE_scheduler_task_terminated+0x74>)
 8003262:	f000 f8a3 	bl	80033ac <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
 8003266:	b1c0      	cbz	r0, 800329a <osEE_scheduler_task_terminated+0x6a>
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
          p_ccb->p_curr           = p_tdb_to;
        } else {
          p_tdb_to = p_ccb->p_curr;
 8003268:	6827      	ldr	r7, [r4, #0]
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
 800326a:	4638      	mov	r0, r7
 800326c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
 8003270:	1d21      	adds	r1, r4, #4
 8003272:	480c      	ldr	r0, [pc, #48]	; (80032a4 <osEE_scheduler_task_terminated+0x74>)
 8003274:	f000 f8e8 	bl	8003448 <osEE_scheduler_core_pop_running>
 8003278:	4680      	mov	r8, r0
      p_tdb_to = p_ccb->p_curr;
 800327a:	6827      	ldr	r7, [r4, #0]
      if (p_tdb_term != p_tdb_to) {
 800327c:	42bd      	cmp	r5, r7
 800327e:	d008      	beq.n	8003292 <osEE_scheduler_task_terminated+0x62>
        osEE_task_end(p_tdb_term);
 8003280:	4628      	mov	r0, r5
 8003282:	f7ff ffc7 	bl	8003214 <osEE_task_end>
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
 8003286:	68a3      	ldr	r3, [r4, #8]
 8003288:	f8c8 3000 	str.w	r3, [r8]
  (*pp_first)       = p_to_free;
 800328c:	f8c4 8008 	str.w	r8, [r4, #8]
}
 8003290:	e7eb      	b.n	800326a <osEE_scheduler_task_terminated+0x3a>
        --p_tcb_term->current_num_of_act;
 8003292:	7833      	ldrb	r3, [r6, #0]
 8003294:	3b01      	subs	r3, #1
 8003296:	7033      	strb	r3, [r6, #0]
 8003298:	e7f5      	b.n	8003286 <osEE_scheduler_task_terminated+0x56>
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
 800329a:	68e3      	ldr	r3, [r4, #12]
 800329c:	685f      	ldr	r7, [r3, #4]
          p_ccb->p_curr           = p_tdb_to;
 800329e:	6027      	str	r7, [r4, #0]
 80032a0:	e7e3      	b.n	800326a <osEE_scheduler_task_terminated+0x3a>
 80032a2:	bf00      	nop
 80032a4:	0800358c 	.word	0x0800358c

080032a8 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
 80032a8:	b510      	push	{r4, lr}
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 80032aa:	4806      	ldr	r0, [pc, #24]	; (80032c4 <osEE_scheduler_task_preemption_point+0x1c>)
 80032ac:	6804      	ldr	r4, [r0, #0]
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
 80032ae:	1d21      	adds	r1, r4, #4
 80032b0:	f000 f87c 	bl	80033ac <osEE_scheduler_core_rq_preempt_stk>

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
 80032b4:	b120      	cbz	r0, 80032c0 <osEE_scheduler_task_preemption_point+0x18>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
 80032b6:	6821      	ldr	r1, [r4, #0]
 80032b8:	f000 f806 	bl	80032c8 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
 80032bc:	2001      	movs	r0, #1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
 80032be:	bd10      	pop	{r4, pc}
    is_preemption = OSEE_FALSE;
 80032c0:	2000      	movs	r0, #0
 80032c2:	e7fc      	b.n	80032be <osEE_scheduler_task_preemption_point+0x16>
 80032c4:	0800358c 	.word	0x0800358c

080032c8 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
 80032c8:	b508      	push	{r3, lr}
 80032ca:	4603      	mov	r3, r0
 80032cc:	4608      	mov	r0, r1
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
 80032ce:	688a      	ldr	r2, [r1, #8]

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
 80032d0:	7892      	ldrb	r2, [r2, #2]
 80032d2:	2a02      	cmp	r2, #2
 80032d4:	d004      	beq.n	80032e0 <osEE_change_context_from_running+0x18>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	6849      	ldr	r1, [r1, #4]
 80032da:	f7fd f823 	bl	8000324 <osEE_hal_save_ctx_and_ready2stacked>
      p_from->hdb.p_scb);
  }
}
 80032de:	bd08      	pop	{r3, pc}
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	6849      	ldr	r1, [r1, #4]
 80032e4:	f7fc fffa 	bl	80002dc <osEE_hal_save_ctx_and_restore_ctx>
 80032e8:	e7f9      	b.n	80032de <osEE_change_context_from_running+0x16>

080032ea <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
 80032ea:	b508      	push	{r3, lr}
 80032ec:	4608      	mov	r0, r1
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
 80032ee:	688b      	ldr	r3, [r1, #8]

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
 80032f0:	789b      	ldrb	r3, [r3, #2]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d003      	beq.n	80032fe <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
 80032f6:	6849      	ldr	r1, [r1, #4]
 80032f8:	f7fd f80e 	bl	8000318 <osEE_hal_ready2stacked>
  }
  /* STD Implementation do not use p_from here, but I cannot assure
     that any implementation won't do that */
  (void)p_from;
}
 80032fc:	bd08      	pop	{r3, pc}
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
 80032fe:	6849      	ldr	r1, [r1, #4]
 8003300:	f7fc fffa 	bl	80002f8 <osEE_hal_restore_ctx>
 8003304:	e7fa      	b.n	80032fc <osEE_change_context_from_task_end+0x12>

08003306 <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
 8003306:	b510      	push	{r4, lr}
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
 8003308:	6803      	ldr	r3, [r0, #0]
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
 800330a:	6841      	ldr	r1, [r0, #4]
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
 800330c:	681c      	ldr	r4, [r3, #0]
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
 800330e:	680b      	ldr	r3, [r1, #0]

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
 8003310:	461a      	mov	r2, r3
 8003312:	681b      	ldr	r3, [r3, #0]
  } while ((p_tos != NULL) && (p_tos != p_bos));
 8003314:	b10b      	cbz	r3, 800331a <osEE_idle_task_terminate+0x14>
 8003316:	429c      	cmp	r4, r3
 8003318:	d1fa      	bne.n	8003310 <osEE_idle_task_terminate+0xa>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
 800331a:	600a      	str	r2, [r1, #0]

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
 800331c:	f7fc ffec 	bl	80002f8 <osEE_hal_restore_ctx>
}
 8003320:	bd10      	pop	{r4, pc}

08003322 <osEE_cortex_m_system_init>:

/*
 * System Initialization.
 */
FUNC(void, OS_CODE) osEE_cortex_m_system_init(void)
{
 8003322:	b508      	push	{r3, lr}
	/* 
	 * Set the priority of PendSV to the minimum one
	 * PendSV is the software interrupt used for context switch
	 */
	osEE_set_switch_context_pri();
 8003324:	f7fd f820 	bl	8000368 <osEE_set_switch_context_pri>
#endif	/* OSEE_CORTEX_M_SYSTICK_ISR */

	/* 
	 * MCU System Initialization.
	 */
	osEE_cortex_m_mcu_system_init();
 8003328:	f000 f8a0 	bl	800346c <osEE_cortex_m_mcu_system_init>

}	/* osEE_cortex_m_system_init() */
 800332c:	bd08      	pop	{r3, pc}
	...

08003330 <osEE_cortex_m_scheduler_task_end>:
 *  \date   2016
 */
#include "ee_internal.h"

FUNC(void, OS_CODE) osEE_cortex_m_scheduler_task_end(void)
{
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	b082      	sub	sp, #8

  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb = p_cdb->p_ccb;
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <osEE_cortex_m_scheduler_task_end+0x58>)
 8003336:	681c      	ldr	r4, [r3, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)   p_term_sn = p_ccb->p_stk_sn;
 8003338:	68e5      	ldr	r5, [r4, #12]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_orig_task_sn = p_term_sn->p_next;
 800333a:	682b      	ldr	r3, [r5, #0]
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_orig_tdb;

  /* p_orig_task_sn == NULL means I preempted idle task */
  if (p_orig_task_sn != NULL) {
 800333c:	b173      	cbz	r3, 800335c <osEE_cortex_m_scheduler_task_end+0x2c>
    p_orig_tdb = p_orig_task_sn->p_tdb;
 800333e:	685e      	ldr	r6, [r3, #4]
    /* Set PendSV */
    osEE_cortex_m_trigger_pend_sv();
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
  }
#else
  if (p_ccb->p_curr->task_type != OSEE_TASK_TYPE_ISR2) {
 8003340:	6822      	ldr	r2, [r4, #0]
 8003342:	7c12      	ldrb	r2, [r2, #16]
 8003344:	2a02      	cmp	r2, #2
 8003346:	d00c      	beq.n	8003362 <osEE_cortex_m_scheduler_task_end+0x32>
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)            p_from;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)       p_to =
      osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
 8003348:	a901      	add	r1, sp, #4
 800334a:	4810      	ldr	r0, [pc, #64]	; (800338c <osEE_cortex_m_scheduler_task_end+0x5c>)
 800334c:	f7ff ff70 	bl	8003230 <osEE_scheduler_task_terminated>
 8003350:	4601      	mov	r1, r0

    osEE_change_context_from_task_end(p_from, p_to);
 8003352:	9801      	ldr	r0, [sp, #4]
 8003354:	f7ff ffc9 	bl	80032ea <osEE_change_context_from_task_end>
       (osEE_cortex_m_isr2_stub) after osEE_activate_isr2(t) call */
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
  }
#endif

}
 8003358:	b002      	add	sp, #8
 800335a:	bd70      	pop	{r4, r5, r6, pc}
    p_orig_tdb = p_cdb->p_idle_task;
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <osEE_cortex_m_scheduler_task_end+0x58>)
 800335e:	6896      	ldr	r6, [r2, #8]
 8003360:	e7ee      	b.n	8003340 <osEE_cortex_m_scheduler_task_end+0x10>
    p_ccb->p_stk_sn = p_orig_task_sn;
 8003362:	60e3      	str	r3, [r4, #12]
    osEE_task_end(p_term_sn->p_tdb);
 8003364:	6868      	ldr	r0, [r5, #4]
 8003366:	f7ff ff55 	bl	8003214 <osEE_task_end>
    p_ccb->p_curr = p_orig_tdb;
 800336a:	6026      	str	r6, [r4, #0]
    p_orig_tdb->p_tcb->status = OSEE_TASK_RUNNING;
 800336c:	68b3      	ldr	r3, [r6, #8]
 800336e:	2204      	movs	r2, #4
 8003370:	709a      	strb	r2, [r3, #2]
  p_to_free->p_next = (*pp_first);
 8003372:	68a3      	ldr	r3, [r4, #8]
 8003374:	602b      	str	r3, [r5, #0]
  (*pp_first)       = p_to_free;
 8003376:	60a5      	str	r5, [r4, #8]
    osEE_cortex_m_trigger_pend_sv();
 8003378:	f7fd f804 	bl	8000384 <osEE_cortex_m_trigger_pend_sv>
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
 800337c:	6871      	ldr	r1, [r6, #4]
 800337e:	4630      	mov	r0, r6
 8003380:	f7fc ffba 	bl	80002f8 <osEE_hal_restore_ctx>
}
 8003384:	e7e8      	b.n	8003358 <osEE_cortex_m_scheduler_task_end+0x28>
 8003386:	bf00      	nop
 8003388:	0800358c 	.word	0x0800358c
 800338c:	080035a8 	.word	0x080035a8

08003390 <osEE_scheduler_stk_next>:
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
 8003390:	684b      	ldr	r3, [r1, #4]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
 8003392:	689a      	ldr	r2, [r3, #8]
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
 8003394:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8003398:	f8c1 c000 	str.w	ip, [r1]
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
 800339c:	60c1      	str	r1, [r0, #12]
  p_ccb->p_curr                 = p_tdb;
 800339e:	6003      	str	r3, [r0, #0]

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
 80033a0:	7e5b      	ldrb	r3, [r3, #25]
    if (p_tcb->current_prio < dispatch_prio) {
 80033a2:	7851      	ldrb	r1, [r2, #1]
 80033a4:	4299      	cmp	r1, r3
 80033a6:	d200      	bcs.n	80033aa <osEE_scheduler_stk_next+0x1a>
      p_tcb->current_prio = dispatch_prio;
 80033a8:	7053      	strb	r3, [r2, #1]
    }
  }
}
 80033aa:	4770      	bx	lr

080033ac <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
 80033ac:	b538      	push	{r3, r4, r5, lr}
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 80033b2:	6800      	ldr	r0, [r0, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
 80033b4:	6809      	ldr	r1, [r1, #0]
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
 80033b6:	68c4      	ldr	r4, [r0, #12]

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
 80033b8:	b194      	cbz	r4, 80033e0 <osEE_scheduler_core_rq_preempt_stk+0x34>
    p_ret_tdb = p_ret_sn->p_tdb;
 80033ba:	6864      	ldr	r4, [r4, #4]
    if (p_rq_sn != NULL) {
 80033bc:	b1b1      	cbz	r1, 80033ec <osEE_scheduler_core_rq_preempt_stk+0x40>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
 80033be:	68a2      	ldr	r2, [r4, #8]
      if (p_ret_tcb->current_prio <
 80033c0:	f892 e001 	ldrb.w	lr, [r2, #1]
        p_rq_sn->p_tdb->p_tcb->current_prio)
 80033c4:	684d      	ldr	r5, [r1, #4]
 80033c6:	68ad      	ldr	r5, [r5, #8]
 80033c8:	f895 c001 	ldrb.w	ip, [r5, #1]
      if (p_ret_tcb->current_prio <
 80033cc:	45e6      	cmp	lr, ip
 80033ce:	d20f      	bcs.n	80033f0 <osEE_scheduler_core_rq_preempt_stk+0x44>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
 80033d0:	2502      	movs	r5, #2
 80033d2:	7095      	strb	r5, [r2, #2]
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
 80033d4:	680a      	ldr	r2, [r1, #0]
 80033d6:	601a      	str	r2, [r3, #0]

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
 80033d8:	f7ff ffda 	bl	8003390 <osEE_scheduler_stk_next>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
 80033dc:	4620      	mov	r0, r4
 80033de:	bd38      	pop	{r3, r4, r5, pc}
  } else if (p_rq_sn != NULL) {
 80033e0:	b141      	cbz	r1, 80033f4 <osEE_scheduler_core_rq_preempt_stk+0x48>
    p_ret_tdb                 = p_cdb->p_idle_task;
 80033e2:	6894      	ldr	r4, [r2, #8]
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
 80033e4:	68a2      	ldr	r2, [r4, #8]
 80033e6:	2502      	movs	r5, #2
 80033e8:	7095      	strb	r5, [r2, #2]
  if (is_rq_preemption) {
 80033ea:	e7f3      	b.n	80033d4 <osEE_scheduler_core_rq_preempt_stk+0x28>
    p_ret_tdb = NULL;
 80033ec:	460c      	mov	r4, r1
 80033ee:	e7f5      	b.n	80033dc <osEE_scheduler_core_rq_preempt_stk+0x30>
 80033f0:	2400      	movs	r4, #0
 80033f2:	e7f3      	b.n	80033dc <osEE_scheduler_core_rq_preempt_stk+0x30>
 80033f4:	460c      	mov	r4, r1
  return p_ret_tdb;
 80033f6:	e7f1      	b.n	80033dc <osEE_scheduler_core_rq_preempt_stk+0x30>

080033f8 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
 80033f8:	b470      	push	{r4, r5, r6}
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
 80033fa:	684b      	ldr	r3, [r1, #4]
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
 80033fc:	689c      	ldr	r4, [r3, #8]
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
 80033fe:	4616      	mov	r6, r2
 8003400:	b122      	cbz	r2, 800340c <osEE_sn_priority_insert+0x14>
 8003402:	f893 c018 	ldrb.w	ip, [r3, #24]
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
 8003406:	6803      	ldr	r3, [r0, #0]
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
 8003408:	2500      	movs	r5, #0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
 800340a:	e007      	b.n	800341c <osEE_sn_priority_insert+0x24>
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
 800340c:	f894 c001 	ldrb.w	ip, [r4, #1]
 8003410:	e7f9      	b.n	8003406 <osEE_sn_priority_insert+0xe>
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (as_ready) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
 8003412:	7862      	ldrb	r2, [r4, #1]
    }

    if (new_task_prio <= prio_to_check)
 8003414:	4562      	cmp	r2, ip
 8003416:	d308      	bcc.n	800342a <osEE_sn_priority_insert+0x32>
    {
      p_prev = p_curr;
 8003418:	461d      	mov	r5, r3
      p_curr = p_curr->p_next;
 800341a:	681b      	ldr	r3, [r3, #0]
  while (p_curr != NULL) {
 800341c:	b12b      	cbz	r3, 800342a <osEE_sn_priority_insert+0x32>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
 800341e:	685a      	ldr	r2, [r3, #4]
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
 8003420:	6894      	ldr	r4, [r2, #8]
    if (as_ready) {
 8003422:	2e00      	cmp	r6, #0
 8003424:	d0f5      	beq.n	8003412 <osEE_sn_priority_insert+0x1a>
      prio_to_check = p_cur_tdb->ready_prio;
 8003426:	7e12      	ldrb	r2, [r2, #24]
 8003428:	e7f4      	b.n	8003414 <osEE_sn_priority_insert+0x1c>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
 800342a:	b125      	cbz	r5, 8003436 <osEE_sn_priority_insert+0x3e>
    p_prev->p_next = p_sn_new;
 800342c:	6029      	str	r1, [r5, #0]
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
 800342e:	2000      	movs	r0, #0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
 8003430:	600b      	str	r3, [r1, #0]

  return head_changed;
}
 8003432:	bc70      	pop	{r4, r5, r6}
 8003434:	4770      	bx	lr
    (*pp_first)   = p_sn_new;
 8003436:	6001      	str	r1, [r0, #0]
    head_changed  = OSEE_TRUE;
 8003438:	2001      	movs	r0, #1
 800343a:	e7f9      	b.n	8003430 <osEE_sn_priority_insert+0x38>

0800343c <osEE_scheduler_rq_insert>:
{
 800343c:	b508      	push	{r3, lr}
  p_sn_new->p_tdb = p_tdb_new;
 800343e:	604a      	str	r2, [r1, #4]
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
 8003440:	2201      	movs	r2, #1
 8003442:	f7ff ffd9 	bl	80033f8 <osEE_sn_priority_insert>
}
 8003446:	bd08      	pop	{r3, pc}

08003448 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
 8003448:	b570      	push	{r4, r5, r6, lr}
 800344a:	4605      	mov	r5, r0
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
 800344c:	6804      	ldr	r4, [r0, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
 800344e:	68e6      	ldr	r6, [r4, #12]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;
 8003450:	6833      	ldr	r3, [r6, #0]

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
 8003452:	60e3      	str	r3, [r4, #12]
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
 8003454:	f7ff ffaa 	bl	80033ac <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
 8003458:	68e3      	ldr	r3, [r4, #12]

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
 800345a:	b108      	cbz	r0, 8003460 <osEE_scheduler_core_pop_running+0x18>
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
 800345c:	4630      	mov	r0, r6
 800345e:	bd70      	pop	{r4, r5, r6, pc}
      if (p_curr_stk_sn != NULL) {
 8003460:	b113      	cbz	r3, 8003468 <osEE_scheduler_core_pop_running+0x20>
        p_tdb_stk = p_curr_stk_sn->p_tdb;
 8003462:	685b      	ldr	r3, [r3, #4]
      p_ccb->p_curr            = p_tdb_stk;
 8003464:	6023      	str	r3, [r4, #0]
  return p_prev_stk_sn;
 8003466:	e7f9      	b.n	800345c <osEE_scheduler_core_pop_running+0x14>
        p_tdb_stk = p_cdb->p_idle_task;
 8003468:	68ab      	ldr	r3, [r5, #8]
 800346a:	e7fb      	b.n	8003464 <osEE_scheduler_core_pop_running+0x1c>

0800346c <osEE_cortex_m_mcu_system_init>:
)
#define	OSEE_CORTEX_M_USART2_NUM		(			\
	OSEE_CORTEX_M_USART2_ISR_ID - OSEE_CORTEX_M_OVERALL_EXC_NUM	\
)
#ifdef	OSEE_CORTEX_M_USART2_ISR_PRI
	OSEE_CORTEX_M_NVIC_SET_PRI(
 800346c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003470:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 8003474:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003478:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 800347c:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 8003480:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8003484:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		OSEE_CORTEX_M_USART2_NUM, OSEE_CORTEX_M_USART2_ISR_PRI
	);
#endif	/* OSEE_CORTEX_M_USART2_ISR_PRI */
	OSEE_CORTEX_M_NVIC_INT_ENABLE(OSEE_CORTEX_M_USART2_NUM);
 8003488:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800348c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003490:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	);
#endif	/* OSEE_CORTEX_M_DMA2D_ISR_PRI */
	OSEE_CORTEX_M_NVIC_INT_ENABLE(OSEE_CORTEX_M_DMA2D_NUM);
#endif	/* OSEE_CORTEX_M_DMA2D_ISR */
#endif	/* OS_EE_ARCH_CORTEX_M_STM32F429xx */
}	/* osEE_cortex_m_mcu_system_init() */
 8003494:	4770      	bx	lr
	...

08003498 <USART2_IRQHandler>:
 * USART2 global interrupt
 */
#if (defined(OSEE_CORTEX_M_USART2_ISR_TID)) && (OSEE_CORTEX_M_USART2_ISR_CAT == 2)
OSEE_CORTEX_M_ISR2_DEFINITION(USART2_IRQHandler, OSEE_CORTEX_M_USART2_ISR_TID)
#elif (defined(OSEE_CORTEX_M_USART2_ISR)) && (OSEE_CORTEX_M_USART2_ISR_CAT == 1)
OSEE_CORTEX_M_ISR1_DEFINITION(USART2_IRQHandler, OSEE_CORTEX_M_USART2_ISR)
 8003498:	b508      	push	{r3, lr}
 800349a:	4802      	ldr	r0, [pc, #8]	; (80034a4 <USART2_IRQHandler+0xc>)
 800349c:	f000 f81a 	bl	80034d4 <osEE_cortex_m_isr1_stub>
 80034a0:	bd08      	pop	{r3, pc}
 80034a2:	bf00      	nop
 80034a4:	08000e29 	.word	0x08000e29

080034a8 <osEE_cortex_m_change_context_from_task_end>:
#include "ee_internal.h"

FUNC(void, OS_CODE) osEE_cortex_m_change_context_from_task_end(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_orig_tdb
)
{
 80034a8:	b510      	push	{r4, lr}
  OSEE_GET_IPL(flags);
 80034aa:	f3ef 8411 	mrs	r4, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 80034ae:	0923      	lsrs	r3, r4, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 80034b0:	3b01      	subs	r3, #1
 80034b2:	2b07      	cmp	r3, #7
 80034b4:	d902      	bls.n	80034bc <osEE_cortex_m_change_context_from_task_end+0x14>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	f383 8811 	msr	BASEPRI, r3
  OSEE_SEI();
 80034bc:	b662      	cpsie	i
  OsEE_reg f = osEE_hal_begin_nested_primitive();

  osEE_hal_enableIRQ();

  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
 80034be:	4804      	ldr	r0, [pc, #16]	; (80034d0 <osEE_cortex_m_change_context_from_task_end+0x28>)
 80034c0:	f7ff fef2 	bl	80032a8 <osEE_scheduler_task_preemption_point>
  OSEE_CLI();
 80034c4:	b672      	cpsid	i
  OSEE_SET_IPL(flag << OSEE_CORTEX_M_PRIO_SH_BITS);
 80034c6:	f024 040f 	bic.w	r4, r4, #15
 80034ca:	f384 8811 	msr	BASEPRI, r4

  osEE_hal_disableIRQ();

  osEE_hal_end_nested_primitive(f);
}
 80034ce:	bd10      	pop	{r4, pc}
 80034d0:	080035a8 	.word	0x080035a8

080034d4 <osEE_cortex_m_isr1_stub>:
 */
FUNC(void, OS_CODE) OSEE_COMPILER_KEEP
osEE_cortex_m_isr1_stub(
  VAR(OsEE_void_cb, AUTOMATIC)	f
)
{
 80034d4:	b508      	push	{r3, lr}

  /* Call The ISR User Handler */
  f();
 80034d6:	4780      	blx	r0

}	/* osEE_cortex_m_isr1_stub() */
 80034d8:	bd08      	pop	{r3, pc}
	...

080034dc <_init>:
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	bf00      	nop
 80034e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e2:	bc08      	pop	{r3}
 80034e4:	469e      	mov	lr, r3
 80034e6:	4770      	bx	lr

080034e8 <_fini>:
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ea:	bf00      	nop
 80034ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ee:	bc08      	pop	{r3}
 80034f0:	469e      	mov	lr, r3
 80034f2:	4770      	bx	lr
