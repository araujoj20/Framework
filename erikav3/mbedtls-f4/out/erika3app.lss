
erika3app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004388  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080048c0  080048c0  000148c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000490  20000000  080048d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020490  2**0
                  CONTENTS
  8 .bss          00010588  20000490  20000490  00020490  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20010a18  20010a18  00020490  2**0
                  ALLOC
 10 .ARM.attributes 0000002a  00000000  00000000  00020490  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001f960  00000000  00000000  000204ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004ba2  00000000  00000000  0003fe1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001308  00000000  00000000  000449c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001888  00000000  00000000  00045cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004743a  00000000  00000000  00047550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002aefa  00000000  00000000  0008e98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001055a4  00000000  00000000  000b9884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000049  00000000  00000000  001bee28  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003368  00000000  00000000  001bee74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00012d19  00000000  00000000  001c21dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000490 	.word	0x20000490
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004530 	.word	0x08004530

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000494 	.word	0x20000494
 80001fc:	08004530 	.word	0x08004530

08000200 <memcpy>:
 8000200:	4684      	mov	ip, r0
 8000202:	ea41 0300 	orr.w	r3, r1, r0
 8000206:	f013 0303 	ands.w	r3, r3, #3
 800020a:	d16d      	bne.n	80002e8 <memcpy+0xe8>
 800020c:	3a40      	subs	r2, #64	; 0x40
 800020e:	d341      	bcc.n	8000294 <memcpy+0x94>
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	3a40      	subs	r2, #64	; 0x40
 8000292:	d2bd      	bcs.n	8000210 <memcpy+0x10>
 8000294:	3230      	adds	r2, #48	; 0x30
 8000296:	d311      	bcc.n	80002bc <memcpy+0xbc>
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	3a10      	subs	r2, #16
 80002ba:	d2ed      	bcs.n	8000298 <memcpy+0x98>
 80002bc:	320c      	adds	r2, #12
 80002be:	d305      	bcc.n	80002cc <memcpy+0xcc>
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	3a04      	subs	r2, #4
 80002ca:	d2f9      	bcs.n	80002c0 <memcpy+0xc0>
 80002cc:	3204      	adds	r2, #4
 80002ce:	d008      	beq.n	80002e2 <memcpy+0xe2>
 80002d0:	07d2      	lsls	r2, r2, #31
 80002d2:	bf1c      	itt	ne
 80002d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002d8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002dc:	d301      	bcc.n	80002e2 <memcpy+0xe2>
 80002de:	880b      	ldrh	r3, [r1, #0]
 80002e0:	8003      	strh	r3, [r0, #0]
 80002e2:	4660      	mov	r0, ip
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	2a08      	cmp	r2, #8
 80002ea:	d313      	bcc.n	8000314 <memcpy+0x114>
 80002ec:	078b      	lsls	r3, r1, #30
 80002ee:	d08d      	beq.n	800020c <memcpy+0xc>
 80002f0:	f010 0303 	ands.w	r3, r0, #3
 80002f4:	d08a      	beq.n	800020c <memcpy+0xc>
 80002f6:	f1c3 0304 	rsb	r3, r3, #4
 80002fa:	1ad2      	subs	r2, r2, r3
 80002fc:	07db      	lsls	r3, r3, #31
 80002fe:	bf1c      	itt	ne
 8000300:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000304:	f800 3b01 	strbne.w	r3, [r0], #1
 8000308:	d380      	bcc.n	800020c <memcpy+0xc>
 800030a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800030e:	f820 3b02 	strh.w	r3, [r0], #2
 8000312:	e77b      	b.n	800020c <memcpy+0xc>
 8000314:	3a04      	subs	r2, #4
 8000316:	d3d9      	bcc.n	80002cc <memcpy+0xcc>
 8000318:	3a01      	subs	r2, #1
 800031a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800031e:	f800 3b01 	strb.w	r3, [r0], #1
 8000322:	d2f9      	bcs.n	8000318 <memcpy+0x118>
 8000324:	780b      	ldrb	r3, [r1, #0]
 8000326:	7003      	strb	r3, [r0, #0]
 8000328:	784b      	ldrb	r3, [r1, #1]
 800032a:	7043      	strb	r3, [r0, #1]
 800032c:	788b      	ldrb	r3, [r1, #2]
 800032e:	7083      	strb	r3, [r0, #2]
 8000330:	4660      	mov	r0, ip
 8000332:	4770      	bx	lr
	...

08000340 <strlen>:
 8000340:	f890 f000 	pld	[r0]
 8000344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000348:	f020 0107 	bic.w	r1, r0, #7
 800034c:	f06f 0c00 	mvn.w	ip, #0
 8000350:	f010 0407 	ands.w	r4, r0, #7
 8000354:	f891 f020 	pld	[r1, #32]
 8000358:	f040 8049 	bne.w	80003ee <strlen+0xae>
 800035c:	f04f 0400 	mov.w	r4, #0
 8000360:	f06f 0007 	mvn.w	r0, #7
 8000364:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000368:	f891 f040 	pld	[r1, #64]	; 0x40
 800036c:	f100 0008 	add.w	r0, r0, #8
 8000370:	fa82 f24c 	uadd8	r2, r2, ip
 8000374:	faa4 f28c 	sel	r2, r4, ip
 8000378:	fa83 f34c 	uadd8	r3, r3, ip
 800037c:	faa2 f38c 	sel	r3, r2, ip
 8000380:	bb4b      	cbnz	r3, 80003d6 <strlen+0x96>
 8000382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000386:	fa82 f24c 	uadd8	r2, r2, ip
 800038a:	f100 0008 	add.w	r0, r0, #8
 800038e:	faa4 f28c 	sel	r2, r4, ip
 8000392:	fa83 f34c 	uadd8	r3, r3, ip
 8000396:	faa2 f38c 	sel	r3, r2, ip
 800039a:	b9e3      	cbnz	r3, 80003d6 <strlen+0x96>
 800039c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80003a0:	fa82 f24c 	uadd8	r2, r2, ip
 80003a4:	f100 0008 	add.w	r0, r0, #8
 80003a8:	faa4 f28c 	sel	r2, r4, ip
 80003ac:	fa83 f34c 	uadd8	r3, r3, ip
 80003b0:	faa2 f38c 	sel	r3, r2, ip
 80003b4:	b97b      	cbnz	r3, 80003d6 <strlen+0x96>
 80003b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80003ba:	f101 0120 	add.w	r1, r1, #32
 80003be:	fa82 f24c 	uadd8	r2, r2, ip
 80003c2:	f100 0008 	add.w	r0, r0, #8
 80003c6:	faa4 f28c 	sel	r2, r4, ip
 80003ca:	fa83 f34c 	uadd8	r3, r3, ip
 80003ce:	faa2 f38c 	sel	r3, r2, ip
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0c6      	beq.n	8000364 <strlen+0x24>
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	bf04      	itt	eq
 80003da:	3004      	addeq	r0, #4
 80003dc:	461a      	moveq	r2, r3
 80003de:	ba12      	rev	r2, r2
 80003e0:	fab2 f282 	clz	r2, r2
 80003e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80003e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80003ec:	4770      	bx	lr
 80003ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80003f2:	f004 0503 	and.w	r5, r4, #3
 80003f6:	f1c4 0000 	rsb	r0, r4, #0
 80003fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80003fe:	f014 0f04 	tst.w	r4, #4
 8000402:	f891 f040 	pld	[r1, #64]	; 0x40
 8000406:	fa0c f505 	lsl.w	r5, ip, r5
 800040a:	ea62 0205 	orn	r2, r2, r5
 800040e:	bf1c      	itt	ne
 8000410:	ea63 0305 	ornne	r3, r3, r5
 8000414:	4662      	movne	r2, ip
 8000416:	f04f 0400 	mov.w	r4, #0
 800041a:	e7a9      	b.n	8000370 <strlen+0x30>

0800041c <__aeabi_uldivmod>:
 800041c:	b953      	cbnz	r3, 8000434 <__aeabi_uldivmod+0x18>
 800041e:	b94a      	cbnz	r2, 8000434 <__aeabi_uldivmod+0x18>
 8000420:	2900      	cmp	r1, #0
 8000422:	bf08      	it	eq
 8000424:	2800      	cmpeq	r0, #0
 8000426:	bf1c      	itt	ne
 8000428:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800042c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000430:	f000 b974 	b.w	800071c <__aeabi_idiv0>
 8000434:	f1ad 0c08 	sub.w	ip, sp, #8
 8000438:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800043c:	f000 f806 	bl	800044c <__udivmoddi4>
 8000440:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000448:	b004      	add	sp, #16
 800044a:	4770      	bx	lr

0800044c <__udivmoddi4>:
 800044c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000450:	9e08      	ldr	r6, [sp, #32]
 8000452:	460d      	mov	r5, r1
 8000454:	4604      	mov	r4, r0
 8000456:	4688      	mov	r8, r1
 8000458:	2b00      	cmp	r3, #0
 800045a:	d14d      	bne.n	80004f8 <__udivmoddi4+0xac>
 800045c:	428a      	cmp	r2, r1
 800045e:	4694      	mov	ip, r2
 8000460:	d968      	bls.n	8000534 <__udivmoddi4+0xe8>
 8000462:	fab2 f282 	clz	r2, r2
 8000466:	b152      	cbz	r2, 800047e <__udivmoddi4+0x32>
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	f1c2 0120 	rsb	r1, r2, #32
 8000470:	fa20 f101 	lsr.w	r1, r0, r1
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	ea41 0803 	orr.w	r8, r1, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fbb8 fef5 	udiv	lr, r8, r5
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fb05 831e 	mls	r3, r5, lr, r8
 8000490:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000494:	fb0e f107 	mul.w	r1, lr, r7
 8000498:	4299      	cmp	r1, r3
 800049a:	d90b      	bls.n	80004b4 <__udivmoddi4+0x68>
 800049c:	eb1c 0303 	adds.w	r3, ip, r3
 80004a0:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80004a4:	f080 811e 	bcs.w	80006e4 <__udivmoddi4+0x298>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	f240 811b 	bls.w	80006e4 <__udivmoddi4+0x298>
 80004ae:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f0f5 	udiv	r0, r3, r5
 80004bc:	fb05 3310 	mls	r3, r5, r0, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb00 f707 	mul.w	r7, r0, r7
 80004c8:	42a7      	cmp	r7, r4
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x96>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004d4:	f080 8108 	bcs.w	80006e8 <__udivmoddi4+0x29c>
 80004d8:	42a7      	cmp	r7, r4
 80004da:	f240 8105 	bls.w	80006e8 <__udivmoddi4+0x29c>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	1be4      	subs	r4, r4, r7
 80004e4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80004e8:	2100      	movs	r1, #0
 80004ea:	b11e      	cbz	r6, 80004f4 <__udivmoddi4+0xa8>
 80004ec:	40d4      	lsrs	r4, r2
 80004ee:	2300      	movs	r3, #0
 80004f0:	e9c6 4300 	strd	r4, r3, [r6]
 80004f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f8:	428b      	cmp	r3, r1
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0xc2>
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	f000 80ee 	beq.w	80006de <__udivmoddi4+0x292>
 8000502:	2100      	movs	r1, #0
 8000504:	e9c6 0500 	strd	r0, r5, [r6]
 8000508:	4608      	mov	r0, r1
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f183 	clz	r1, r3
 8000512:	2900      	cmp	r1, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x160>
 8000516:	42ab      	cmp	r3, r5
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0xd4>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80f9 	bhi.w	8000712 <__udivmoddi4+0x2c6>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb65 0303 	sbc.w	r3, r5, r3
 8000526:	2001      	movs	r0, #1
 8000528:	4698      	mov	r8, r3
 800052a:	2e00      	cmp	r6, #0
 800052c:	d0e2      	beq.n	80004f4 <__udivmoddi4+0xa8>
 800052e:	e9c6 4800 	strd	r4, r8, [r6]
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0xa8>
 8000534:	b902      	cbnz	r2, 8000538 <__udivmoddi4+0xec>
 8000536:	deff      	udf	#255	; 0xff
 8000538:	fab2 f282 	clz	r2, r2
 800053c:	2a00      	cmp	r2, #0
 800053e:	f040 8091 	bne.w	8000664 <__udivmoddi4+0x218>
 8000542:	eba1 050c 	sub.w	r5, r1, ip
 8000546:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	2101      	movs	r1, #1
 8000550:	fbb5 f3f7 	udiv	r3, r5, r7
 8000554:	fb07 5013 	mls	r0, r7, r3, r5
 8000558:	0c25      	lsrs	r5, r4, #16
 800055a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800055e:	fb0e f003 	mul.w	r0, lr, r3
 8000562:	42a8      	cmp	r0, r5
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x12c>
 8000566:	eb1c 0505 	adds.w	r5, ip, r5
 800056a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800056e:	d202      	bcs.n	8000576 <__udivmoddi4+0x12a>
 8000570:	42a8      	cmp	r0, r5
 8000572:	f200 80cb 	bhi.w	800070c <__udivmoddi4+0x2c0>
 8000576:	4643      	mov	r3, r8
 8000578:	1a2d      	subs	r5, r5, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb5 f0f7 	udiv	r0, r5, r7
 8000580:	fb07 5510 	mls	r5, r7, r0, r5
 8000584:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000588:	fb0e fe00 	mul.w	lr, lr, r0
 800058c:	45a6      	cmp	lr, r4
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x156>
 8000590:	eb1c 0404 	adds.w	r4, ip, r4
 8000594:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000598:	d202      	bcs.n	80005a0 <__udivmoddi4+0x154>
 800059a:	45a6      	cmp	lr, r4
 800059c:	f200 80bb 	bhi.w	8000716 <__udivmoddi4+0x2ca>
 80005a0:	4628      	mov	r0, r5
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005aa:	e79e      	b.n	80004ea <__udivmoddi4+0x9e>
 80005ac:	f1c1 0720 	rsb	r7, r1, #32
 80005b0:	408b      	lsls	r3, r1
 80005b2:	fa22 fc07 	lsr.w	ip, r2, r7
 80005b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80005ba:	fa20 f407 	lsr.w	r4, r0, r7
 80005be:	fa05 f301 	lsl.w	r3, r5, r1
 80005c2:	431c      	orrs	r4, r3
 80005c4:	40fd      	lsrs	r5, r7
 80005c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005ca:	fa00 f301 	lsl.w	r3, r0, r1
 80005ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80005d2:	0c20      	lsrs	r0, r4, #16
 80005d4:	fa1f fe8c 	uxth.w	lr, ip
 80005d8:	fb09 5518 	mls	r5, r9, r8, r5
 80005dc:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80005e0:	fb08 f00e 	mul.w	r0, r8, lr
 80005e4:	42a8      	cmp	r0, r5
 80005e6:	fa02 f201 	lsl.w	r2, r2, r1
 80005ea:	d90b      	bls.n	8000604 <__udivmoddi4+0x1b8>
 80005ec:	eb1c 0505 	adds.w	r5, ip, r5
 80005f0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80005f4:	f080 8088 	bcs.w	8000708 <__udivmoddi4+0x2bc>
 80005f8:	42a8      	cmp	r0, r5
 80005fa:	f240 8085 	bls.w	8000708 <__udivmoddi4+0x2bc>
 80005fe:	f1a8 0802 	sub.w	r8, r8, #2
 8000602:	4465      	add	r5, ip
 8000604:	1a2d      	subs	r5, r5, r0
 8000606:	b2a4      	uxth	r4, r4
 8000608:	fbb5 f0f9 	udiv	r0, r5, r9
 800060c:	fb09 5510 	mls	r5, r9, r0, r5
 8000610:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000614:	fb00 fe0e 	mul.w	lr, r0, lr
 8000618:	45ae      	cmp	lr, r5
 800061a:	d908      	bls.n	800062e <__udivmoddi4+0x1e2>
 800061c:	eb1c 0505 	adds.w	r5, ip, r5
 8000620:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000624:	d26c      	bcs.n	8000700 <__udivmoddi4+0x2b4>
 8000626:	45ae      	cmp	lr, r5
 8000628:	d96a      	bls.n	8000700 <__udivmoddi4+0x2b4>
 800062a:	3802      	subs	r0, #2
 800062c:	4465      	add	r5, ip
 800062e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000632:	fba0 9402 	umull	r9, r4, r0, r2
 8000636:	eba5 050e 	sub.w	r5, r5, lr
 800063a:	42a5      	cmp	r5, r4
 800063c:	46c8      	mov	r8, r9
 800063e:	46a6      	mov	lr, r4
 8000640:	d356      	bcc.n	80006f0 <__udivmoddi4+0x2a4>
 8000642:	d053      	beq.n	80006ec <__udivmoddi4+0x2a0>
 8000644:	b15e      	cbz	r6, 800065e <__udivmoddi4+0x212>
 8000646:	ebb3 0208 	subs.w	r2, r3, r8
 800064a:	eb65 050e 	sbc.w	r5, r5, lr
 800064e:	fa05 f707 	lsl.w	r7, r5, r7
 8000652:	fa22 f301 	lsr.w	r3, r2, r1
 8000656:	40cd      	lsrs	r5, r1
 8000658:	431f      	orrs	r7, r3
 800065a:	e9c6 7500 	strd	r7, r5, [r6]
 800065e:	2100      	movs	r1, #0
 8000660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000664:	f1c2 0320 	rsb	r3, r2, #32
 8000668:	fa20 f103 	lsr.w	r1, r0, r3
 800066c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000670:	fa25 f303 	lsr.w	r3, r5, r3
 8000674:	4095      	lsls	r5, r2
 8000676:	430d      	orrs	r5, r1
 8000678:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800067c:	fa1f fe8c 	uxth.w	lr, ip
 8000680:	fbb3 f1f7 	udiv	r1, r3, r7
 8000684:	fb07 3011 	mls	r0, r7, r1, r3
 8000688:	0c2b      	lsrs	r3, r5, #16
 800068a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800068e:	fb01 f00e 	mul.w	r0, r1, lr
 8000692:	4298      	cmp	r0, r3
 8000694:	fa04 f402 	lsl.w	r4, r4, r2
 8000698:	d908      	bls.n	80006ac <__udivmoddi4+0x260>
 800069a:	eb1c 0303 	adds.w	r3, ip, r3
 800069e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80006a2:	d22f      	bcs.n	8000704 <__udivmoddi4+0x2b8>
 80006a4:	4298      	cmp	r0, r3
 80006a6:	d92d      	bls.n	8000704 <__udivmoddi4+0x2b8>
 80006a8:	3902      	subs	r1, #2
 80006aa:	4463      	add	r3, ip
 80006ac:	1a1b      	subs	r3, r3, r0
 80006ae:	b2ad      	uxth	r5, r5
 80006b0:	fbb3 f0f7 	udiv	r0, r3, r7
 80006b4:	fb07 3310 	mls	r3, r7, r0, r3
 80006b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80006bc:	fb00 f30e 	mul.w	r3, r0, lr
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d908      	bls.n	80006d6 <__udivmoddi4+0x28a>
 80006c4:	eb1c 0505 	adds.w	r5, ip, r5
 80006c8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80006cc:	d216      	bcs.n	80006fc <__udivmoddi4+0x2b0>
 80006ce:	42ab      	cmp	r3, r5
 80006d0:	d914      	bls.n	80006fc <__udivmoddi4+0x2b0>
 80006d2:	3802      	subs	r0, #2
 80006d4:	4465      	add	r5, ip
 80006d6:	1aed      	subs	r5, r5, r3
 80006d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006dc:	e738      	b.n	8000550 <__udivmoddi4+0x104>
 80006de:	4631      	mov	r1, r6
 80006e0:	4630      	mov	r0, r6
 80006e2:	e707      	b.n	80004f4 <__udivmoddi4+0xa8>
 80006e4:	4686      	mov	lr, r0
 80006e6:	e6e5      	b.n	80004b4 <__udivmoddi4+0x68>
 80006e8:	4618      	mov	r0, r3
 80006ea:	e6fa      	b.n	80004e2 <__udivmoddi4+0x96>
 80006ec:	454b      	cmp	r3, r9
 80006ee:	d2a9      	bcs.n	8000644 <__udivmoddi4+0x1f8>
 80006f0:	ebb9 0802 	subs.w	r8, r9, r2
 80006f4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006f8:	3801      	subs	r0, #1
 80006fa:	e7a3      	b.n	8000644 <__udivmoddi4+0x1f8>
 80006fc:	4640      	mov	r0, r8
 80006fe:	e7ea      	b.n	80006d6 <__udivmoddi4+0x28a>
 8000700:	4620      	mov	r0, r4
 8000702:	e794      	b.n	800062e <__udivmoddi4+0x1e2>
 8000704:	4641      	mov	r1, r8
 8000706:	e7d1      	b.n	80006ac <__udivmoddi4+0x260>
 8000708:	46d0      	mov	r8, sl
 800070a:	e77b      	b.n	8000604 <__udivmoddi4+0x1b8>
 800070c:	3b02      	subs	r3, #2
 800070e:	4465      	add	r5, ip
 8000710:	e732      	b.n	8000578 <__udivmoddi4+0x12c>
 8000712:	4608      	mov	r0, r1
 8000714:	e709      	b.n	800052a <__udivmoddi4+0xde>
 8000716:	4464      	add	r4, ip
 8000718:	3802      	subs	r0, #2
 800071a:	e742      	b.n	80005a2 <__udivmoddi4+0x156>

0800071c <__aeabi_idiv0>:
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <osEE_hal_save_ctx_and_restore_ctx>:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 * R2 parameter: 	OsEE_SCB * p_from_scb
	 */
	osEE_hal_save_vcontext_m R2
 8000720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000724:	f3ef 8403 	mrs	r4, PSR
 8000728:	b410      	push	{r4}
 800072a:	4614      	mov	r4, r2
 800072c:	6825      	ldr	r5, [r4, #0]
 800072e:	b460      	push	{r5, r6}
 8000730:	f3ef 8508 	mrs	r5, MSP
 8000734:	6025      	str	r5, [r4, #0]
	B	osEE_hal_restore_ctx
 8000736:	f000 b801 	b.w	800073c <osEE_hal_restore_ctx>
 800073a:	bf00      	nop

0800073c <osEE_hal_restore_ctx>:
osEE_hal_restore_ctx:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 */
	osEE_hal_restore_vcontext_m R1
 800073c:	460c      	mov	r4, r1
 800073e:	6825      	ldr	r5, [r4, #0]
 8000740:	f385 8808 	msr	MSP, r5
 8000744:	bc60      	pop	{r5, r6}
 8000746:	6025      	str	r5, [r4, #0]
 8000748:	bc10      	pop	{r4}
 800074a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800074e:	432c      	orrs	r4, r5
 8000750:	f384 8803 	msr	PSR, r4
 8000754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	B	osEE_scheduler_task_wrapper_restore
 8000758:	f003 bd52 	b.w	8004200 <osEE_scheduler_task_wrapper_restore>

0800075c <osEE_hal_ready2stacked>:
	MRS	R4, CONTROL
	LDR	R5, =CONTROL_FPCA_NEG
	ANDS	R4, R4, R5
	MSR	CONTROL, R4
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */
	LDR	R2, [R1]
 800075c:	680a      	ldr	r2, [r1, #0]
	/* sp = R2 */
	MSR	MSP, R2
 800075e:	f382 8808 	msr	MSP, r2
	B	osEE_scheduler_task_wrapper_run
 8000762:	f003 bd51 	b.w	8004208 <osEE_scheduler_task_wrapper_run>
 8000766:	bf00      	nop

08000768 <osEE_hal_save_ctx_and_ready2stacked>:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 * R2 parameter:	OsEE_SCB * p_from_scb
	*/
	osEE_hal_save_vcontext_m R2
 8000768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800076c:	f3ef 8403 	mrs	r4, PSR
 8000770:	b410      	push	{r4}
 8000772:	4614      	mov	r4, r2
 8000774:	6825      	ldr	r5, [r4, #0]
 8000776:	b460      	push	{r5, r6}
 8000778:	f3ef 8508 	mrs	r5, MSP
 800077c:	6025      	str	r5, [r4, #0]
	B	osEE_hal_ready2stacked
 800077e:	f7ff bfed 	b.w	800075c <osEE_hal_ready2stacked>
 8000782:	bf00      	nop

08000784 <osEE_hal_terminate_ctx>:
	MRS	R4, CONTROL
	LDR	R5, =CONTROL_FPCA_NEG
	ANDS	R4, R4, R5
	MSR	CONTROL, R4
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */
	LDR	R2, [R0]
 8000784:	6802      	ldr	r2, [r0, #0]
	/* Unwind SP */
	MSR	MSP, R2
 8000786:	f382 8808 	msr	MSP, r2
	/*  Jump to kern_callback (that schedule) */
	BX	R1
 800078a:	4708      	bx	r1

0800078c <osEE_cortex_m_restore_ctx>:
osEE_cortex_m_restore_ctx:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 */
	osEE_hal_restore_vcontext_m R1
 800078c:	460c      	mov	r4, r1
 800078e:	6825      	ldr	r5, [r4, #0]
 8000790:	f385 8808 	msr	MSP, r5
 8000794:	bc60      	pop	{r5, r6}
 8000796:	6025      	str	r5, [r4, #0]
 8000798:	bc10      	pop	{r4}
 800079a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800079e:	432c      	orrs	r4, r5
 80007a0:	f384 8803 	msr	PSR, r4
 80007a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BX	LR
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop

080007ac <osEE_set_switch_context_pri>:
	.global	osEE_set_switch_context_pri
	.type	osEE_set_switch_context_pri, #function
osEE_set_switch_context_pri:

	/* Set PendSV priority to the minumum one */
	LDR	R0, =NVIC_SHPR3
 80007ac:	4815      	ldr	r0, [pc, #84]	; (8000804 <NMI_Handler+0x8>)
	LDR	R1, =NVIC_PENDSV_PRI
 80007ae:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
	LDR	R2, [R0]
 80007b2:	6802      	ldr	r2, [r0, #0]
	ORRS	R2, R2, R1
 80007b4:	430a      	orrs	r2, r1
	STR	R2, [R0]
 80007b6:	6002      	str	r2, [r0, #0]

	/* SVCall priority to the maximum one */
	LDR	R0, =NVIC_SHPR2
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <NMI_Handler+0xc>)
	LDR	R1, =NVIC_SVCALL_PRI
 80007ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
	LDR	R2, [R0]
 80007be:	6802      	ldr	r2, [r0, #0]
	ANDS	R2, R2, R1
 80007c0:	400a      	ands	r2, r1
	STR	R2, [R0]
 80007c2:	6002      	str	r2, [r0, #0]

	BX	LR
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <osEE_cortex_m_trigger_pend_sv>:
osEE_cortex_m_trigger_pend_sv:

	/* 
	 * Trigger the PendSV exception (causes context switch)
	 */
	LDR	R0, =NVIC_INT_CTRL
 80007c8:	4810      	ldr	r0, [pc, #64]	; (800080c <NMI_Handler+0x10>)
	LDR	R1, =NVIC_PENDSVSET
 80007ca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	STR	R1, [R0]
 80007ce:	6001      	str	r1, [r0, #0]

	BX	LR
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop

080007d4 <PendSV_Handler>:
	.global	PendSV_Handler
	.type	PendSV_Handler, %function
PendSV_Handler:

	/* Disable interrupts (set PRIMASK) */
	CPSID	I
 80007d4:	b672      	cpsid	i

	/* Clear the PendSV exception (preventing 2nd triggering) */
	LDR	R2, =NVIC_INT_CTRL
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <NMI_Handler+0x10>)
	LDR	R1, =NVIC_PENDSVCLR
 80007d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
	STR	R1, [R2]
 80007dc:	6011      	str	r1, [r2, #0]
	 * EE_std_change_context(EE_TID) at the
	 * end of PendSV_Handler.
	 */

	/* R3 = 0x01000000 (xPSR) */
	LDR	R3, =EPSR_T_BIT_VAL
 80007de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

	/* R2 = osEE_cortex_m_change_context_from_task_end (PC) */
	LDR	R2, =osEE_cortex_m_change_context_from_task_end
 80007e2:	4a0b      	ldr	r2, [pc, #44]	; (8000810 <NMI_Handler+0x14>)

	/* R1 = osEE_cortex_m_thread_end (LR) */
	LDR	R1, =osEE_cortex_m_thread_end
 80007e4:	490b      	ldr	r1, [pc, #44]	; (8000814 <NMI_Handler+0x18>)
	 * |xPSR|-> xPSR AND 0xFFFFFE0
	 * | PC |-> osEE_cortex_m_change_context_from_task_end
	 * | LR |-> osEE_cortex_m_thread_end
	 * | R12|
	 */
	PUSH	{R0-R3}
 80007e6:	b40f      	push	{r0, r1, r2, r3}
	 * | R3 |
	 * | R2 |
	 * | R1 |
	 * | R0 |
	 */
	PUSH	{R0-R3}
 80007e8:	b40f      	push	{r0, r1, r2, r3}
	/*
	 * R0 = EXC_RETURN -> Return to Thread mode.
	 *		   -> Exception return gets state from MSP.
	 *		   -> Execution uses MSP after return.
	 */
	LDR	LR, =EXC_RETURN
 80007ea:	f06f 0e06 	mvn.w	lr, #6

	BX	LR		/* EXC_RETURN. */
 80007ee:	4770      	bx	lr

080007f0 <osEE_cortex_m_thread_end>:
	.global	osEE_cortex_m_thread_end
	.type	osEE_cortex_m_thread_end, %function
osEE_cortex_m_thread_end:

	/* trigger NMI to return to preempted task... */
	LDR	R0, =0xE000ED04	/* Interrupt Control and State Register */
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <NMI_Handler+0x10>)
	MOVS	R1, #1
 80007f2:	2101      	movs	r1, #1
	LSLS	R1, R1, #31	/* R0 := (1 << 31) (NMI bit) */
 80007f4:	07c9      	lsls	r1, r1, #31
	STR	R1,[r0]		/* ICSR[31] := 1 (pend NMI) */
 80007f6:	6001      	str	r1, [r0, #0]
	B	.		/* wait for preemption by NMI */
 80007f8:	e7fe      	b.n	80007f8 <osEE_cortex_m_thread_end+0x8>
 80007fa:	bf00      	nop

080007fc <NMI_Handler>:
	.global	NMI_Handler
	.type	NMI_Handler, %function
NMI_Handler:

	/* Remove SVCall Stack-Frame. */
	ADD	SP, SP, #(8*4)
 80007fc:	b008      	add	sp, #32
	/* Retrieves original Link Register. */
	POP	{R0, LR}
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */

	/* Enable interrupts (clear PRIMASK) */
	CPSIE	I
 80007fe:	b662      	cpsie	i

	BX	LR		/* EXC_RETURN. */
 8000800:	4770      	bx	lr
 8000802:	0000      	.short	0x0000
	LDR	R0, =NVIC_SHPR3
 8000804:	e000ed20 	.word	0xe000ed20
	LDR	R0, =NVIC_SHPR2
 8000808:	e000ed1c 	.word	0xe000ed1c
	LDR	R0, =NVIC_INT_CTRL
 800080c:	e000ed04 	.word	0xe000ed04
	LDR	R2, =osEE_cortex_m_change_context_from_task_end
 8000810:	080044fd 	.word	0x080044fd
	LDR	R1, =osEE_cortex_m_thread_end
 8000814:	080007f1 	.word	0x080007f1

08000818 <MX_DMA_Init>:
#include "../../Core/Inc/dma.h"

/* DMA handles*/

void MX_DMA_Init(void)
{
 8000818:	b500      	push	{lr}
 800081a:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800081c:	2100      	movs	r1, #0
 800081e:	9101      	str	r1, [sp, #4]
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_DMA_Init+0x30>)
 8000822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000824:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000834:	460a      	mov	r2, r1
 8000836:	2044      	movs	r0, #68	; 0x44
 8000838:	f002 f904 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800083c:	2044      	movs	r0, #68	; 0x44
 800083e:	f002 f939 	bl	8002ab4 <HAL_NVIC_EnableIRQ>

}
 8000842:	b003      	add	sp, #12
 8000844:	f85d fb04 	ldr.w	pc, [sp], #4
 8000848:	40023800 	.word	0x40023800

0800084c <Error_Handler>:
		}									\
	}										\
} while ( 0 ) 								\

void Error_Handler(void)
{
 800084c:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800084e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <Error_Handler+0x10>)
 8000854:	f002 fc0a 	bl	800306c <HAL_GPIO_TogglePin>
	while (1){;}
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0xc>
 800085a:	bf00      	nop
 800085c:	40020c00 	.word	0x40020c00

08000860 <SerialISR>:
}



void SerialISR(void)
{
 8000860:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&husart2);
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <SerialISR+0xc>)
 8000864:	f003 fba2 	bl	8003fac <HAL_UART_IRQHandler>
}
 8000868:	bd08      	pop	{r3, pc}
 800086a:	bf00      	nop
 800086c:	2001059c 	.word	0x2001059c

08000870 <DMA2_Stream5_IRQHandler>:
	HAL_DMA_IRQHandler(&hdma_tim1_up);

}

void DMA2_Stream5_IRQHandler(void)
{
 8000870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000872:	4802      	ldr	r0, [pc, #8]	; (800087c <DMA2_Stream5_IRQHandler+0xc>)
 8000874:	f002 fa22 	bl	8002cbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000878:	bd08      	pop	{r3, pc}
 800087a:	bf00      	nop
 800087c:	200104bc 	.word	0x200104bc

08000880 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000880:	b500      	push	{lr}
 8000882:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	2300      	movs	r3, #0
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	9302      	str	r3, [sp, #8]
 800088a:	9303      	str	r3, [sp, #12]
 800088c:	9304      	str	r3, [sp, #16]
 800088e:	9305      	str	r3, [sp, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_GPIO_Init+0x44>)
 8000894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000896:	f042 0208 	orr.w	r2, r2, #8
 800089a:	631a      	str	r2, [r3, #48]	; 0x30
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	9b00      	ldr	r3, [sp, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80008a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008aa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b0:	2302      	movs	r3, #2
 80008b2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	a901      	add	r1, sp, #4
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0x48>)
 80008b8:	f002 faee 	bl	8002e98 <HAL_GPIO_Init>
}
 80008bc:	b007      	add	sp, #28
 80008be:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020c00 	.word	0x40020c00

080008cc <_kill>:
	my_printf("Time = %d\n",time1-time2-7); // 7 clks without nothing
}

#include <errno.h>
int _kill(int pid, int sig)
{
 80008cc:	b508      	push	{r3, lr}
	(void)pid;
	(void)sig;
	errno = EINVAL;
 80008ce:	f001 fee7 	bl	80026a0 <__errno>
 80008d2:	2316      	movs	r3, #22
 80008d4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80008d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008da:	bd08      	pop	{r3, pc}

080008dc <_exit>:
void _exit (int status)
{
 80008dc:	b508      	push	{r3, lr}
	_kill(status, -1);
 80008de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008e2:	f7ff fff3 	bl	80008cc <_kill>
	while (1) {}
 80008e6:	e7fe      	b.n	80008e6 <_exit+0xa>

080008e8 <idle_hook>:
}

void idle_hook(void)
{
 80008e8:	b508      	push	{r3, lr}

	my_printf("ERIKAv3\n\r");
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <idle_hook+0x1c>)
 80008ec:	f000 f934 	bl	8000b58 <my_printf>
//	accurate_trace();
//	measure_time();

	  static unsigned char mbedtls_heap[64*1024]; //Adjust

	  mbedtls_memory_buffer_alloc_init(mbedtls_heap, sizeof(mbedtls_heap));
 80008f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <idle_hook+0x20>)
 80008f6:	f001 fe6b 	bl	80025d0 <mbedtls_memory_buffer_alloc_init>

	  mbedtls_mpi_self_test(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f001 fb1c 	bl	8001f38 <mbedtls_mpi_self_test>

	while (1)
 8000900:	e7fe      	b.n	8000900 <idle_hook+0x18>
 8000902:	bf00      	nop
 8000904:	08004570 	.word	0x08004570
 8000908:	200004ac 	.word	0x200004ac

0800090c <main>:

	//DemoHAL_MainFunction();
}

int main(void)
{
 800090c:	b510      	push	{r4, lr}
	HAL_Init();
 800090e:	f002 f84b 	bl	80029a8 <HAL_Init>

	SysTick->CTRL = 0; //Disable systick
 8000912:	2400      	movs	r4, #0
 8000914:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000918:	611c      	str	r4, [r3, #16]

	SystemClock_Config();
 800091a:	f000 f931 	bl	8000b80 <SystemClock_Config>

	MX_DMA_Init();
 800091e:	f7ff ff7b 	bl	8000818 <MX_DMA_Init>
	MX_TIM1_Init();
 8000922:	f000 fa41 	bl	8000da8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000926:	f000 fa7f 	bl	8000e28 <MX_TIM2_Init>

	//MX_TIM2_Init();
	MX_GPIO_Init();
 800092a:	f7ff ffa9 	bl	8000880 <MX_GPIO_Init>
	MX_USART2_Init();
 800092e:	f000 fb0d 	bl	8000f4c <MX_USART2_Init>

	//HAL_TIM_Base_Start_IT(&htim2);

	StartOS(OSDEFAULTAPPMODE);
 8000932:	4620      	mov	r0, r4
 8000934:	f003 fbe6 	bl	8004104 <StartOS>

	return 0;
}
 8000938:	4620      	mov	r0, r4
 800093a:	bd10      	pop	{r4, pc}

0800093c <my_utoa_dec>:
#include "../../Core/Inc/main.h"
#include <stdio.h>


static void my_utoa_dec(unsigned int value, char *buf)
{
 800093c:	b084      	sub	sp, #16
    char temp[10];
    unsigned int i = 0;

    if (value == 0) {
 800093e:	4602      	mov	r2, r0
 8000940:	b108      	cbz	r0, 8000946 <my_utoa_dec+0xa>
    unsigned int i = 0;
 8000942:	2000      	movs	r0, #0
 8000944:	e015      	b.n	8000972 <my_utoa_dec+0x36>
        buf[0] = '0';
 8000946:	2330      	movs	r3, #48	; 0x30
 8000948:	700b      	strb	r3, [r1, #0]
        buf[1] = '\0';
 800094a:	2300      	movs	r3, #0
 800094c:	704b      	strb	r3, [r1, #1]
        return;
 800094e:	e020      	b.n	8000992 <my_utoa_dec+0x56>
    }

    while (value && i < sizeof(temp)) {
        temp[i++] = '0' + (value % 10);
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <my_utoa_dec+0x5c>)
 8000952:	fba3 c302 	umull	ip, r3, r3, r2
 8000956:	08db      	lsrs	r3, r3, #3
 8000958:	469c      	mov	ip, r3
 800095a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800095e:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8000962:	3330      	adds	r3, #48	; 0x30
 8000964:	f100 0210 	add.w	r2, r0, #16
 8000968:	446a      	add	r2, sp
 800096a:	f802 3c0c 	strb.w	r3, [r2, #-12]
        value /= 10;
 800096e:	4662      	mov	r2, ip
        temp[i++] = '0' + (value % 10);
 8000970:	3001      	adds	r0, #1
    while (value && i < sizeof(temp)) {
 8000972:	b152      	cbz	r2, 800098a <my_utoa_dec+0x4e>
 8000974:	2809      	cmp	r0, #9
 8000976:	d9eb      	bls.n	8000950 <my_utoa_dec+0x14>
 8000978:	2200      	movs	r2, #0
 800097a:	e006      	b.n	800098a <my_utoa_dec+0x4e>
    }

    for (unsigned int j = 0; j < i; ++j) {
        buf[j] = temp[i - j - 1];
 800097c:	1a83      	subs	r3, r0, r2
 800097e:	330f      	adds	r3, #15
 8000980:	446b      	add	r3, sp
 8000982:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000986:	548b      	strb	r3, [r1, r2]
    for (unsigned int j = 0; j < i; ++j) {
 8000988:	3201      	adds	r2, #1
 800098a:	4290      	cmp	r0, r2
 800098c:	d8f6      	bhi.n	800097c <my_utoa_dec+0x40>
    }

    buf[i] = '\0';
 800098e:	2300      	movs	r3, #0
 8000990:	540b      	strb	r3, [r1, r0]
}
 8000992:	b004      	add	sp, #16
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	cccccccd 	.word	0xcccccccd

0800099c <my_utoa_hex>:

static void my_utoa_hex(unsigned int value, char *buf)
{
 800099c:	b410      	push	{r4}
 800099e:	b083      	sub	sp, #12
    static const char hex_chars[] = "0123456789ABCDEF";
    char temp[8];
    unsigned int i = 0;

    if (value == 0) {
 80009a0:	4603      	mov	r3, r0
 80009a2:	b108      	cbz	r0, 80009a8 <my_utoa_hex+0xc>
    unsigned int i = 0;
 80009a4:	2000      	movs	r0, #0
 80009a6:	e010      	b.n	80009ca <my_utoa_hex+0x2e>
        buf[0] = '0';
 80009a8:	2330      	movs	r3, #48	; 0x30
 80009aa:	700b      	strb	r3, [r1, #0]
        buf[1] = '\0';
 80009ac:	2300      	movs	r3, #0
 80009ae:	704b      	strb	r3, [r1, #1]
        return;
 80009b0:	e01b      	b.n	80009ea <my_utoa_hex+0x4e>
    }

    while (value && i < sizeof(temp)) {
        temp[i++] = hex_chars[value & 0xF];
 80009b2:	f003 020f 	and.w	r2, r3, #15
 80009b6:	4c0e      	ldr	r4, [pc, #56]	; (80009f0 <my_utoa_hex+0x54>)
 80009b8:	f814 c002 	ldrb.w	ip, [r4, r2]
 80009bc:	f100 0208 	add.w	r2, r0, #8
 80009c0:	446a      	add	r2, sp
 80009c2:	f802 cc08 	strb.w	ip, [r2, #-8]
        value >>= 4;
 80009c6:	091b      	lsrs	r3, r3, #4
        temp[i++] = hex_chars[value & 0xF];
 80009c8:	3001      	adds	r0, #1
    while (value && i < sizeof(temp)) {
 80009ca:	b153      	cbz	r3, 80009e2 <my_utoa_hex+0x46>
 80009cc:	2807      	cmp	r0, #7
 80009ce:	d9f0      	bls.n	80009b2 <my_utoa_hex+0x16>
 80009d0:	2300      	movs	r3, #0
 80009d2:	e006      	b.n	80009e2 <my_utoa_hex+0x46>
    }

    for (unsigned int j = 0; j < i; ++j) {
        buf[j] = temp[i - j - 1];
 80009d4:	1ac2      	subs	r2, r0, r3
 80009d6:	3207      	adds	r2, #7
 80009d8:	446a      	add	r2, sp
 80009da:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80009de:	54ca      	strb	r2, [r1, r3]
    for (unsigned int j = 0; j < i; ++j) {
 80009e0:	3301      	adds	r3, #1
 80009e2:	4298      	cmp	r0, r3
 80009e4:	d8f6      	bhi.n	80009d4 <my_utoa_hex+0x38>
    }

    buf[i] = '\0';
 80009e6:	2300      	movs	r3, #0
 80009e8:	540b      	strb	r3, [r1, r0]
}
 80009ea:	b003      	add	sp, #12
 80009ec:	bc10      	pop	{r4}
 80009ee:	4770      	bx	lr
 80009f0:	0800457c 	.word	0x0800457c

080009f4 <my_format>:
static int my_format(char *out_buf, size_t max_len, const char *fmt, __builtin_va_list args)
{
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	4607      	mov	r7, r0
 80009fc:	4688      	mov	r8, r1
 80009fe:	4615      	mov	r5, r2
 8000a00:	9301      	str	r3, [sp, #4]
    const char *p = fmt;
    char *out = out_buf;
 8000a02:	4604      	mov	r4, r0
    char num_buf[16];

    while (*p && (size_t)(out - out_buf) < max_len - 1) {
 8000a04:	e086      	b.n	8000b14 <my_format+0x120>
        if (*p == '%') {
            p++;

            int width = 0;
            while (*p >= '0' && *p <= '9') {
            	width = width * 10 + (*p - '0');
 8000a06:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8000a0a:	3b30      	subs	r3, #48	; 0x30
 8000a0c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
            	p++;
 8000a10:	3501      	adds	r5, #1
            while (*p >= '0' && *p <= '9') {
 8000a12:	782b      	ldrb	r3, [r5, #0]
 8000a14:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	2a09      	cmp	r2, #9
 8000a1c:	d9f3      	bls.n	8000a06 <my_format+0x12>
            }

            switch (*p) {
 8000a1e:	3b63      	subs	r3, #99	; 0x63
 8000a20:	2b15      	cmp	r3, #21
 8000a22:	d86c      	bhi.n	8000afe <my_format+0x10a>
 8000a24:	e8df f003 	tbb	[pc, r3]
 8000a28:	6b6b0b64 	.word	0x6b6b0b64
 8000a2c:	6b6b6b6b 	.word	0x6b6b6b6b
 8000a30:	6b6b6b6b 	.word	0x6b6b6b6b
 8000a34:	6b6b6b6b 	.word	0x6b6b6b6b
 8000a38:	6b6b6b56 	.word	0x6b6b6b56
 8000a3c:	446b      	.short	0x446b
            case 'd': {
            	int val = __builtin_va_arg(args, int);
 8000a3e:	9b01      	ldr	r3, [sp, #4]
 8000a40:	1d1a      	adds	r2, r3, #4
 8000a42:	9201      	str	r2, [sp, #4]
 8000a44:	f8d3 a000 	ldr.w	sl, [r3]
            	int is_negative = val < 0;
            	if (is_negative) val = -val;
 8000a48:	f1ba 0f00 	cmp.w	sl, #0
 8000a4c:	db0c      	blt.n	8000a68 <my_format+0x74>
            	int val = __builtin_va_arg(args, int);
 8000a4e:	4650      	mov	r0, sl

            	my_utoa_dec((unsigned int)val, num_buf);
 8000a50:	a902      	add	r1, sp, #8
 8000a52:	f7ff ff73 	bl	800093c <my_utoa_dec>
            	size_t len = strlen(num_buf) + (is_negative ? 1 : 0);
 8000a56:	a802      	add	r0, sp, #8
 8000a58:	f7ff fc72 	bl	8000340 <strlen>
 8000a5c:	f1ba 0f00 	cmp.w	sl, #0
 8000a60:	db05      	blt.n	8000a6e <my_format+0x7a>
 8000a62:	2300      	movs	r3, #0
 8000a64:	4403      	add	r3, r0

				while ((int)len < width && (size_t)(out - out_buf) < max_len - 1) {
 8000a66:	e008      	b.n	8000a7a <my_format+0x86>
            	if (is_negative) val = -val;
 8000a68:	f1ca 0000 	rsb	r0, sl, #0
 8000a6c:	e7f0      	b.n	8000a50 <my_format+0x5c>
            	size_t len = strlen(num_buf) + (is_negative ? 1 : 0);
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e7f8      	b.n	8000a64 <my_format+0x70>
					*out++ = ' ';
 8000a72:	2220      	movs	r2, #32
 8000a74:	f804 2b01 	strb.w	r2, [r4], #1
					len++;
 8000a78:	3301      	adds	r3, #1
				while ((int)len < width && (size_t)(out - out_buf) < max_len - 1) {
 8000a7a:	454b      	cmp	r3, r9
 8000a7c:	da02      	bge.n	8000a84 <my_format+0x90>
 8000a7e:	1be2      	subs	r2, r4, r7
 8000a80:	42b2      	cmp	r2, r6
 8000a82:	d3f6      	bcc.n	8000a72 <my_format+0x7e>
				}

				if (is_negative && (size_t)(out - out_buf) < max_len - 1) {
 8000a84:	f1ba 0f00 	cmp.w	sl, #0
 8000a88:	db01      	blt.n	8000a8e <my_format+0x9a>
					*out++ = '-';
 8000a8a:	ab02      	add	r3, sp, #8
 8000a8c:	e009      	b.n	8000aa2 <my_format+0xae>
				if (is_negative && (size_t)(out - out_buf) < max_len - 1) {
 8000a8e:	1be3      	subs	r3, r4, r7
 8000a90:	42b3      	cmp	r3, r6
 8000a92:	d2fa      	bcs.n	8000a8a <my_format+0x96>
					*out++ = '-';
 8000a94:	232d      	movs	r3, #45	; 0x2d
 8000a96:	f804 3b01 	strb.w	r3, [r4], #1
 8000a9a:	e7f6      	b.n	8000a8a <my_format+0x96>
				}

				for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
					*out++ = *n;
 8000a9c:	f804 2b01 	strb.w	r2, [r4], #1
				for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d034      	beq.n	8000b12 <my_format+0x11e>
 8000aa8:	1be1      	subs	r1, r4, r7
 8000aaa:	42b1      	cmp	r1, r6
 8000aac:	d3f6      	bcc.n	8000a9c <my_format+0xa8>
 8000aae:	e030      	b.n	8000b12 <my_format+0x11e>

				break;
            }
                case 'x': {
                    unsigned int val = __builtin_va_arg(args, unsigned int);
 8000ab0:	9b01      	ldr	r3, [sp, #4]
 8000ab2:	1d1a      	adds	r2, r3, #4
 8000ab4:	9201      	str	r2, [sp, #4]
                    my_utoa_hex(val, num_buf);
 8000ab6:	a902      	add	r1, sp, #8
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	f7ff ff6f 	bl	800099c <my_utoa_hex>
                    for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 8000abe:	ab02      	add	r3, sp, #8
 8000ac0:	e002      	b.n	8000ac8 <my_format+0xd4>
                        *out++ = *n;
 8000ac2:	f804 2b01 	strb.w	r2, [r4], #1
                    for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	b312      	cbz	r2, 8000b12 <my_format+0x11e>
 8000acc:	1be1      	subs	r1, r4, r7
 8000ace:	42b1      	cmp	r1, r6
 8000ad0:	d3f7      	bcc.n	8000ac2 <my_format+0xce>
 8000ad2:	e01e      	b.n	8000b12 <my_format+0x11e>
                    break;
                }
                case 's': {
                    char *str = __builtin_va_arg(args, char*);
 8000ad4:	9b01      	ldr	r3, [sp, #4]
 8000ad6:	1d1a      	adds	r2, r3, #4
 8000ad8:	9201      	str	r2, [sp, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
                    while (*str && (size_t)(out - out_buf) < max_len - 1)
 8000adc:	e002      	b.n	8000ae4 <my_format+0xf0>
                        *out++ = *str++;
 8000ade:	3301      	adds	r3, #1
 8000ae0:	f804 2b01 	strb.w	r2, [r4], #1
                    while (*str && (size_t)(out - out_buf) < max_len - 1)
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	b1a2      	cbz	r2, 8000b12 <my_format+0x11e>
 8000ae8:	1be1      	subs	r1, r4, r7
 8000aea:	42b1      	cmp	r1, r6
 8000aec:	d3f7      	bcc.n	8000ade <my_format+0xea>
 8000aee:	e010      	b.n	8000b12 <my_format+0x11e>
                    break;
                }
                case 'c': {
                    char ch = (char)__builtin_va_arg(args, int);
 8000af0:	9b01      	ldr	r3, [sp, #4]
 8000af2:	1d1a      	adds	r2, r3, #4
 8000af4:	9201      	str	r2, [sp, #4]
 8000af6:	781b      	ldrb	r3, [r3, #0]
                    *out++ = ch;
 8000af8:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
 8000afc:	e009      	b.n	8000b12 <my_format+0x11e>
                }
                default:
                    *out++ = '%';
 8000afe:	4623      	mov	r3, r4
 8000b00:	2225      	movs	r2, #37	; 0x25
 8000b02:	f803 2b02 	strb.w	r2, [r3], #2
                    *out++ = *p;
 8000b06:	782a      	ldrb	r2, [r5, #0]
 8000b08:	7062      	strb	r2, [r4, #1]
 8000b0a:	461c      	mov	r4, r3
 8000b0c:	e001      	b.n	8000b12 <my_format+0x11e>
            }
        } else {
            *out++ = *p;
 8000b0e:	f804 2b01 	strb.w	r2, [r4], #1
        }
        p++;
 8000b12:	3501      	adds	r5, #1
    while (*p && (size_t)(out - out_buf) < max_len - 1) {
 8000b14:	782a      	ldrb	r2, [r5, #0]
 8000b16:	b152      	cbz	r2, 8000b2e <my_format+0x13a>
 8000b18:	1be3      	subs	r3, r4, r7
 8000b1a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8000b1e:	42b3      	cmp	r3, r6
 8000b20:	d205      	bcs.n	8000b2e <my_format+0x13a>
        if (*p == '%') {
 8000b22:	2a25      	cmp	r2, #37	; 0x25
 8000b24:	d1f3      	bne.n	8000b0e <my_format+0x11a>
            p++;
 8000b26:	3501      	adds	r5, #1
            int width = 0;
 8000b28:	f04f 0900 	mov.w	r9, #0
            while (*p >= '0' && *p <= '9') {
 8000b2c:	e771      	b.n	8000a12 <my_format+0x1e>
    }

    *out = '\0';
 8000b2e:	2300      	movs	r3, #0
 8000b30:	7023      	strb	r3, [r4, #0]
    return (int)(out - out_buf);
}
 8000b32:	1be0      	subs	r0, r4, r7
 8000b34:	b006      	add	sp, #24
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08000b3c <serial_print>:



void serial_print(char const * msg)
{
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	4604      	mov	r4, r0
//	SuspendAllInterrupts();
//	HAL_UART_Transmit_IT(&husart2, (uint8_t *)msg, strlen(msg));
//	ResumeAllInterrupts();

	// Uart polling
	HAL_UART_Transmit(&husart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b40:	f7ff fbfe 	bl	8000340 <strlen>
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b48:	b282      	uxth	r2, r0
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4801      	ldr	r0, [pc, #4]	; (8000b54 <serial_print+0x18>)
 8000b4e:	f003 f95e 	bl	8003e0e <HAL_UART_Transmit>
}
 8000b52:	bd10      	pop	{r4, pc}
 8000b54:	2001059c 	.word	0x2001059c

08000b58 <my_printf>:


void my_printf(const char *fmt, ...)
{
 8000b58:	b40f      	push	{r0, r1, r2, r3}
 8000b5a:	b500      	push	{lr}
 8000b5c:	b0a3      	sub	sp, #140	; 0x8c
 8000b5e:	ab24      	add	r3, sp, #144	; 0x90
 8000b60:	f853 2b04 	ldr.w	r2, [r3], #4
    char buf[128];

    __builtin_va_list args;
    __builtin_va_start(args, fmt);
 8000b64:	9301      	str	r3, [sp, #4]
    my_format(buf, sizeof(buf), fmt, args);
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	a802      	add	r0, sp, #8
 8000b6a:	f7ff ff43 	bl	80009f4 <my_format>
    __builtin_va_end(args);

    serial_print(buf);
 8000b6e:	a802      	add	r0, sp, #8
 8000b70:	f7ff ffe4 	bl	8000b3c <serial_print>
}
 8000b74:	b023      	add	sp, #140	; 0x8c
 8000b76:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b7a:	b004      	add	sp, #16
 8000b7c:	4770      	bx	lr
	...

08000b80 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8000b80:	b500      	push	{lr}
 8000b82:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b84:	2230      	movs	r2, #48	; 0x30
 8000b86:	2100      	movs	r1, #0
 8000b88:	a808      	add	r0, sp, #32
 8000b8a:	f001 fdc7 	bl	800271c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8e:	2300      	movs	r3, #0
 8000b90:	9303      	str	r3, [sp, #12]
 8000b92:	9304      	str	r3, [sp, #16]
 8000b94:	9305      	str	r3, [sp, #20]
 8000b96:	9306      	str	r3, [sp, #24]
 8000b98:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <SystemClock_Config+0x9c>)
 8000b9e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ba0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ba4:	6411      	str	r1, [r2, #64]	; 0x40
 8000ba6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ba8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000bac:	9201      	str	r2, [sp, #4]
 8000bae:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <SystemClock_Config+0xa0>)
 8000bb4:	6811      	ldr	r1, [r2, #0]
 8000bb6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000bba:	6011      	str	r1, [r2, #0]
 8000bbc:	6812      	ldr	r2, [r2, #0]
 8000bbe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bc2:	9202      	str	r2, [sp, #8]
 8000bc4:	9a02      	ldr	r2, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bca:	2101      	movs	r1, #1
 8000bcc:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bce:	2110      	movs	r1, #16
 8000bd0:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000bda:	2332      	movs	r3, #50	; 0x32
 8000bdc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bde:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000be0:	2307      	movs	r3, #7
 8000be2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be4:	a808      	add	r0, sp, #32
 8000be6:	f002 fa4b 	bl	8003080 <HAL_RCC_OscConfig>
 8000bea:	b988      	cbnz	r0, 8000c10 <SystemClock_Config+0x90>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bfe:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c00:	2101      	movs	r1, #1
 8000c02:	a803      	add	r0, sp, #12
 8000c04:	f002 fc9c 	bl	8003540 <HAL_RCC_ClockConfig>
 8000c08:	b928      	cbnz	r0, 8000c16 <SystemClock_Config+0x96>
  {
    Error_Handler();
  }
}
 8000c0a:	b015      	add	sp, #84	; 0x54
 8000c0c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c10:	f7ff fe1c 	bl	800084c <Error_Handler>
 8000c14:	e7ea      	b.n	8000bec <SystemClock_Config+0x6c>
    Error_Handler();
 8000c16:	f7ff fe19 	bl	800084c <Error_Handler>
}
 8000c1a:	e7f6      	b.n	8000c0a <SystemClock_Config+0x8a>
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b500      	push	{lr}
 8000c26:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	2100      	movs	r1, #0
 8000c2a:	9100      	str	r1, [sp, #0]
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_MspInit+0x3c>)
 8000c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c34:	645a      	str	r2, [r3, #68]	; 0x44
 8000c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c38:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c40:	9101      	str	r1, [sp, #4]
 8000c42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c54:	2007      	movs	r0, #7
 8000c56:	f001 fee3 	bl	8002a20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	b003      	add	sp, #12
 8000c5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c60:	40023800 	.word	0x40023800

08000c64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <HardFault_Handler>

08000c66 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <MemManage_Handler>

08000c68 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <BusFault_Handler>

08000c6a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <UsageFault_Handler>

08000c6c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c72:	f001 feaf 	bl	80029d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c76:	bd08      	pop	{r3, pc}

08000c78 <FuncTask1>:
	}										\
} while ( 0 ) 								\


TASK(Task1)
{
 8000c78:	b510      	push	{r4, lr}
	static OsEE_bool volatile stk_wrong = OSEE_FALSE;
	static OsEE_addr volatile old_sp = 0;

	static uint16_t volatile Task1_count;

	my_printf("Task1: %d\r\n", Task1_count);
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <FuncTask1+0x98>)
 8000c7c:	8819      	ldrh	r1, [r3, #0]
 8000c7e:	b289      	uxth	r1, r1
 8000c80:	4824      	ldr	r0, [pc, #144]	; (8000d14 <FuncTask1+0x9c>)
 8000c82:	f7ff ff69 	bl	8000b58 <my_printf>

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000c86:	4c24      	ldr	r4, [pc, #144]	; (8000d18 <FuncTask1+0xa0>)
 8000c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f002 f9ed 	bl	800306c <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c96:	4620      	mov	r0, r4
 8000c98:	f002 f9e8 	bl	800306c <HAL_GPIO_TogglePin>


	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f002 f9dc 	bl	8003060 <HAL_GPIO_WritePin>

	HAL_Delay(HAL_DELAY_MS);
 8000ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cac:	f001 fea4 	bl	80029f8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f002 f9d2 	bl	8003060 <HAL_GPIO_WritePin>

	HAL_Delay(HAL_DELAY_MS);
 8000cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc0:	f001 fe9a 	bl	80029f8 <HAL_Delay>

	osEE_CheckStackIntegrity();
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <FuncTask1+0xa4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b9c3      	cbnz	r3, 8000cfc <FuncTask1+0x84>
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <FuncTask1+0xa8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	b193      	cbz	r3, 8000cf6 <FuncTask1+0x7e>
OSEE_STATIC_INLINE FUNC(OsEE_addr, OS_CODE) OSEE_ALWAYS_INLINE
osEE_get_SP (
void
) {
  VAR(OsEE_addr, AUTOMATIC) temp;
  OSEE_GET_SP(temp);
 8000cd0:	466b      	mov	r3, sp
 8000cd2:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <FuncTask1+0xa8>)
 8000cd4:	6812      	ldr	r2, [r2, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d010      	beq.n	8000cfc <FuncTask1+0x84>
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <FuncTask1+0xa4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
 8000ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <FuncTask1+0xa0>)
 8000ce6:	f002 f9c1 	bl	800306c <HAL_GPIO_TogglePin>
 8000cea:	f003 fa03 	bl	80040f4 <DisableAllInterrupts>
 8000cee:	480d      	ldr	r0, [pc, #52]	; (8000d24 <FuncTask1+0xac>)
 8000cf0:	f7ff ff32 	bl	8000b58 <my_printf>
 8000cf4:	e7fe      	b.n	8000cf4 <FuncTask1+0x7c>
 8000cf6:	466a      	mov	r2, sp
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <FuncTask1+0xa8>)
 8000cfa:	601a      	str	r2, [r3, #0]

	++Task1_count;
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <FuncTask1+0x98>)
 8000cfe:	8813      	ldrh	r3, [r2, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	8013      	strh	r3, [r2, #0]

	TerminateTask();
 8000d08:	f003 fa36 	bl	8004178 <TerminateTask>
}
 8000d0c:	bd10      	pop	{r4, pc}
 8000d0e:	bf00      	nop
 8000d10:	200104ac 	.word	0x200104ac
 8000d14:	08004590 	.word	0x08004590
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	200104b9 	.word	0x200104b9
 8000d20:	200104b4 	.word	0x200104b4
 8000d24:	0800459c 	.word	0x0800459c

08000d28 <FuncTask2>:

TASK(Task2)
{
 8000d28:	b508      	push	{r3, lr}
	static OsEE_bool volatile stk_wrong = OSEE_FALSE;
	static OsEE_addr volatile old_sp = 0;

	static uint16_t volatile Task2_count;

	my_printf("Task2: %d\r\n", Task2_count);
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <FuncTask2+0x68>)
 8000d2c:	8819      	ldrh	r1, [r3, #0]
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	4818      	ldr	r0, [pc, #96]	; (8000d94 <FuncTask2+0x6c>)
 8000d32:	f7ff ff11 	bl	8000b58 <my_printf>

	HAL_Delay(HAL_DELAY_MS);
 8000d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3a:	f001 fe5d 	bl	80029f8 <HAL_Delay>

	HAL_Delay(HAL_DELAY_MS);
 8000d3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d42:	f001 fe59 	bl	80029f8 <HAL_Delay>

	osEE_CheckStackIntegrity();
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <FuncTask2+0x70>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b9c3      	cbnz	r3, 8000d7e <FuncTask2+0x56>
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <FuncTask2+0x74>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	b193      	cbz	r3, 8000d78 <FuncTask2+0x50>
 8000d52:	466b      	mov	r3, sp
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <FuncTask2+0x74>)
 8000d56:	6812      	ldr	r2, [r2, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d010      	beq.n	8000d7e <FuncTask2+0x56>
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <FuncTask2+0x70>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d66:	480e      	ldr	r0, [pc, #56]	; (8000da0 <FuncTask2+0x78>)
 8000d68:	f002 f980 	bl	800306c <HAL_GPIO_TogglePin>
 8000d6c:	f003 f9c2 	bl	80040f4 <DisableAllInterrupts>
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <FuncTask2+0x7c>)
 8000d72:	f7ff fef1 	bl	8000b58 <my_printf>
 8000d76:	e7fe      	b.n	8000d76 <FuncTask2+0x4e>
 8000d78:	466a      	mov	r2, sp
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <FuncTask2+0x74>)
 8000d7c:	601a      	str	r2, [r3, #0]

	++Task2_count;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <FuncTask2+0x68>)
 8000d80:	8813      	ldrh	r3, [r2, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	3301      	adds	r3, #1
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	8013      	strh	r3, [r2, #0]

	TerminateTask();
 8000d8a:	f003 f9f5 	bl	8004178 <TerminateTask>
}
 8000d8e:	bd08      	pop	{r3, pc}
 8000d90:	200104ae 	.word	0x200104ae
 8000d94:	080045b8 	.word	0x080045b8
 8000d98:	200104b8 	.word	0x200104b8
 8000d9c:	200104b0 	.word	0x200104b0
 8000da0:	40020c00 	.word	0x40020c00
 8000da4:	080045c4 	.word	0x080045c4

08000da8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000da8:	b500      	push	{lr}
 8000daa:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dac:	2300      	movs	r3, #0
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	9303      	str	r3, [sp, #12]
 8000db2:	9304      	str	r3, [sp, #16]
 8000db4:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dba:	4819      	ldr	r0, [pc, #100]	; (8000e20 <MX_TIM1_Init+0x78>)
 8000dbc:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <MX_TIM1_Init+0x7c>)
 8000dbe:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000dc0:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dca:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd0:	f002 fd1e 	bl	8003810 <HAL_TIM_Base_Init>
 8000dd4:	b9c0      	cbnz	r0, 8000e08 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ddc:	a902      	add	r1, sp, #8
 8000dde:	4810      	ldr	r0, [pc, #64]	; (8000e20 <MX_TIM1_Init+0x78>)
 8000de0:	f002 fd60 	bl	80038a4 <HAL_TIM_ConfigClockSource>
 8000de4:	b998      	cbnz	r0, 8000e0e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000de6:	2108      	movs	r1, #8
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_TIM1_Init+0x78>)
 8000dea:	f002 fd2b 	bl	8003844 <HAL_TIM_OnePulse_Init>
 8000dee:	b988      	cbnz	r0, 8000e14 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df8:	4669      	mov	r1, sp
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <MX_TIM1_Init+0x78>)
 8000dfc:	f002 fe30 	bl	8003a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	b958      	cbnz	r0, 8000e1a <MX_TIM1_Init+0x72>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e02:	b007      	add	sp, #28
 8000e04:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e08:	f7ff fd20 	bl	800084c <Error_Handler>
 8000e0c:	e7e3      	b.n	8000dd6 <MX_TIM1_Init+0x2e>
    Error_Handler();
 8000e0e:	f7ff fd1d 	bl	800084c <Error_Handler>
 8000e12:	e7e8      	b.n	8000de6 <MX_TIM1_Init+0x3e>
    Error_Handler();
 8000e14:	f7ff fd1a 	bl	800084c <Error_Handler>
 8000e18:	e7ea      	b.n	8000df0 <MX_TIM1_Init+0x48>
    Error_Handler();
 8000e1a:	f7ff fd17 	bl	800084c <Error_Handler>
}
 8000e1e:	e7f0      	b.n	8000e02 <MX_TIM1_Init+0x5a>
 8000e20:	2001051c 	.word	0x2001051c
 8000e24:	40010000 	.word	0x40010000

08000e28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e28:	b500      	push	{lr}
 8000e2a:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	9308      	str	r3, [sp, #32]
 8000e30:	9309      	str	r3, [sp, #36]	; 0x24
 8000e32:	930a      	str	r3, [sp, #40]	; 0x28
 8000e34:	930b      	str	r3, [sp, #44]	; 0x2c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e36:	9303      	str	r3, [sp, #12]
 8000e38:	9304      	str	r3, [sp, #16]
 8000e3a:	9305      	str	r3, [sp, #20]
 8000e3c:	9306      	str	r3, [sp, #24]
 8000e3e:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <MX_TIM2_Init+0x88>)
 8000e46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8000e4c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e54:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e5a:	f002 fcd9 	bl	8003810 <HAL_TIM_Base_Init>
 8000e5e:	b9d8      	cbnz	r0, 8000e98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e64:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e66:	a908      	add	r1, sp, #32
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_TIM2_Init+0x88>)
 8000e6a:	f002 fd1b 	bl	80038a4 <HAL_TIM_ConfigClockSource>
 8000e6e:	b9b0      	cbnz	r0, 8000e9e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000e70:	2304      	movs	r3, #4
 8000e72:	9303      	str	r3, [sp, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000e78:	a903      	add	r1, sp, #12
 8000e7a:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <MX_TIM2_Init+0x88>)
 8000e7c:	f002 fdc6 	bl	8003a0c <HAL_TIM_SlaveConfigSynchro>
 8000e80:	b980      	cbnz	r0, 8000ea4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e88:	a901      	add	r1, sp, #4
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <MX_TIM2_Init+0x88>)
 8000e8c:	f002 fde8 	bl	8003a60 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	b958      	cbnz	r0, 8000eaa <MX_TIM2_Init+0x82>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e92:	b00d      	add	sp, #52	; 0x34
 8000e94:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e98:	f7ff fcd8 	bl	800084c <Error_Handler>
 8000e9c:	e7e0      	b.n	8000e60 <MX_TIM2_Init+0x38>
    Error_Handler();
 8000e9e:	f7ff fcd5 	bl	800084c <Error_Handler>
 8000ea2:	e7e5      	b.n	8000e70 <MX_TIM2_Init+0x48>
    Error_Handler();
 8000ea4:	f7ff fcd2 	bl	800084c <Error_Handler>
 8000ea8:	e7eb      	b.n	8000e82 <MX_TIM2_Init+0x5a>
    Error_Handler();
 8000eaa:	f7ff fccf 	bl	800084c <Error_Handler>
}
 8000eae:	e7f0      	b.n	8000e92 <MX_TIM2_Init+0x6a>
 8000eb0:	2001055c 	.word	0x2001055c

08000eb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	4604      	mov	r4, r0

  if(tim_baseHandle->Instance==TIM1)
 8000eba:	6803      	ldr	r3, [r0, #0]
 8000ebc:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <HAL_TIM_Base_MspInit+0x88>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d004      	beq.n	8000ecc <HAL_TIM_Base_MspInit+0x18>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM2)
 8000ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec6:	d02c      	beq.n	8000f22 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8000ed4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000ed6:	f041 0101 	orr.w	r1, r1, #1
 8000eda:	6451      	str	r1, [r2, #68]	; 0x44
 8000edc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ede:	f002 0201 	and.w	r2, r2, #1
 8000ee2:	9200      	str	r2, [sp, #0]
 8000ee4:	9a00      	ldr	r2, [sp, #0]
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000ee6:	4816      	ldr	r0, [pc, #88]	; (8000f40 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee8:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_TIM_Base_MspInit+0x90>)
 8000eea:	6002      	str	r2, [r0, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000eec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000ef0:	6042      	str	r2, [r0, #4]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef2:	6083      	str	r3, [r0, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	60c3      	str	r3, [r0, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8000ef6:	6103      	str	r3, [r0, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000efc:	6142      	str	r2, [r0, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f02:	6182      	str	r2, [r0, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000f04:	61c3      	str	r3, [r0, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f06:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f0a:	6202      	str	r2, [r0, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0c:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000f0e:	f001 fe5b 	bl	8002bc8 <HAL_DMA_Init>
 8000f12:	b918      	cbnz	r0, 8000f1c <HAL_TIM_Base_MspInit+0x68>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000f14:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_TIM_Base_MspInit+0x8c>)
 8000f16:	6223      	str	r3, [r4, #32]
 8000f18:	639c      	str	r4, [r3, #56]	; 0x38
 8000f1a:	e7d5      	b.n	8000ec8 <HAL_TIM_Base_MspInit+0x14>
      Error_Handler();
 8000f1c:	f7ff fc96 	bl	800084c <Error_Handler>
 8000f20:	e7f8      	b.n	8000f14 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_TIM_Base_MspInit+0x94>)
 8000f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	9b01      	ldr	r3, [sp, #4]
}
 8000f3a:	e7c5      	b.n	8000ec8 <HAL_TIM_Base_MspInit+0x14>
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	200104bc 	.word	0x200104bc
 8000f44:	40026488 	.word	0x40026488
 8000f48:	40023800 	.word	0x40023800

08000f4c <MX_USART2_Init>:
//     HAL_UART_Transmit(&husart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
//     return ch;
// }

void MX_USART2_Init(void)
{
 8000f4c:	b508      	push	{r3, lr}
    husart2.Instance         = USART2;
 8000f4e:	480a      	ldr	r0, [pc, #40]	; (8000f78 <MX_USART2_Init+0x2c>)
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MX_USART2_Init+0x30>)
 8000f52:	6003      	str	r3, [r0, #0]
    husart2.Init.BaudRate    = 115200;
 8000f54:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f58:	6043      	str	r3, [r0, #4]
    husart2.Init.Mode        = UART_MODE_TX_RX;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	6143      	str	r3, [r0, #20]
    husart2.Init.WordLength  = UART_WORDLENGTH_8B;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	6083      	str	r3, [r0, #8]
    husart2.Init.StopBits    = UART_STOPBITS_1;
 8000f62:	60c3      	str	r3, [r0, #12]
    husart2.Init.Parity      = UART_PARITY_NONE;
 8000f64:	6103      	str	r3, [r0, #16]
    husart2.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8000f66:	6183      	str	r3, [r0, #24]
    husart2.Init.OverSampling= UART_OVERSAMPLING_16;
 8000f68:	61c3      	str	r3, [r0, #28]

    if (HAL_UART_Init(&husart2) != HAL_OK)
 8000f6a:	f002 ff21 	bl	8003db0 <HAL_UART_Init>
 8000f6e:	b900      	cbnz	r0, 8000f72 <MX_USART2_Init+0x26>
    {
    	Error_Handler();
    }
}
 8000f70:	bd08      	pop	{r3, pc}
    	Error_Handler();
 8000f72:	f7ff fc6b 	bl	800084c <Error_Handler>
}
 8000f76:	e7fb      	b.n	8000f70 <MX_USART2_Init+0x24>
 8000f78:	2001059c 	.word	0x2001059c
 8000f7c:	40004400 	.word	0x40004400

08000f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f80:	b500      	push	{lr}
 8000f82:	b089      	sub	sp, #36	; 0x24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	2300      	movs	r3, #0
 8000f86:	9303      	str	r3, [sp, #12]
 8000f88:	9304      	str	r3, [sp, #16]
 8000f8a:	9305      	str	r3, [sp, #20]
 8000f8c:	9306      	str	r3, [sp, #24]
 8000f8e:	9307      	str	r3, [sp, #28]

    if(uartHandle->Instance == USART2)
 8000f90:	6802      	ldr	r2, [r0, #0]
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_MspInit+0x68>)
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d002      	beq.n	8000f9e <HAL_UART_MspInit+0x1e>
        GPIO_InitStruct.Pull      = GPIO_NOPULL;
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    }
}
 8000f98:	b009      	add	sp, #36	; 0x24
 8000f9a:	f85d fb04 	ldr.w	pc, [sp], #4
        __HAL_RCC_USART2_CLK_ENABLE();
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	9101      	str	r1, [sp, #4]
 8000fa2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000fa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fac:	641a      	str	r2, [r3, #64]	; 0x40
 8000fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fb4:	9201      	str	r2, [sp, #4]
 8000fb6:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	9102      	str	r1, [sp, #8]
 8000fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbc:	f042 0201 	orr.w	r2, r2, #1
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pin       = GPIO_PIN_2 | GPIO_PIN_3;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	9306      	str	r3, [sp, #24]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	a903      	add	r1, sp, #12
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <HAL_UART_MspInit+0x6c>)
 8000fe0:	f001 ff5a 	bl	8002e98 <HAL_GPIO_Init>
}
 8000fe4:	e7d8      	b.n	8000f98 <HAL_UART_MspInit+0x18>
 8000fe6:	bf00      	nop
 8000fe8:	40004400 	.word	0x40004400
 8000fec:	40020000 	.word	0x40020000

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ff4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ff6:	e003      	b.n	8001000 <LoopCopyDataInit>

08000ff8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ffa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ffc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ffe:	3104      	adds	r1, #4

08001000 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001000:	480b      	ldr	r0, [pc, #44]	; (8001030 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001004:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001006:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001008:	d3f6      	bcc.n	8000ff8 <CopyDataInit>
  ldr  r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800100c:	e002      	b.n	8001014 <LoopFillZerobss>

0800100e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800100e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001010:	f842 3b04 	str.w	r3, [r2], #4

08001014 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001016:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001018:	d3f9      	bcc.n	800100e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800101a:	f003 f863 	bl	80040e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f001 fb55 	bl	80026cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fc73 	bl	800090c <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800102c:	080048d4 	.word	0x080048d4
  ldr  r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001034:	20000490 	.word	0x20000490
  ldr  r2, =_sbss
 8001038:	20000490 	.word	0x20000490
  ldr  r3, = _ebss
 800103c:	20010a18 	.word	0x20010a18

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>

08001042 <mpi_get_digit>:
/*
 * Convert an ASCII character to digit value
 */
static int mpi_get_digit(mbedtls_mpi_uint *d, int radix, char c)
{
    *d = 255;
 8001042:	23ff      	movs	r3, #255	; 0xff
 8001044:	6003      	str	r3, [r0, #0]

    if (c >= 0x30 && c <= 0x39) {
 8001046:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b09      	cmp	r3, #9
 800104e:	d802      	bhi.n	8001056 <mpi_get_digit+0x14>
        *d = c - 0x30;
 8001050:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001054:	6003      	str	r3, [r0, #0]
    }
    if (c >= 0x41 && c <= 0x46) {
 8001056:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b05      	cmp	r3, #5
 800105e:	d802      	bhi.n	8001066 <mpi_get_digit+0x24>
        *d = c - 0x37;
 8001060:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
 8001064:	6003      	str	r3, [r0, #0]
    }
    if (c >= 0x61 && c <= 0x66) {
 8001066:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b05      	cmp	r3, #5
 800106e:	d801      	bhi.n	8001074 <mpi_get_digit+0x32>
        *d = c - 0x57;
 8001070:	3a57      	subs	r2, #87	; 0x57
 8001072:	6002      	str	r2, [r0, #0]
    }

    if (*d >= (mbedtls_mpi_uint) radix) {
 8001074:	6803      	ldr	r3, [r0, #0]
 8001076:	428b      	cmp	r3, r1
 8001078:	d201      	bcs.n	800107e <mpi_get_digit+0x3c>
        return MBEDTLS_ERR_MPI_INVALID_CHARACTER;
    }

    return 0;
 800107a:	2000      	movs	r0, #0
 800107c:	4770      	bx	lr
        return MBEDTLS_ERR_MPI_INVALID_CHARACTER;
 800107e:	f06f 0005 	mvn.w	r0, #5
}
 8001082:	4770      	bx	lr

08001084 <mbedtls_int_div_int>:
 */
static mbedtls_mpi_uint mbedtls_int_div_int(mbedtls_mpi_uint u1,
                                            mbedtls_mpi_uint u0,
                                            mbedtls_mpi_uint d,
                                            mbedtls_mpi_uint *r)
{
 8001084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001086:	4684      	mov	ip, r0
 8001088:	460c      	mov	r4, r1
 800108a:	461d      	mov	r5, r3
#endif

    /*
     * Check for overflow
     */
    if (0 == d || u1 >= d) {
 800108c:	4616      	mov	r6, r2
 800108e:	b1a2      	cbz	r2, 80010ba <mbedtls_int_div_int+0x36>
 8001090:	4282      	cmp	r2, r0
 8001092:	d912      	bls.n	80010ba <mbedtls_int_div_int+0x36>

        return ~(mbedtls_mpi_uint) 0u;
    }

#if defined(MBEDTLS_HAVE_UDBL)
    dividend  = (mbedtls_t_udbl) u1 << biL;
 8001094:	2700      	movs	r7, #0
    dividend |= (mbedtls_t_udbl) u0;
    quotient = dividend / d;
 8001096:	463b      	mov	r3, r7
 8001098:	4608      	mov	r0, r1
 800109a:	4661      	mov	r1, ip
 800109c:	f7ff f9be 	bl	800041c <__aeabi_uldivmod>
    if (quotient > ((mbedtls_t_udbl) 1 << biL) - 1) {
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a4:	4283      	cmp	r3, r0
 80010a6:	eb77 0301 	sbcs.w	r3, r7, r1
 80010aa:	d201      	bcs.n	80010b0 <mbedtls_int_div_int+0x2c>
        quotient = ((mbedtls_t_udbl) 1 << biL) - 1;
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    if (r != NULL) {
 80010b0:	b115      	cbz	r5, 80010b8 <mbedtls_int_div_int+0x34>
        *r = (mbedtls_mpi_uint) (dividend - (quotient * d));
 80010b2:	fb00 4416 	mls	r4, r0, r6, r4
 80010b6:	602c      	str	r4, [r5, #0]

    quotient = q1 * radix + q0;

    return quotient;
#endif
}
 80010b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (r != NULL) {
 80010ba:	b115      	cbz	r5, 80010c2 <mbedtls_int_div_int+0x3e>
            *r = ~(mbedtls_mpi_uint) 0u;
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c0:	602b      	str	r3, [r5, #0]
        return ~(mbedtls_mpi_uint) 0u;
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010c6:	e7f7      	b.n	80010b8 <mbedtls_int_div_int+0x34>

080010c8 <mbedtls_mpi_init>:
    X->s = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	8083      	strh	r3, [r0, #4]
    X->n = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	80c3      	strh	r3, [r0, #6]
    X->p = NULL;
 80010d0:	6003      	str	r3, [r0, #0]
}
 80010d2:	4770      	bx	lr

080010d4 <mbedtls_mpi_free>:
{
 80010d4:	b510      	push	{r4, lr}
    if (X == NULL) {
 80010d6:	4604      	mov	r4, r0
 80010d8:	b150      	cbz	r0, 80010f0 <mbedtls_mpi_free+0x1c>
    if (X->p != NULL) {
 80010da:	6800      	ldr	r0, [r0, #0]
 80010dc:	b118      	cbz	r0, 80010e6 <mbedtls_mpi_free+0x12>
        mbedtls_mpi_zeroize_and_free(X->p, X->n);
 80010de:	88e1      	ldrh	r1, [r4, #6]
 80010e0:	0089      	lsls	r1, r1, #2
 80010e2:	f001 fad3 	bl	800268c <mbedtls_zeroize_and_free>
    X->s = 1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	80a3      	strh	r3, [r4, #4]
    X->n = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	80e3      	strh	r3, [r4, #6]
    X->p = NULL;
 80010ee:	6023      	str	r3, [r4, #0]
}
 80010f0:	bd10      	pop	{r4, pc}

080010f2 <mbedtls_mpi_grow>:
{
 80010f2:	b570      	push	{r4, r5, r6, lr}
 80010f4:	4605      	mov	r5, r0
 80010f6:	460c      	mov	r4, r1
    if (nblimbs > MBEDTLS_MPI_MAX_LIMBS) {
 80010f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80010fc:	4299      	cmp	r1, r3
 80010fe:	d819      	bhi.n	8001134 <mbedtls_mpi_grow+0x42>
    if (X->n < nblimbs) {
 8001100:	88c3      	ldrh	r3, [r0, #6]
 8001102:	428b      	cmp	r3, r1
 8001104:	d301      	bcc.n	800110a <mbedtls_mpi_grow+0x18>
    return 0;
 8001106:	2000      	movs	r0, #0
}
 8001108:	bd70      	pop	{r4, r5, r6, pc}
        if ((p = (mbedtls_mpi_uint *) mbedtls_calloc(nblimbs, ciL)) == NULL) {
 800110a:	2104      	movs	r1, #4
 800110c:	4620      	mov	r0, r4
 800110e:	f001 fa97 	bl	8002640 <mbedtls_calloc>
 8001112:	4606      	mov	r6, r0
 8001114:	b188      	cbz	r0, 800113a <mbedtls_mpi_grow+0x48>
        if (X->p != NULL) {
 8001116:	6829      	ldr	r1, [r5, #0]
 8001118:	b141      	cbz	r1, 800112c <mbedtls_mpi_grow+0x3a>
            memcpy(p, X->p, X->n * ciL);
 800111a:	88ea      	ldrh	r2, [r5, #6]
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	f7ff f86f 	bl	8000200 <memcpy>
            mbedtls_mpi_zeroize_and_free(X->p, X->n);
 8001122:	88e9      	ldrh	r1, [r5, #6]
 8001124:	0089      	lsls	r1, r1, #2
 8001126:	6828      	ldr	r0, [r5, #0]
 8001128:	f001 fab0 	bl	800268c <mbedtls_zeroize_and_free>
        X->n = (unsigned short) nblimbs;
 800112c:	80ec      	strh	r4, [r5, #6]
        X->p = p;
 800112e:	602e      	str	r6, [r5, #0]
    return 0;
 8001130:	2000      	movs	r0, #0
 8001132:	e7e9      	b.n	8001108 <mbedtls_mpi_grow+0x16>
        return MBEDTLS_ERR_MPI_ALLOC_FAILED;
 8001134:	f06f 000f 	mvn.w	r0, #15
 8001138:	e7e6      	b.n	8001108 <mbedtls_mpi_grow+0x16>
            return MBEDTLS_ERR_MPI_ALLOC_FAILED;
 800113a:	f06f 000f 	mvn.w	r0, #15
 800113e:	e7e3      	b.n	8001108 <mbedtls_mpi_grow+0x16>

08001140 <mbedtls_mpi_copy>:
{
 8001140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001142:	4606      	mov	r6, r0
 8001144:	460d      	mov	r5, r1
    if (X == Y) {
 8001146:	4288      	cmp	r0, r1
 8001148:	d034      	beq.n	80011b4 <mbedtls_mpi_copy+0x74>
    if (Y->n == 0) {
 800114a:	88cb      	ldrh	r3, [r1, #6]
 800114c:	b10b      	cbz	r3, 8001152 <mbedtls_mpi_copy+0x12>
    for (i = Y->n - 1; i > 0; i--) {
 800114e:	3b01      	subs	r3, #1
 8001150:	e00c      	b.n	800116c <mbedtls_mpi_copy+0x2c>
        if (X->n != 0) {
 8001152:	88c2      	ldrh	r2, [r0, #6]
 8001154:	b90a      	cbnz	r2, 800115a <mbedtls_mpi_copy+0x1a>
        return 0;
 8001156:	2700      	movs	r7, #0
 8001158:	e02a      	b.n	80011b0 <mbedtls_mpi_copy+0x70>
            X->s = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	8083      	strh	r3, [r0, #4]
            memset(X->p, 0, X->n * ciL);
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	2100      	movs	r1, #0
 8001162:	6800      	ldr	r0, [r0, #0]
 8001164:	f001 fada 	bl	800271c <memset>
 8001168:	e7f5      	b.n	8001156 <mbedtls_mpi_copy+0x16>
    for (i = Y->n - 1; i > 0; i--) {
 800116a:	3b01      	subs	r3, #1
 800116c:	b123      	cbz	r3, 8001178 <mbedtls_mpi_copy+0x38>
        if (Y->p[i] != 0) {
 800116e:	682a      	ldr	r2, [r5, #0]
 8001170:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001174:	2a00      	cmp	r2, #0
 8001176:	d0f8      	beq.n	800116a <mbedtls_mpi_copy+0x2a>
    i++;
 8001178:	1c5c      	adds	r4, r3, #1
    X->s = Y->s;
 800117a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800117e:	80b3      	strh	r3, [r6, #4]
    if (X->n < i) {
 8001180:	88f2      	ldrh	r2, [r6, #6]
 8001182:	42a2      	cmp	r2, r4
 8001184:	d206      	bcs.n	8001194 <mbedtls_mpi_copy+0x54>
        MBEDTLS_MPI_CHK(mbedtls_mpi_grow(X, i));
 8001186:	4621      	mov	r1, r4
 8001188:	4630      	mov	r0, r6
 800118a:	f7ff ffb2 	bl	80010f2 <mbedtls_mpi_grow>
 800118e:	4607      	mov	r7, r0
 8001190:	b148      	cbz	r0, 80011a6 <mbedtls_mpi_copy+0x66>
 8001192:	e00d      	b.n	80011b0 <mbedtls_mpi_copy+0x70>
        memset(X->p + i, 0, (X->n - i) * ciL);
 8001194:	6830      	ldr	r0, [r6, #0]
 8001196:	1b12      	subs	r2, r2, r4
 8001198:	0092      	lsls	r2, r2, #2
 800119a:	2100      	movs	r1, #0
 800119c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80011a0:	f001 fabc 	bl	800271c <memset>
    int ret = 0;
 80011a4:	2700      	movs	r7, #0
    memcpy(X->p, Y->p, i * ciL);
 80011a6:	00a2      	lsls	r2, r4, #2
 80011a8:	6829      	ldr	r1, [r5, #0]
 80011aa:	6830      	ldr	r0, [r6, #0]
 80011ac:	f7ff f828 	bl	8000200 <memcpy>
}
 80011b0:	4638      	mov	r0, r7
 80011b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 80011b4:	2700      	movs	r7, #0
 80011b6:	e7fb      	b.n	80011b0 <mbedtls_mpi_copy+0x70>

080011b8 <mbedtls_mpi_lset>:
{
 80011b8:	b570      	push	{r4, r5, r6, lr}
 80011ba:	4605      	mov	r5, r0
 80011bc:	460c      	mov	r4, r1
    MBEDTLS_MPI_CHK(mbedtls_mpi_grow(X, 1));
 80011be:	2101      	movs	r1, #1
 80011c0:	f7ff ff97 	bl	80010f2 <mbedtls_mpi_grow>
 80011c4:	4606      	mov	r6, r0
 80011c6:	b108      	cbz	r0, 80011cc <mbedtls_mpi_lset+0x14>
}
 80011c8:	4630      	mov	r0, r6
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
    memset(X->p, 0, X->n * ciL);
 80011cc:	88ea      	ldrh	r2, [r5, #6]
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	2100      	movs	r1, #0
 80011d2:	6828      	ldr	r0, [r5, #0]
 80011d4:	f001 faa2 	bl	800271c <memset>
    X->p[0] = mpi_sint_abs(z);
 80011d8:	682b      	ldr	r3, [r5, #0]
    if (z >= 0) {
 80011da:	2c00      	cmp	r4, #0
 80011dc:	da08      	bge.n	80011f0 <mbedtls_mpi_lset+0x38>
    return (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z;
 80011de:	4262      	negs	r2, r4
    X->p[0] = mpi_sint_abs(z);
 80011e0:	601a      	str	r2, [r3, #0]
    X->s    = TO_SIGN(z);
 80011e2:	0fe4      	lsrs	r4, r4, #31
 80011e4:	ebc4 34c4 	rsb	r4, r4, r4, lsl #15
 80011e8:	0064      	lsls	r4, r4, #1
 80011ea:	3401      	adds	r4, #1
 80011ec:	80ac      	strh	r4, [r5, #4]
    return ret;
 80011ee:	e7eb      	b.n	80011c8 <mbedtls_mpi_lset+0x10>
        return z;
 80011f0:	4622      	mov	r2, r4
 80011f2:	e7f5      	b.n	80011e0 <mbedtls_mpi_lset+0x28>

080011f4 <mbedtls_mpi_get_bit>:
    if (X->n * biL <= pos) {
 80011f4:	88c3      	ldrh	r3, [r0, #6]
 80011f6:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 80011fa:	d20a      	bcs.n	8001212 <mbedtls_mpi_get_bit+0x1e>
    return (X->p[pos / biL] >> (pos % biL)) & 0x01;
 80011fc:	6803      	ldr	r3, [r0, #0]
 80011fe:	094a      	lsrs	r2, r1, #5
 8001200:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001204:	f001 011f 	and.w	r1, r1, #31
 8001208:	fa20 f101 	lsr.w	r1, r0, r1
 800120c:	f001 0001 	and.w	r0, r1, #1
 8001210:	4770      	bx	lr
        return 0;
 8001212:	2000      	movs	r0, #0
}
 8001214:	4770      	bx	lr

08001216 <mbedtls_mpi_lsb>:
    for (i = 0; i < X->n; i++) {
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <mbedtls_mpi_lsb+0x6>
 800121a:	3301      	adds	r3, #1
 800121c:	88c2      	ldrh	r2, [r0, #6]
 800121e:	429a      	cmp	r2, r3
 8001220:	d90b      	bls.n	800123a <mbedtls_mpi_lsb+0x24>
        if (X->p[i] != 0) {
 8001222:	6802      	ldr	r2, [r0, #0]
 8001224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001228:	2a00      	cmp	r2, #0
 800122a:	d0f6      	beq.n	800121a <mbedtls_mpi_lsb+0x4>
            return i * biL + mbedtls_mpi_uint_ctz(X->p[i]);
 800122c:	fa92 f2a2 	rbit	r2, r2
 8001230:	fab2 f282 	clz	r2, r2
 8001234:	eb02 1043 	add.w	r0, r2, r3, lsl #5
 8001238:	4770      	bx	lr
    return 0;
 800123a:	2000      	movs	r0, #0
}
 800123c:	4770      	bx	lr

0800123e <mbedtls_mpi_bitlen>:
{
 800123e:	b508      	push	{r3, lr}
    return mbedtls_mpi_core_bitlen(X->p, X->n);
 8001240:	88c1      	ldrh	r1, [r0, #6]
 8001242:	6800      	ldr	r0, [r0, #0]
 8001244:	f000 fef9 	bl	800203a <mbedtls_mpi_core_bitlen>
}
 8001248:	bd08      	pop	{r3, pc}

0800124a <mbedtls_mpi_shift_l>:
{
 800124a:	b538      	push	{r3, r4, r5, lr}
 800124c:	4604      	mov	r4, r0
 800124e:	460d      	mov	r5, r1
    i = mbedtls_mpi_bitlen(X) + count;
 8001250:	f7ff fff5 	bl	800123e <mbedtls_mpi_bitlen>
 8001254:	4428      	add	r0, r5
    if (X->n * biL < i) {
 8001256:	88e3      	ldrh	r3, [r4, #6]
 8001258:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
 800125c:	d909      	bls.n	8001272 <mbedtls_mpi_shift_l+0x28>
        MBEDTLS_MPI_CHK(mbedtls_mpi_grow(X, BITS_TO_LIMBS(i)));
 800125e:	f010 011f 	ands.w	r1, r0, #31
 8001262:	bf18      	it	ne
 8001264:	2101      	movne	r1, #1
 8001266:	eb01 1150 	add.w	r1, r1, r0, lsr #5
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff ff41 	bl	80010f2 <mbedtls_mpi_grow>
 8001270:	b928      	cbnz	r0, 800127e <mbedtls_mpi_shift_l+0x34>
    mbedtls_mpi_core_shift_l(X->p, X->n, count);
 8001272:	462a      	mov	r2, r5
 8001274:	88e1      	ldrh	r1, [r4, #6]
 8001276:	6820      	ldr	r0, [r4, #0]
 8001278:	f000 ff33 	bl	80020e2 <mbedtls_mpi_core_shift_l>
    ret = 0;
 800127c:	2000      	movs	r0, #0
}
 800127e:	bd38      	pop	{r3, r4, r5, pc}

08001280 <mbedtls_mpi_shift_r>:
{
 8001280:	b508      	push	{r3, lr}
 8001282:	460a      	mov	r2, r1
    if (X->n != 0) {
 8001284:	88c1      	ldrh	r1, [r0, #6]
 8001286:	b909      	cbnz	r1, 800128c <mbedtls_mpi_shift_r+0xc>
}
 8001288:	2000      	movs	r0, #0
 800128a:	bd08      	pop	{r3, pc}
        mbedtls_mpi_core_shift_r(X->p, X->n, count);
 800128c:	6800      	ldr	r0, [r0, #0]
 800128e:	f000 fee9 	bl	8002064 <mbedtls_mpi_core_shift_r>
 8001292:	e7f9      	b.n	8001288 <mbedtls_mpi_shift_r+0x8>

08001294 <mbedtls_mpi_cmp_abs>:
{
 8001294:	b410      	push	{r4}
    for (i = X->n; i > 0; i--) {
 8001296:	88c3      	ldrh	r3, [r0, #6]
 8001298:	b143      	cbz	r3, 80012ac <mbedtls_mpi_cmp_abs+0x18>
        if (X->p[i - 1] != 0) {
 800129a:	6804      	ldr	r4, [r0, #0]
 800129c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80012a0:	3a01      	subs	r2, #1
 80012a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80012a6:	b90a      	cbnz	r2, 80012ac <mbedtls_mpi_cmp_abs+0x18>
    for (i = X->n; i > 0; i--) {
 80012a8:	3b01      	subs	r3, #1
 80012aa:	e7f5      	b.n	8001298 <mbedtls_mpi_cmp_abs+0x4>
    for (j = Y->n; j > 0; j--) {
 80012ac:	88ca      	ldrh	r2, [r1, #6]
 80012ae:	b14a      	cbz	r2, 80012c4 <mbedtls_mpi_cmp_abs+0x30>
        if (Y->p[j - 1] != 0) {
 80012b0:	680c      	ldr	r4, [r1, #0]
 80012b2:	f102 4c80 	add.w	ip, r2, #1073741824	; 0x40000000
 80012b6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80012ba:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
 80012be:	b90c      	cbnz	r4, 80012c4 <mbedtls_mpi_cmp_abs+0x30>
    for (j = Y->n; j > 0; j--) {
 80012c0:	3a01      	subs	r2, #1
 80012c2:	e7f4      	b.n	80012ae <mbedtls_mpi_cmp_abs+0x1a>
    if (i > j) {
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d812      	bhi.n	80012ee <mbedtls_mpi_cmp_abs+0x5a>
    if (j > i) {
 80012c8:	d314      	bcc.n	80012f4 <mbedtls_mpi_cmp_abs+0x60>
    for (; i > 0; i--) {
 80012ca:	b173      	cbz	r3, 80012ea <mbedtls_mpi_cmp_abs+0x56>
        if (X->p[i - 1] > Y->p[i - 1]) {
 80012cc:	6804      	ldr	r4, [r0, #0]
 80012ce:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80012d2:	3a01      	subs	r2, #1
 80012d4:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 80012d8:	f8d1 c000 	ldr.w	ip, [r1]
 80012dc:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80012e0:	4294      	cmp	r4, r2
 80012e2:	d80a      	bhi.n	80012fa <mbedtls_mpi_cmp_abs+0x66>
        if (X->p[i - 1] < Y->p[i - 1]) {
 80012e4:	d30b      	bcc.n	80012fe <mbedtls_mpi_cmp_abs+0x6a>
    for (; i > 0; i--) {
 80012e6:	3b01      	subs	r3, #1
 80012e8:	e7ef      	b.n	80012ca <mbedtls_mpi_cmp_abs+0x36>
    return 0;
 80012ea:	2000      	movs	r0, #0
 80012ec:	e000      	b.n	80012f0 <mbedtls_mpi_cmp_abs+0x5c>
        return 1;
 80012ee:	2001      	movs	r0, #1
}
 80012f0:	bc10      	pop	{r4}
 80012f2:	4770      	bx	lr
        return -1;
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f8:	e7fa      	b.n	80012f0 <mbedtls_mpi_cmp_abs+0x5c>
            return 1;
 80012fa:	2001      	movs	r0, #1
 80012fc:	e7f8      	b.n	80012f0 <mbedtls_mpi_cmp_abs+0x5c>
            return -1;
 80012fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001302:	e7f5      	b.n	80012f0 <mbedtls_mpi_cmp_abs+0x5c>

08001304 <mbedtls_mpi_cmp_mpi>:
{
 8001304:	b510      	push	{r4, lr}
    for (i = X->n; i > 0; i--) {
 8001306:	88c3      	ldrh	r3, [r0, #6]
 8001308:	b143      	cbz	r3, 800131c <mbedtls_mpi_cmp_mpi+0x18>
        if (X->p[i - 1] != 0) {
 800130a:	6804      	ldr	r4, [r0, #0]
 800130c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8001310:	3a01      	subs	r2, #1
 8001312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001316:	b90a      	cbnz	r2, 800131c <mbedtls_mpi_cmp_mpi+0x18>
    for (i = X->n; i > 0; i--) {
 8001318:	3b01      	subs	r3, #1
 800131a:	e7f5      	b.n	8001308 <mbedtls_mpi_cmp_mpi+0x4>
    for (j = Y->n; j > 0; j--) {
 800131c:	88ca      	ldrh	r2, [r1, #6]
 800131e:	b14a      	cbz	r2, 8001334 <mbedtls_mpi_cmp_mpi+0x30>
        if (Y->p[j - 1] != 0) {
 8001320:	680c      	ldr	r4, [r1, #0]
 8001322:	f102 4c80 	add.w	ip, r2, #1073741824	; 0x40000000
 8001326:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800132a:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
 800132e:	b90c      	cbnz	r4, 8001334 <mbedtls_mpi_cmp_mpi+0x30>
    for (j = Y->n; j > 0; j--) {
 8001330:	3a01      	subs	r2, #1
 8001332:	e7f4      	b.n	800131e <mbedtls_mpi_cmp_mpi+0x1a>
    if (i == 0 && j == 0) {
 8001334:	b903      	cbnz	r3, 8001338 <mbedtls_mpi_cmp_mpi+0x34>
 8001336:	b392      	cbz	r2, 800139e <mbedtls_mpi_cmp_mpi+0x9a>
    if (i > j) {
 8001338:	4293      	cmp	r3, r2
 800133a:	d822      	bhi.n	8001382 <mbedtls_mpi_cmp_mpi+0x7e>
    if (j > i) {
 800133c:	4293      	cmp	r3, r2
 800133e:	d323      	bcc.n	8001388 <mbedtls_mpi_cmp_mpi+0x84>
    if (X->s > 0 && Y->s < 0) {
 8001340:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 8001344:	f1bc 0f00 	cmp.w	ip, #0
 8001348:	dd03      	ble.n	8001352 <mbedtls_mpi_cmp_mpi+0x4e>
 800134a:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 800134e:	2a00      	cmp	r2, #0
 8001350:	db27      	blt.n	80013a2 <mbedtls_mpi_cmp_mpi+0x9e>
    if (Y->s > 0 && X->s < 0) {
 8001352:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8001356:	2a00      	cmp	r2, #0
 8001358:	dd02      	ble.n	8001360 <mbedtls_mpi_cmp_mpi+0x5c>
 800135a:	f1bc 0f00 	cmp.w	ip, #0
 800135e:	db22      	blt.n	80013a6 <mbedtls_mpi_cmp_mpi+0xa2>
    for (; i > 0; i--) {
 8001360:	b1db      	cbz	r3, 800139a <mbedtls_mpi_cmp_mpi+0x96>
        if (X->p[i - 1] > Y->p[i - 1]) {
 8001362:	6804      	ldr	r4, [r0, #0]
 8001364:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8001368:	3a01      	subs	r2, #1
 800136a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 800136e:	f8d1 e000 	ldr.w	lr, [r1]
 8001372:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8001376:	4294      	cmp	r4, r2
 8001378:	d80a      	bhi.n	8001390 <mbedtls_mpi_cmp_mpi+0x8c>
        if (X->p[i - 1] < Y->p[i - 1]) {
 800137a:	4294      	cmp	r4, r2
 800137c:	d30a      	bcc.n	8001394 <mbedtls_mpi_cmp_mpi+0x90>
    for (; i > 0; i--) {
 800137e:	3b01      	subs	r3, #1
 8001380:	e7ee      	b.n	8001360 <mbedtls_mpi_cmp_mpi+0x5c>
        return X->s;
 8001382:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
}
 8001386:	bd10      	pop	{r4, pc}
        return -Y->s;
 8001388:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
 800138c:	4240      	negs	r0, r0
 800138e:	e7fa      	b.n	8001386 <mbedtls_mpi_cmp_mpi+0x82>
            return X->s;
 8001390:	4660      	mov	r0, ip
 8001392:	e7f8      	b.n	8001386 <mbedtls_mpi_cmp_mpi+0x82>
            return -X->s;
 8001394:	f1cc 0000 	rsb	r0, ip, #0
 8001398:	e7f5      	b.n	8001386 <mbedtls_mpi_cmp_mpi+0x82>
    return 0;
 800139a:	2000      	movs	r0, #0
 800139c:	e7f3      	b.n	8001386 <mbedtls_mpi_cmp_mpi+0x82>
        return 0;
 800139e:	2000      	movs	r0, #0
 80013a0:	e7f1      	b.n	8001386 <mbedtls_mpi_cmp_mpi+0x82>
        return 1;
 80013a2:	2001      	movs	r0, #1
 80013a4:	e7ef      	b.n	8001386 <mbedtls_mpi_cmp_mpi+0x82>
        return -1;
 80013a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013aa:	e7ec      	b.n	8001386 <mbedtls_mpi_cmp_mpi+0x82>

080013ac <mbedtls_mpi_cmp_int>:
{
 80013ac:	b500      	push	{lr}
 80013ae:	b085      	sub	sp, #20
    if (z >= 0) {
 80013b0:	2900      	cmp	r1, #0
 80013b2:	da13      	bge.n	80013dc <mbedtls_mpi_cmp_int+0x30>
    return (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z;
 80013b4:	424b      	negs	r3, r1
    *p  = mpi_sint_abs(z);
 80013b6:	9301      	str	r3, [sp, #4]
    Y.s = TO_SIGN(z);
 80013b8:	0fc9      	lsrs	r1, r1, #31
 80013ba:	ebc1 31c1 	rsb	r1, r1, r1, lsl #15
 80013be:	0049      	lsls	r1, r1, #1
 80013c0:	3101      	adds	r1, #1
 80013c2:	f8ad 100c 	strh.w	r1, [sp, #12]
    Y.n = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f8ad 300e 	strh.w	r3, [sp, #14]
    Y.p = p;
 80013cc:	ab01      	add	r3, sp, #4
 80013ce:	9302      	str	r3, [sp, #8]
    return mbedtls_mpi_cmp_mpi(X, &Y);
 80013d0:	a902      	add	r1, sp, #8
 80013d2:	f7ff ff97 	bl	8001304 <mbedtls_mpi_cmp_mpi>
}
 80013d6:	b005      	add	sp, #20
 80013d8:	f85d fb04 	ldr.w	pc, [sp], #4
        return z;
 80013dc:	460b      	mov	r3, r1
 80013de:	e7ea      	b.n	80013b6 <mbedtls_mpi_cmp_int+0xa>

080013e0 <mbedtls_mpi_add_abs>:
{
 80013e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e4:	4606      	mov	r6, r0
 80013e6:	4615      	mov	r5, r2
    if (X == B) {
 80013e8:	4290      	cmp	r0, r2
 80013ea:	d013      	beq.n	8001414 <mbedtls_mpi_add_abs+0x34>
    if (X != A) {
 80013ec:	42b1      	cmp	r1, r6
 80013ee:	d004      	beq.n	80013fa <mbedtls_mpi_add_abs+0x1a>
        MBEDTLS_MPI_CHK(mbedtls_mpi_copy(X, A));
 80013f0:	4630      	mov	r0, r6
 80013f2:	f7ff fea5 	bl	8001140 <mbedtls_mpi_copy>
 80013f6:	4607      	mov	r7, r0
 80013f8:	b988      	cbnz	r0, 800141e <mbedtls_mpi_add_abs+0x3e>
    X->s = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	80b3      	strh	r3, [r6, #4]
    for (j = B->n; j > 0; j--) {
 80013fe:	88ec      	ldrh	r4, [r5, #6]
 8001400:	b15c      	cbz	r4, 800141a <mbedtls_mpi_add_abs+0x3a>
        if (B->p[j - 1] != 0) {
 8001402:	6829      	ldr	r1, [r5, #0]
 8001404:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8001408:	3b01      	subs	r3, #1
 800140a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800140e:	b923      	cbnz	r3, 800141a <mbedtls_mpi_add_abs+0x3a>
    for (j = B->n; j > 0; j--) {
 8001410:	3c01      	subs	r4, #1
 8001412:	e7f5      	b.n	8001400 <mbedtls_mpi_add_abs+0x20>
        const mbedtls_mpi *T = A; A = X; B = T;
 8001414:	460d      	mov	r5, r1
 8001416:	4601      	mov	r1, r0
 8001418:	e7e8      	b.n	80013ec <mbedtls_mpi_add_abs+0xc>
    if (j == 0) {
 800141a:	b91c      	cbnz	r4, 8001424 <mbedtls_mpi_add_abs+0x44>
        return 0;
 800141c:	2700      	movs	r7, #0
}
 800141e:	4638      	mov	r0, r7
 8001420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK(mbedtls_mpi_grow(X, j));
 8001424:	4621      	mov	r1, r4
 8001426:	4630      	mov	r0, r6
 8001428:	f7ff fe63 	bl	80010f2 <mbedtls_mpi_grow>
 800142c:	4607      	mov	r7, r0
 800142e:	2800      	cmp	r0, #0
 8001430:	d1f5      	bne.n	800141e <mbedtls_mpi_add_abs+0x3e>
    p = X->p;
 8001432:	f8d6 8000 	ldr.w	r8, [r6]
    c = mbedtls_mpi_core_add(p, p, B->p, j);
 8001436:	4623      	mov	r3, r4
 8001438:	682a      	ldr	r2, [r5, #0]
 800143a:	4641      	mov	r1, r8
 800143c:	4640      	mov	r0, r8
 800143e:	f000 fe8a 	bl	8002156 <mbedtls_mpi_core_add>
 8001442:	4605      	mov	r5, r0
    p += j;
 8001444:	eb08 0284 	add.w	r2, r8, r4, lsl #2
    while (c != 0) {
 8001448:	e008      	b.n	800145c <mbedtls_mpi_add_abs+0x7c>
        *p += c; c = (*p < c); j++; p++;
 800144a:	6813      	ldr	r3, [r2, #0]
 800144c:	442b      	add	r3, r5
 800144e:	f842 3b04 	str.w	r3, [r2], #4
 8001452:	42ab      	cmp	r3, r5
 8001454:	bf2c      	ite	cs
 8001456:	2500      	movcs	r5, #0
 8001458:	2501      	movcc	r5, #1
 800145a:	3401      	adds	r4, #1
    while (c != 0) {
 800145c:	2d00      	cmp	r5, #0
 800145e:	d0de      	beq.n	800141e <mbedtls_mpi_add_abs+0x3e>
        if (j >= X->n) {
 8001460:	88f3      	ldrh	r3, [r6, #6]
 8001462:	42a3      	cmp	r3, r4
 8001464:	d8f1      	bhi.n	800144a <mbedtls_mpi_add_abs+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_grow(X, j + 1));
 8001466:	1c61      	adds	r1, r4, #1
 8001468:	4630      	mov	r0, r6
 800146a:	f7ff fe42 	bl	80010f2 <mbedtls_mpi_grow>
 800146e:	4607      	mov	r7, r0
 8001470:	2800      	cmp	r0, #0
 8001472:	d1d4      	bne.n	800141e <mbedtls_mpi_add_abs+0x3e>
            p = X->p + j;
 8001474:	6832      	ldr	r2, [r6, #0]
 8001476:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800147a:	e7e6      	b.n	800144a <mbedtls_mpi_add_abs+0x6a>

0800147c <mbedtls_mpi_sub_abs>:
{
 800147c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001480:	4606      	mov	r6, r0
 8001482:	460f      	mov	r7, r1
 8001484:	4615      	mov	r5, r2
    for (n = B->n; n > 0; n--) {
 8001486:	88d4      	ldrh	r4, [r2, #6]
 8001488:	e000      	b.n	800148c <mbedtls_mpi_sub_abs+0x10>
 800148a:	3c01      	subs	r4, #1
 800148c:	b13c      	cbz	r4, 800149e <mbedtls_mpi_sub_abs+0x22>
        if (B->p[n - 1] != 0) {
 800148e:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8001492:	3b01      	subs	r3, #1
 8001494:	682a      	ldr	r2, [r5, #0]
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f5      	beq.n	800148a <mbedtls_mpi_sub_abs+0xe>
    if (n > A->n) {
 800149e:	88f9      	ldrh	r1, [r7, #6]
 80014a0:	42a1      	cmp	r1, r4
 80014a2:	d33a      	bcc.n	800151a <mbedtls_mpi_sub_abs+0x9e>
    MBEDTLS_MPI_CHK(mbedtls_mpi_grow(X, A->n));
 80014a4:	4630      	mov	r0, r6
 80014a6:	f7ff fe24 	bl	80010f2 <mbedtls_mpi_grow>
 80014aa:	4680      	mov	r8, r0
 80014ac:	b9e0      	cbnz	r0, 80014e8 <mbedtls_mpi_sub_abs+0x6c>
    if (A->n > n && A != X) {
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	42a2      	cmp	r2, r4
 80014b2:	d90b      	bls.n	80014cc <mbedtls_mpi_sub_abs+0x50>
 80014b4:	42b7      	cmp	r7, r6
 80014b6:	d009      	beq.n	80014cc <mbedtls_mpi_sub_abs+0x50>
        memcpy(X->p + n, A->p + n, (A->n - n) * ciL);
 80014b8:	6830      	ldr	r0, [r6, #0]
 80014ba:	6839      	ldr	r1, [r7, #0]
 80014bc:	1b12      	subs	r2, r2, r4
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80014c4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80014c8:	f7fe fe9a 	bl	8000200 <memcpy>
    if (X->n > A->n) {
 80014cc:	88f2      	ldrh	r2, [r6, #6]
 80014ce:	88f8      	ldrh	r0, [r7, #6]
 80014d0:	4282      	cmp	r2, r0
 80014d2:	d80c      	bhi.n	80014ee <mbedtls_mpi_sub_abs+0x72>
    carry = mbedtls_mpi_core_sub(X->p, A->p, B->p, n);
 80014d4:	4623      	mov	r3, r4
 80014d6:	682a      	ldr	r2, [r5, #0]
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	6830      	ldr	r0, [r6, #0]
 80014dc:	f000 fe55 	bl	800218a <mbedtls_mpi_core_sub>
    if (carry != 0) {
 80014e0:	4602      	mov	r2, r0
 80014e2:	b968      	cbnz	r0, 8001500 <mbedtls_mpi_sub_abs+0x84>
    X->s = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	80b3      	strh	r3, [r6, #4]
}
 80014e8:	4640      	mov	r0, r8
 80014ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(X->p + A->n, 0, (X->n - A->n) * ciL);
 80014ee:	6833      	ldr	r3, [r6, #0]
 80014f0:	1a12      	subs	r2, r2, r0
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	2100      	movs	r1, #0
 80014f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80014fa:	f001 f90f 	bl	800271c <memset>
 80014fe:	e7e9      	b.n	80014d4 <mbedtls_mpi_sub_abs+0x58>
        carry = mbedtls_mpi_core_sub_int(X->p + n, X->p + n, carry, X->n - n);
 8001500:	6830      	ldr	r0, [r6, #0]
 8001502:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8001506:	88f3      	ldrh	r3, [r6, #6]
 8001508:	1b1b      	subs	r3, r3, r4
 800150a:	4601      	mov	r1, r0
 800150c:	f000 fece 	bl	80022ac <mbedtls_mpi_core_sub_int>
        if (carry != 0) {
 8001510:	2800      	cmp	r0, #0
 8001512:	d0e7      	beq.n	80014e4 <mbedtls_mpi_sub_abs+0x68>
            ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
 8001514:	f06f 0809 	mvn.w	r8, #9
    return ret;
 8001518:	e7e6      	b.n	80014e8 <mbedtls_mpi_sub_abs+0x6c>
        ret = MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
 800151a:	f06f 0809 	mvn.w	r8, #9
 800151e:	e7e3      	b.n	80014e8 <mbedtls_mpi_sub_abs+0x6c>

08001520 <add_sub_mpi>:
{
 8001520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001524:	4606      	mov	r6, r0
 8001526:	460c      	mov	r4, r1
 8001528:	4615      	mov	r5, r2
    s = A->s;
 800152a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
    if (A->s * B->s * flip_B < 0) {
 800152e:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8001532:	fb07 fc0c 	mul.w	ip, r7, ip
 8001536:	fb03 fc0c 	mul.w	ip, r3, ip
 800153a:	f1bc 0f00 	cmp.w	ip, #0
 800153e:	da1b      	bge.n	8001578 <add_sub_mpi+0x58>
        int cmp = mbedtls_mpi_cmp_abs(A, B);
 8001540:	4611      	mov	r1, r2
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fea6 	bl	8001294 <mbedtls_mpi_cmp_abs>
        if (cmp >= 0) {
 8001548:	f1b0 0800 	subs.w	r8, r0, #0
 800154c:	db0b      	blt.n	8001566 <add_sub_mpi+0x46>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_abs(X, A, B));
 800154e:	462a      	mov	r2, r5
 8001550:	4621      	mov	r1, r4
 8001552:	4630      	mov	r0, r6
 8001554:	f7ff ff92 	bl	800147c <mbedtls_mpi_sub_abs>
 8001558:	b990      	cbnz	r0, 8001580 <add_sub_mpi+0x60>
            X->s = cmp == 0 ? 1 : s;
 800155a:	f1b8 0f00 	cmp.w	r8, #0
 800155e:	d100      	bne.n	8001562 <add_sub_mpi+0x42>
 8001560:	2701      	movs	r7, #1
 8001562:	80b7      	strh	r7, [r6, #4]
 8001564:	e00c      	b.n	8001580 <add_sub_mpi+0x60>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_abs(X, B, A));
 8001566:	4622      	mov	r2, r4
 8001568:	4629      	mov	r1, r5
 800156a:	4630      	mov	r0, r6
 800156c:	f7ff ff86 	bl	800147c <mbedtls_mpi_sub_abs>
 8001570:	b930      	cbnz	r0, 8001580 <add_sub_mpi+0x60>
            X->s = -s;
 8001572:	427f      	negs	r7, r7
 8001574:	80b7      	strh	r7, [r6, #4]
 8001576:	e003      	b.n	8001580 <add_sub_mpi+0x60>
        MBEDTLS_MPI_CHK(mbedtls_mpi_add_abs(X, A, B));
 8001578:	f7ff ff32 	bl	80013e0 <mbedtls_mpi_add_abs>
 800157c:	b900      	cbnz	r0, 8001580 <add_sub_mpi+0x60>
        X->s = s;
 800157e:	80b7      	strh	r7, [r6, #4]
}
 8001580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001584 <mbedtls_mpi_add_mpi>:
{
 8001584:	b508      	push	{r3, lr}
    return add_sub_mpi(X, A, B, 1);
 8001586:	2301      	movs	r3, #1
 8001588:	f7ff ffca 	bl	8001520 <add_sub_mpi>
}
 800158c:	bd08      	pop	{r3, pc}

0800158e <mbedtls_mpi_sub_mpi>:
{
 800158e:	b508      	push	{r3, lr}
    return add_sub_mpi(X, A, B, -1);
 8001590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001594:	f7ff ffc4 	bl	8001520 <add_sub_mpi>
}
 8001598:	bd08      	pop	{r3, pc}

0800159a <mbedtls_mpi_add_int>:
{
 800159a:	b500      	push	{lr}
 800159c:	b085      	sub	sp, #20
    if (z >= 0) {
 800159e:	2a00      	cmp	r2, #0
 80015a0:	da13      	bge.n	80015ca <mbedtls_mpi_add_int+0x30>
    return (mbedtls_mpi_uint) 0 - (mbedtls_mpi_uint) z;
 80015a2:	4253      	negs	r3, r2
    p[0] = mpi_sint_abs(b);
 80015a4:	9301      	str	r3, [sp, #4]
    B.s = TO_SIGN(b);
 80015a6:	0fd2      	lsrs	r2, r2, #31
 80015a8:	ebc2 32c2 	rsb	r2, r2, r2, lsl #15
 80015ac:	0052      	lsls	r2, r2, #1
 80015ae:	3201      	adds	r2, #1
 80015b0:	f8ad 200c 	strh.w	r2, [sp, #12]
    B.n = 1;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f8ad 300e 	strh.w	r3, [sp, #14]
    B.p = p;
 80015ba:	ab01      	add	r3, sp, #4
 80015bc:	9302      	str	r3, [sp, #8]
    return mbedtls_mpi_add_mpi(X, A, &B);
 80015be:	aa02      	add	r2, sp, #8
 80015c0:	f7ff ffe0 	bl	8001584 <mbedtls_mpi_add_mpi>
}
 80015c4:	b005      	add	sp, #20
 80015c6:	f85d fb04 	ldr.w	pc, [sp], #4
        return z;
 80015ca:	4613      	mov	r3, r2
 80015cc:	e7ea      	b.n	80015a4 <mbedtls_mpi_add_int+0xa>

080015ce <mbedtls_mpi_mul_int>:
{
 80015ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	4606      	mov	r6, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4617      	mov	r7, r2
    size_t n = A->n;
 80015da:	88cc      	ldrh	r4, [r1, #6]
    while (n > 0 && A->p[n - 1] == 0) {
 80015dc:	e000      	b.n	80015e0 <mbedtls_mpi_mul_int+0x12>
        --n;
 80015de:	3c01      	subs	r4, #1
    while (n > 0 && A->p[n - 1] == 0) {
 80015e0:	b13c      	cbz	r4, 80015f2 <mbedtls_mpi_mul_int+0x24>
 80015e2:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80015e6:	3b01      	subs	r3, #1
 80015e8:	682a      	ldr	r2, [r5, #0]
 80015ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f5      	beq.n	80015de <mbedtls_mpi_mul_int+0x10>
    if (b == 0 || n == 0) {
 80015f2:	b107      	cbz	r7, 80015f6 <mbedtls_mpi_mul_int+0x28>
 80015f4:	b944      	cbnz	r4, 8001608 <mbedtls_mpi_mul_int+0x3a>
        return mbedtls_mpi_lset(X, 0);
 80015f6:	2100      	movs	r1, #0
 80015f8:	4630      	mov	r0, r6
 80015fa:	f7ff fddd 	bl	80011b8 <mbedtls_mpi_lset>
 80015fe:	4680      	mov	r8, r0
}
 8001600:	4640      	mov	r0, r8
 8001602:	b002      	add	sp, #8
 8001604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MBEDTLS_MPI_CHK(mbedtls_mpi_grow(X, n + 1));
 8001608:	1c61      	adds	r1, r4, #1
 800160a:	4630      	mov	r0, r6
 800160c:	f7ff fd71 	bl	80010f2 <mbedtls_mpi_grow>
 8001610:	4680      	mov	r8, r0
 8001612:	2800      	cmp	r0, #0
 8001614:	d1f4      	bne.n	8001600 <mbedtls_mpi_mul_int+0x32>
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(X, A));
 8001616:	4629      	mov	r1, r5
 8001618:	4630      	mov	r0, r6
 800161a:	f7ff fd91 	bl	8001140 <mbedtls_mpi_copy>
 800161e:	4680      	mov	r8, r0
 8001620:	2800      	cmp	r0, #0
 8001622:	d1ed      	bne.n	8001600 <mbedtls_mpi_mul_int+0x32>
    mbedtls_mpi_core_mla(X->p, X->n, A->p, n, b - 1);
 8001624:	3f01      	subs	r7, #1
 8001626:	9700      	str	r7, [sp, #0]
 8001628:	4623      	mov	r3, r4
 800162a:	682a      	ldr	r2, [r5, #0]
 800162c:	88f1      	ldrh	r1, [r6, #6]
 800162e:	6830      	ldr	r0, [r6, #0]
 8001630:	f000 fdc8 	bl	80021c4 <mbedtls_mpi_core_mla>
 8001634:	e7e4      	b.n	8001600 <mbedtls_mpi_mul_int+0x32>

08001636 <mbedtls_mpi_read_string>:
{
 8001636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	4607      	mov	r7, r0
 800163e:	460c      	mov	r4, r1
 8001640:	4691      	mov	r9, r2
    if (radix < 2 || radix > 16) {
 8001642:	1e8b      	subs	r3, r1, #2
 8001644:	2b0e      	cmp	r3, #14
 8001646:	f200 808c 	bhi.w	8001762 <mbedtls_mpi_read_string+0x12c>
    mbedtls_mpi_init(&T);
 800164a:	a801      	add	r0, sp, #4
 800164c:	f7ff fd3c 	bl	80010c8 <mbedtls_mpi_init>
    if (s[0] == 0) {
 8001650:	f899 3000 	ldrb.w	r3, [r9]
 8001654:	b30b      	cbz	r3, 800169a <mbedtls_mpi_read_string+0x64>
    if (s[0] == '-') {
 8001656:	2b2d      	cmp	r3, #45	; 0x2d
 8001658:	d024      	beq.n	80016a4 <mbedtls_mpi_read_string+0x6e>
    int sign = 1;
 800165a:	f04f 0a01 	mov.w	sl, #1
    slen = strlen(s);
 800165e:	4648      	mov	r0, r9
 8001660:	f7fe fe6e 	bl	8000340 <strlen>
 8001664:	4605      	mov	r5, r0
    if (radix == 16) {
 8001666:	2c10      	cmp	r4, #16
 8001668:	d148      	bne.n	80016fc <mbedtls_mpi_read_string+0xc6>
        if (slen > SIZE_MAX >> 2) {
 800166a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800166e:	d27b      	bcs.n	8001768 <mbedtls_mpi_read_string+0x132>
        n = BITS_TO_LIMBS(slen << 2);
 8001670:	0082      	lsls	r2, r0, #2
 8001672:	f3c0 03da 	ubfx	r3, r0, #3, #27
 8001676:	f012 0f1f 	tst.w	r2, #31
 800167a:	bf14      	ite	ne
 800167c:	2101      	movne	r1, #1
 800167e:	2100      	moveq	r1, #0
        MBEDTLS_MPI_CHK(mbedtls_mpi_grow(X, n));
 8001680:	4419      	add	r1, r3
 8001682:	4638      	mov	r0, r7
 8001684:	f7ff fd35 	bl	80010f2 <mbedtls_mpi_grow>
 8001688:	4606      	mov	r6, r0
 800168a:	b180      	cbz	r0, 80016ae <mbedtls_mpi_read_string+0x78>
    mbedtls_mpi_free(&T);
 800168c:	a801      	add	r0, sp, #4
 800168e:	f7ff fd21 	bl	80010d4 <mbedtls_mpi_free>
}
 8001692:	4630      	mov	r0, r6
 8001694:	b004      	add	sp, #16
 8001696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mbedtls_mpi_free(X);
 800169a:	4638      	mov	r0, r7
 800169c:	f7ff fd1a 	bl	80010d4 <mbedtls_mpi_free>
        return 0;
 80016a0:	2600      	movs	r6, #0
 80016a2:	e7f6      	b.n	8001692 <mbedtls_mpi_read_string+0x5c>
        ++s;
 80016a4:	f109 0901 	add.w	r9, r9, #1
        sign = -1;
 80016a8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80016ac:	e7d7      	b.n	800165e <mbedtls_mpi_read_string+0x28>
        MBEDTLS_MPI_CHK(mbedtls_mpi_lset(X, 0));
 80016ae:	2100      	movs	r1, #0
 80016b0:	4638      	mov	r0, r7
 80016b2:	f7ff fd81 	bl	80011b8 <mbedtls_mpi_lset>
 80016b6:	4606      	mov	r6, r0
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d1e7      	bne.n	800168c <mbedtls_mpi_read_string+0x56>
        for (i = slen, j = 0; i > 0; i--, j++) {
 80016bc:	f04f 0800 	mov.w	r8, #0
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	d042      	beq.n	800174a <mbedtls_mpi_read_string+0x114>
            MBEDTLS_MPI_CHK(mpi_get_digit(&d, radix, s[i - 1]));
 80016c4:	3d01      	subs	r5, #1
 80016c6:	f819 2005 	ldrb.w	r2, [r9, r5]
 80016ca:	4621      	mov	r1, r4
 80016cc:	a803      	add	r0, sp, #12
 80016ce:	f7ff fcb8 	bl	8001042 <mpi_get_digit>
 80016d2:	4606      	mov	r6, r0
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1d9      	bne.n	800168c <mbedtls_mpi_read_string+0x56>
            X->p[j / (2 * ciL)] |= d << ((j % (2 * ciL)) << 2);
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	ea4f 00d8 	mov.w	r0, r8, lsr #3
 80016de:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80016e2:	f002 021c 	and.w	r2, r2, #28
 80016e6:	9b03      	ldr	r3, [sp, #12]
 80016e8:	fa03 f202 	lsl.w	r2, r3, r2
 80016ec:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
        for (i = slen, j = 0; i > 0; i--, j++) {
 80016f6:	f108 0801 	add.w	r8, r8, #1
 80016fa:	e7e1      	b.n	80016c0 <mbedtls_mpi_read_string+0x8a>
        MBEDTLS_MPI_CHK(mbedtls_mpi_lset(X, 0));
 80016fc:	2100      	movs	r1, #0
 80016fe:	4638      	mov	r0, r7
 8001700:	f7ff fd5a 	bl	80011b8 <mbedtls_mpi_lset>
 8001704:	4606      	mov	r6, r0
 8001706:	2800      	cmp	r0, #0
 8001708:	d1c0      	bne.n	800168c <mbedtls_mpi_read_string+0x56>
        for (i = 0; i < slen; i++) {
 800170a:	f04f 0800 	mov.w	r8, #0
 800170e:	45a8      	cmp	r8, r5
 8001710:	d21b      	bcs.n	800174a <mbedtls_mpi_read_string+0x114>
            MBEDTLS_MPI_CHK(mpi_get_digit(&d, radix, s[i]));
 8001712:	f819 2008 	ldrb.w	r2, [r9, r8]
 8001716:	4621      	mov	r1, r4
 8001718:	a803      	add	r0, sp, #12
 800171a:	f7ff fc92 	bl	8001042 <mpi_get_digit>
 800171e:	4606      	mov	r6, r0
 8001720:	2800      	cmp	r0, #0
 8001722:	d1b3      	bne.n	800168c <mbedtls_mpi_read_string+0x56>
            MBEDTLS_MPI_CHK(mbedtls_mpi_mul_int(&T, X, radix));
 8001724:	4622      	mov	r2, r4
 8001726:	4639      	mov	r1, r7
 8001728:	a801      	add	r0, sp, #4
 800172a:	f7ff ff50 	bl	80015ce <mbedtls_mpi_mul_int>
 800172e:	4606      	mov	r6, r0
 8001730:	2800      	cmp	r0, #0
 8001732:	d1ab      	bne.n	800168c <mbedtls_mpi_read_string+0x56>
            MBEDTLS_MPI_CHK(mbedtls_mpi_add_int(X, &T, d));
 8001734:	9a03      	ldr	r2, [sp, #12]
 8001736:	a901      	add	r1, sp, #4
 8001738:	4638      	mov	r0, r7
 800173a:	f7ff ff2e 	bl	800159a <mbedtls_mpi_add_int>
 800173e:	4606      	mov	r6, r0
 8001740:	2800      	cmp	r0, #0
 8001742:	d1a3      	bne.n	800168c <mbedtls_mpi_read_string+0x56>
        for (i = 0; i < slen; i++) {
 8001744:	f108 0801 	add.w	r8, r8, #1
 8001748:	e7e1      	b.n	800170e <mbedtls_mpi_read_string+0xd8>
    if (sign < 0 && mbedtls_mpi_bitlen(X) != 0) {
 800174a:	f1ba 0f00 	cmp.w	sl, #0
 800174e:	da9d      	bge.n	800168c <mbedtls_mpi_read_string+0x56>
 8001750:	4638      	mov	r0, r7
 8001752:	f7ff fd74 	bl	800123e <mbedtls_mpi_bitlen>
 8001756:	2800      	cmp	r0, #0
 8001758:	d098      	beq.n	800168c <mbedtls_mpi_read_string+0x56>
        X->s = -1;
 800175a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175e:	80bb      	strh	r3, [r7, #4]
 8001760:	e794      	b.n	800168c <mbedtls_mpi_read_string+0x56>
        return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8001762:	f06f 0603 	mvn.w	r6, #3
 8001766:	e794      	b.n	8001692 <mbedtls_mpi_read_string+0x5c>
            return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8001768:	f06f 0603 	mvn.w	r6, #3
 800176c:	e791      	b.n	8001692 <mbedtls_mpi_read_string+0x5c>

0800176e <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi(mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                        const mbedtls_mpi *B)
{
 800176e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001772:	b095      	sub	sp, #84	; 0x54
 8001774:	4606      	mov	r6, r0
 8001776:	460f      	mov	r7, r1
 8001778:	4615      	mov	r5, r2
 800177a:	461c      	mov	r4, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    mbedtls_mpi_uint TP2[3];

    if (mbedtls_mpi_cmp_int(B, 0) == 0) {
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe14 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001784:	2800      	cmp	r0, #0
 8001786:	f000 81b2 	beq.w	8001aee <mbedtls_mpi_div_mpi+0x380>
        return MBEDTLS_ERR_MPI_DIVISION_BY_ZERO;
    }

    mbedtls_mpi_init(&X); mbedtls_mpi_init(&Y); mbedtls_mpi_init(&Z);
 800178a:	a812      	add	r0, sp, #72	; 0x48
 800178c:	f7ff fc9c 	bl	80010c8 <mbedtls_mpi_init>
 8001790:	a810      	add	r0, sp, #64	; 0x40
 8001792:	f7ff fc99 	bl	80010c8 <mbedtls_mpi_init>
 8001796:	a80e      	add	r0, sp, #56	; 0x38
 8001798:	f7ff fc96 	bl	80010c8 <mbedtls_mpi_init>
    mbedtls_mpi_init(&T1);
 800179c:	a80c      	add	r0, sp, #48	; 0x30
 800179e:	f7ff fc93 	bl	80010c8 <mbedtls_mpi_init>
     *
     * T2 is used for comparison only and the 3 limbs are assigned explicitly,
     * so nobody increase the size of the MPI and we're safe to use an on-stack
     * buffer.
     */
    T2.s = 1;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    T2.n = sizeof(TP2) / sizeof(*TP2);
 80017a8:	2303      	movs	r3, #3
 80017aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    T2.p = TP2;
 80017ae:	ab07      	add	r3, sp, #28
 80017b0:	930a      	str	r3, [sp, #40]	; 0x28

    if (mbedtls_mpi_cmp_abs(A, B) < 0) {
 80017b2:	4621      	mov	r1, r4
 80017b4:	4628      	mov	r0, r5
 80017b6:	f7ff fd6d 	bl	8001294 <mbedtls_mpi_cmp_abs>
 80017ba:	2800      	cmp	r0, #0
 80017bc:	da10      	bge.n	80017e0 <mbedtls_mpi_div_mpi+0x72>
        if (Q != NULL) {
 80017be:	b12e      	cbz	r6, 80017cc <mbedtls_mpi_div_mpi+0x5e>
            MBEDTLS_MPI_CHK(mbedtls_mpi_lset(Q, 0));
 80017c0:	2100      	movs	r1, #0
 80017c2:	4630      	mov	r0, r6
 80017c4:	f7ff fcf8 	bl	80011b8 <mbedtls_mpi_lset>
 80017c8:	4680      	mov	r8, r0
 80017ca:	b978      	cbnz	r0, 80017ec <mbedtls_mpi_div_mpi+0x7e>
        }
        if (R != NULL) {
 80017cc:	b12f      	cbz	r7, 80017da <mbedtls_mpi_div_mpi+0x6c>
            MBEDTLS_MPI_CHK(mbedtls_mpi_copy(R, A));
 80017ce:	4629      	mov	r1, r5
 80017d0:	4638      	mov	r0, r7
 80017d2:	f7ff fcb5 	bl	8001140 <mbedtls_mpi_copy>
 80017d6:	4680      	mov	r8, r0
 80017d8:	b940      	cbnz	r0, 80017ec <mbedtls_mpi_div_mpi+0x7e>
        }
        return 0;
 80017da:	f04f 0800 	mov.w	r8, #0
 80017de:	e015      	b.n	800180c <mbedtls_mpi_div_mpi+0x9e>
    }

    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&X, A));
 80017e0:	4629      	mov	r1, r5
 80017e2:	a812      	add	r0, sp, #72	; 0x48
 80017e4:	f7ff fcac 	bl	8001140 <mbedtls_mpi_copy>
 80017e8:	4680      	mov	r8, r0
 80017ea:	b198      	cbz	r0, 8001814 <mbedtls_mpi_div_mpi+0xa6>
        }
    }

cleanup:

    mbedtls_mpi_free(&X); mbedtls_mpi_free(&Y); mbedtls_mpi_free(&Z);
 80017ec:	a812      	add	r0, sp, #72	; 0x48
 80017ee:	f7ff fc71 	bl	80010d4 <mbedtls_mpi_free>
 80017f2:	a810      	add	r0, sp, #64	; 0x40
 80017f4:	f7ff fc6e 	bl	80010d4 <mbedtls_mpi_free>
 80017f8:	a80e      	add	r0, sp, #56	; 0x38
 80017fa:	f7ff fc6b 	bl	80010d4 <mbedtls_mpi_free>
    mbedtls_mpi_free(&T1);
 80017fe:	a80c      	add	r0, sp, #48	; 0x30
 8001800:	f7ff fc68 	bl	80010d4 <mbedtls_mpi_free>
    mbedtls_platform_zeroize(TP2, sizeof(TP2));
 8001804:	210c      	movs	r1, #12
 8001806:	a807      	add	r0, sp, #28
 8001808:	f000 ff34 	bl	8002674 <mbedtls_platform_zeroize>

    return ret;
}
 800180c:	4640      	mov	r0, r8
 800180e:	b015      	add	sp, #84	; 0x54
 8001810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&Y, B));
 8001814:	4621      	mov	r1, r4
 8001816:	a810      	add	r0, sp, #64	; 0x40
 8001818:	f7ff fc92 	bl	8001140 <mbedtls_mpi_copy>
 800181c:	4680      	mov	r8, r0
 800181e:	2800      	cmp	r0, #0
 8001820:	d1e4      	bne.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
    X.s = Y.s = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8001828:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    MBEDTLS_MPI_CHK(mbedtls_mpi_grow(&Z, A->n + 2));
 800182c:	88e9      	ldrh	r1, [r5, #6]
 800182e:	3102      	adds	r1, #2
 8001830:	a80e      	add	r0, sp, #56	; 0x38
 8001832:	f7ff fc5e 	bl	80010f2 <mbedtls_mpi_grow>
 8001836:	4680      	mov	r8, r0
 8001838:	2800      	cmp	r0, #0
 800183a:	d1d7      	bne.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
    MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&Z,  0));
 800183c:	2100      	movs	r1, #0
 800183e:	a80e      	add	r0, sp, #56	; 0x38
 8001840:	f7ff fcba 	bl	80011b8 <mbedtls_mpi_lset>
 8001844:	4680      	mov	r8, r0
 8001846:	2800      	cmp	r0, #0
 8001848:	d1d0      	bne.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
    MBEDTLS_MPI_CHK(mbedtls_mpi_grow(&T1, A->n + 2));
 800184a:	88e9      	ldrh	r1, [r5, #6]
 800184c:	3102      	adds	r1, #2
 800184e:	a80c      	add	r0, sp, #48	; 0x30
 8001850:	f7ff fc4f 	bl	80010f2 <mbedtls_mpi_grow>
 8001854:	4680      	mov	r8, r0
 8001856:	2800      	cmp	r0, #0
 8001858:	d1c8      	bne.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
    k = mbedtls_mpi_bitlen(&Y) % biL;
 800185a:	a810      	add	r0, sp, #64	; 0x40
 800185c:	f7ff fcef 	bl	800123e <mbedtls_mpi_bitlen>
 8001860:	f000 031f 	and.w	r3, r0, #31
    if (k < biL - 1) {
 8001864:	2b1e      	cmp	r3, #30
 8001866:	d811      	bhi.n	800188c <mbedtls_mpi_div_mpi+0x11e>
        k = biL - 1 - k;
 8001868:	f1c3 031f 	rsb	r3, r3, #31
 800186c:	4699      	mov	r9, r3
 800186e:	9301      	str	r3, [sp, #4]
        MBEDTLS_MPI_CHK(mbedtls_mpi_shift_l(&X, k));
 8001870:	4619      	mov	r1, r3
 8001872:	a812      	add	r0, sp, #72	; 0x48
 8001874:	f7ff fce9 	bl	800124a <mbedtls_mpi_shift_l>
 8001878:	4680      	mov	r8, r0
 800187a:	2800      	cmp	r0, #0
 800187c:	d1b6      	bne.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
        MBEDTLS_MPI_CHK(mbedtls_mpi_shift_l(&Y, k));
 800187e:	4649      	mov	r1, r9
 8001880:	a810      	add	r0, sp, #64	; 0x40
 8001882:	f7ff fce2 	bl	800124a <mbedtls_mpi_shift_l>
 8001886:	4680      	mov	r8, r0
 8001888:	b110      	cbz	r0, 8001890 <mbedtls_mpi_div_mpi+0x122>
 800188a:	e7af      	b.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
        k = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	9301      	str	r3, [sp, #4]
    n = X.n - 1;
 8001890:	f8bd 904e 	ldrh.w	r9, [sp, #78]	; 0x4e
 8001894:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8001898:	9303      	str	r3, [sp, #12]
    t = Y.n - 1;
 800189a:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
    MBEDTLS_MPI_CHK(mbedtls_mpi_shift_l(&Y, biL * (n - t)));
 80018a4:	eba9 0903 	sub.w	r9, r9, r3
 80018a8:	ea4f 1a49 	mov.w	sl, r9, lsl #5
 80018ac:	4651      	mov	r1, sl
 80018ae:	a810      	add	r0, sp, #64	; 0x40
 80018b0:	f7ff fccb 	bl	800124a <mbedtls_mpi_shift_l>
 80018b4:	4680      	mov	r8, r0
 80018b6:	2800      	cmp	r0, #0
 80018b8:	d198      	bne.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
    while (mbedtls_mpi_cmp_mpi(&X, &Y) >= 0) {
 80018ba:	a910      	add	r1, sp, #64	; 0x40
 80018bc:	a812      	add	r0, sp, #72	; 0x48
 80018be:	f7ff fd21 	bl	8001304 <mbedtls_mpi_cmp_mpi>
 80018c2:	2800      	cmp	r0, #0
 80018c4:	db0e      	blt.n	80018e4 <mbedtls_mpi_div_mpi+0x176>
        Z.p[n - t]++;
 80018c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80018c8:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
 80018cc:	3301      	adds	r3, #1
 80018ce:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
        MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&X, &X, &Y));
 80018d2:	aa10      	add	r2, sp, #64	; 0x40
 80018d4:	a912      	add	r1, sp, #72	; 0x48
 80018d6:	4608      	mov	r0, r1
 80018d8:	f7ff fe59 	bl	800158e <mbedtls_mpi_sub_mpi>
 80018dc:	4680      	mov	r8, r0
 80018de:	2800      	cmp	r0, #0
 80018e0:	d0eb      	beq.n	80018ba <mbedtls_mpi_div_mpi+0x14c>
 80018e2:	e783      	b.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
    MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&Y, biL * (n - t)));
 80018e4:	4651      	mov	r1, sl
 80018e6:	a810      	add	r0, sp, #64	; 0x40
 80018e8:	f7ff fcca 	bl	8001280 <mbedtls_mpi_shift_r>
 80018ec:	4680      	mov	r8, r0
 80018ee:	2800      	cmp	r0, #0
 80018f0:	f47f af7c 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
 80018f4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80018f8:	9602      	str	r6, [sp, #8]
 80018fa:	9704      	str	r7, [sp, #16]
 80018fc:	9f03      	ldr	r7, [sp, #12]
 80018fe:	9503      	str	r5, [sp, #12]
 8001900:	465d      	mov	r5, fp
 8001902:	9405      	str	r4, [sp, #20]
    for (i = n; i > t; i--) {
 8001904:	42af      	cmp	r7, r5
 8001906:	f240 80bf 	bls.w	8001a88 <mbedtls_mpi_div_mpi+0x31a>
        if (X.p[i] >= Y.p[t]) {
 800190a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800190c:	00bc      	lsls	r4, r7, #2
 800190e:	f851 0027 	ldr.w	r0, [r1, r7, lsl #2]
 8001912:	00ae      	lsls	r6, r5, #2
 8001914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001916:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 800191a:	4290      	cmp	r0, r2
 800191c:	d32d      	bcc.n	800197a <mbedtls_mpi_div_mpi+0x20c>
            Z.p[i - t - 1] = ~(mbedtls_mpi_uint) 0u;
 800191e:	1b7b      	subs	r3, r7, r5
 8001920:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001924:	3b01      	subs	r3, #1
 8001926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800192c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        T2.p[0] = (i < 2) ? 0 : X.p[i - 2];
 8001930:	2f01      	cmp	r7, #1
 8001932:	d932      	bls.n	800199a <mbedtls_mpi_div_mpi+0x22c>
 8001934:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 8001938:	3b02      	subs	r3, #2
 800193a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800193c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001942:	601a      	str	r2, [r3, #0]
        T2.p[1] = (i < 1) ? 0 : X.p[i - 1];
 8001944:	b35f      	cbz	r7, 800199e <mbedtls_mpi_div_mpi+0x230>
 8001946:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 800194a:	3b01      	subs	r3, #1
 800194c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800194e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001954:	605a      	str	r2, [r3, #4]
        T2.p[2] = X.p[i];
 8001956:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001958:	5912      	ldr	r2, [r2, r4]
 800195a:	609a      	str	r2, [r3, #8]
        Z.p[i - t - 1]++;
 800195c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800195e:	eba7 0b05 	sub.w	fp, r7, r5
 8001962:	f10b 4980 	add.w	r9, fp, #1073741824	; 0x40000000
 8001966:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800196a:	ea4f 0489 	mov.w	r4, r9, lsl #2
 800196e:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
 8001972:	3301      	adds	r3, #1
 8001974:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 8001978:	e02a      	b.n	80019d0 <mbedtls_mpi_div_mpi+0x262>
            Z.p[i - t - 1] = mbedtls_int_div_int(X.p[i], X.p[i - 1],
 800197a:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
 800197e:	eb07 0c08 	add.w	ip, r7, r8
 8001982:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8001986:	1b7b      	subs	r3, r7, r5
 8001988:	4498      	add	r8, r3
 800198a:	2300      	movs	r3, #0
 800198c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8001990:	f7ff fb78 	bl	8001084 <mbedtls_int_div_int>
 8001994:	f849 0028 	str.w	r0, [r9, r8, lsl #2]
 8001998:	e7ca      	b.n	8001930 <mbedtls_mpi_div_mpi+0x1c2>
        T2.p[0] = (i < 2) ? 0 : X.p[i - 2];
 800199a:	2200      	movs	r2, #0
 800199c:	e7d0      	b.n	8001940 <mbedtls_mpi_div_mpi+0x1d2>
        T2.p[1] = (i < 1) ? 0 : X.p[i - 1];
 800199e:	463a      	mov	r2, r7
 80019a0:	e7d7      	b.n	8001952 <mbedtls_mpi_div_mpi+0x1e4>
            T1.p[0] = (t < 1) ? 0 : Y.p[t - 1];
 80019a2:	462a      	mov	r2, r5
 80019a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019a6:	601a      	str	r2, [r3, #0]
            T1.p[1] = Y.p[t];
 80019a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80019aa:	599a      	ldr	r2, [r3, r6]
 80019ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019ae:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK(mbedtls_mpi_mul_int(&T1, &T1, Z.p[i - t - 1]));
 80019b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80019b2:	591a      	ldr	r2, [r3, r4]
 80019b4:	a90c      	add	r1, sp, #48	; 0x30
 80019b6:	4608      	mov	r0, r1
 80019b8:	f7ff fe09 	bl	80015ce <mbedtls_mpi_mul_int>
 80019bc:	4680      	mov	r8, r0
 80019be:	2800      	cmp	r0, #0
 80019c0:	f47f af14 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
        } while (mbedtls_mpi_cmp_mpi(&T1, &T2) > 0);
 80019c4:	a90a      	add	r1, sp, #40	; 0x28
 80019c6:	a80c      	add	r0, sp, #48	; 0x30
 80019c8:	f7ff fc9c 	bl	8001304 <mbedtls_mpi_cmp_mpi>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	dd14      	ble.n	80019fa <mbedtls_mpi_div_mpi+0x28c>
            Z.p[i - t - 1]--;
 80019d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80019d2:	5913      	ldr	r3, [r2, r4]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	5113      	str	r3, [r2, r4]
            MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&T1, 0));
 80019d8:	2100      	movs	r1, #0
 80019da:	a80c      	add	r0, sp, #48	; 0x30
 80019dc:	f7ff fbec 	bl	80011b8 <mbedtls_mpi_lset>
 80019e0:	4680      	mov	r8, r0
 80019e2:	2800      	cmp	r0, #0
 80019e4:	f47f af02 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
            T1.p[0] = (t < 1) ? 0 : Y.p[t - 1];
 80019e8:	2d00      	cmp	r5, #0
 80019ea:	d0da      	beq.n	80019a2 <mbedtls_mpi_div_mpi+0x234>
 80019ec:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
 80019f0:	3b02      	subs	r3, #2
 80019f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80019f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019f8:	e7d4      	b.n	80019a4 <mbedtls_mpi_div_mpi+0x236>
        MBEDTLS_MPI_CHK(mbedtls_mpi_mul_int(&T1, &Y, Z.p[i - t - 1]));
 80019fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80019fc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
 8001a00:	a910      	add	r1, sp, #64	; 0x40
 8001a02:	a80c      	add	r0, sp, #48	; 0x30
 8001a04:	f7ff fde3 	bl	80015ce <mbedtls_mpi_mul_int>
 8001a08:	4680      	mov	r8, r0
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	f47f aeee 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
        MBEDTLS_MPI_CHK(mbedtls_mpi_shift_l(&T1,  biL * (i - t - 1)));
 8001a10:	f10b 34ff 	add.w	r4, fp, #4294967295	; 0xffffffff
 8001a14:	0164      	lsls	r4, r4, #5
 8001a16:	4621      	mov	r1, r4
 8001a18:	a80c      	add	r0, sp, #48	; 0x30
 8001a1a:	f7ff fc16 	bl	800124a <mbedtls_mpi_shift_l>
 8001a1e:	4680      	mov	r8, r0
 8001a20:	2800      	cmp	r0, #0
 8001a22:	f47f aee3 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
        MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&X, &X, &T1));
 8001a26:	aa0c      	add	r2, sp, #48	; 0x30
 8001a28:	a912      	add	r1, sp, #72	; 0x48
 8001a2a:	4608      	mov	r0, r1
 8001a2c:	f7ff fdaf 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001a30:	4680      	mov	r8, r0
 8001a32:	2800      	cmp	r0, #0
 8001a34:	f47f aeda 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
        if (mbedtls_mpi_cmp_int(&X, 0) < 0) {
 8001a38:	2100      	movs	r1, #0
 8001a3a:	a812      	add	r0, sp, #72	; 0x48
 8001a3c:	f7ff fcb6 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	db01      	blt.n	8001a48 <mbedtls_mpi_div_mpi+0x2da>
    for (i = n; i > t; i--) {
 8001a44:	3f01      	subs	r7, #1
 8001a46:	e75d      	b.n	8001904 <mbedtls_mpi_div_mpi+0x196>
            MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&T1, &Y));
 8001a48:	a910      	add	r1, sp, #64	; 0x40
 8001a4a:	a80c      	add	r0, sp, #48	; 0x30
 8001a4c:	f7ff fb78 	bl	8001140 <mbedtls_mpi_copy>
 8001a50:	4680      	mov	r8, r0
 8001a52:	2800      	cmp	r0, #0
 8001a54:	f47f aeca 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_l(&T1, biL * (i - t - 1)));
 8001a58:	4621      	mov	r1, r4
 8001a5a:	a80c      	add	r0, sp, #48	; 0x30
 8001a5c:	f7ff fbf5 	bl	800124a <mbedtls_mpi_shift_l>
 8001a60:	4680      	mov	r8, r0
 8001a62:	2800      	cmp	r0, #0
 8001a64:	f47f aec2 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
            MBEDTLS_MPI_CHK(mbedtls_mpi_add_mpi(&X, &X, &T1));
 8001a68:	aa0c      	add	r2, sp, #48	; 0x30
 8001a6a:	a912      	add	r1, sp, #72	; 0x48
 8001a6c:	4608      	mov	r0, r1
 8001a6e:	f7ff fd89 	bl	8001584 <mbedtls_mpi_add_mpi>
 8001a72:	4680      	mov	r8, r0
 8001a74:	2800      	cmp	r0, #0
 8001a76:	f47f aeb9 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
            Z.p[i - t - 1]--;
 8001a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001a7c:	f852 3029 	ldr.w	r3, [r2, r9, lsl #2]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 8001a86:	e7dd      	b.n	8001a44 <mbedtls_mpi_div_mpi+0x2d6>
    if (Q != NULL) {
 8001a88:	9e02      	ldr	r6, [sp, #8]
 8001a8a:	9f04      	ldr	r7, [sp, #16]
 8001a8c:	9d03      	ldr	r5, [sp, #12]
 8001a8e:	9c05      	ldr	r4, [sp, #20]
 8001a90:	b166      	cbz	r6, 8001aac <mbedtls_mpi_div_mpi+0x33e>
        MBEDTLS_MPI_CHK(mbedtls_mpi_copy(Q, &Z));
 8001a92:	a90e      	add	r1, sp, #56	; 0x38
 8001a94:	4630      	mov	r0, r6
 8001a96:	f7ff fb53 	bl	8001140 <mbedtls_mpi_copy>
 8001a9a:	4680      	mov	r8, r0
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	f47f aea5 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
        Q->s = A->s * B->s;
 8001aa2:	88ab      	ldrh	r3, [r5, #4]
 8001aa4:	88a2      	ldrh	r2, [r4, #4]
 8001aa6:	fb13 f302 	smulbb	r3, r3, r2
 8001aaa:	80b3      	strh	r3, [r6, #4]
    if (R != NULL) {
 8001aac:	2f00      	cmp	r7, #0
 8001aae:	f43f ae9d 	beq.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
        MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&X, k));
 8001ab2:	9901      	ldr	r1, [sp, #4]
 8001ab4:	a812      	add	r0, sp, #72	; 0x48
 8001ab6:	f7ff fbe3 	bl	8001280 <mbedtls_mpi_shift_r>
 8001aba:	4680      	mov	r8, r0
 8001abc:	2800      	cmp	r0, #0
 8001abe:	f47f ae95 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
        X.s = A->s;
 8001ac2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8001ac6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        MBEDTLS_MPI_CHK(mbedtls_mpi_copy(R, &X));
 8001aca:	a912      	add	r1, sp, #72	; 0x48
 8001acc:	4638      	mov	r0, r7
 8001ace:	f7ff fb37 	bl	8001140 <mbedtls_mpi_copy>
 8001ad2:	4680      	mov	r8, r0
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	f47f ae89 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
        if (mbedtls_mpi_cmp_int(R, 0) == 0) {
 8001ada:	2100      	movs	r1, #0
 8001adc:	4638      	mov	r0, r7
 8001ade:	f7ff fc65 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001ae2:	2800      	cmp	r0, #0
 8001ae4:	f47f ae82 	bne.w	80017ec <mbedtls_mpi_div_mpi+0x7e>
            R->s = 1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	80bb      	strh	r3, [r7, #4]
 8001aec:	e67e      	b.n	80017ec <mbedtls_mpi_div_mpi+0x7e>
        return MBEDTLS_ERR_MPI_DIVISION_BY_ZERO;
 8001aee:	f06f 080b 	mvn.w	r8, #11
 8001af2:	e68b      	b.n	800180c <mbedtls_mpi_div_mpi+0x9e>

08001af4 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi(mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B)
{
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	4604      	mov	r4, r0
 8001af8:	460e      	mov	r6, r1
 8001afa:	4615      	mov	r5, r2
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if (mbedtls_mpi_cmp_int(B, 0) < 0) {
 8001afc:	2100      	movs	r1, #0
 8001afe:	4610      	mov	r0, r2
 8001b00:	f7ff fc54 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	db26      	blt.n	8001b56 <mbedtls_mpi_mod_mpi+0x62>
        return MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
    }

    MBEDTLS_MPI_CHK(mbedtls_mpi_div_mpi(NULL, R, A, B));
 8001b08:	462b      	mov	r3, r5
 8001b0a:	4632      	mov	r2, r6
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fe2d 	bl	800176e <mbedtls_mpi_div_mpi>
 8001b14:	4606      	mov	r6, r0
 8001b16:	b968      	cbnz	r0, 8001b34 <mbedtls_mpi_mod_mpi+0x40>

    while (mbedtls_mpi_cmp_int(R, 0) < 0) {
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff fc46 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	da09      	bge.n	8001b38 <mbedtls_mpi_mod_mpi+0x44>
        MBEDTLS_MPI_CHK(mbedtls_mpi_add_mpi(R, R, B));
 8001b24:	462a      	mov	r2, r5
 8001b26:	4621      	mov	r1, r4
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff fd2b 	bl	8001584 <mbedtls_mpi_add_mpi>
 8001b2e:	4606      	mov	r6, r0
 8001b30:	2800      	cmp	r0, #0
 8001b32:	d0f1      	beq.n	8001b18 <mbedtls_mpi_mod_mpi+0x24>
    }

cleanup:

    return ret;
}
 8001b34:	4630      	mov	r0, r6
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
    while (mbedtls_mpi_cmp_mpi(R, B) >= 0) {
 8001b38:	4629      	mov	r1, r5
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	f7ff fbe2 	bl	8001304 <mbedtls_mpi_cmp_mpi>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	dbf7      	blt.n	8001b34 <mbedtls_mpi_mod_mpi+0x40>
        MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(R, R, B));
 8001b44:	462a      	mov	r2, r5
 8001b46:	4621      	mov	r1, r4
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f7ff fd20 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001b4e:	4606      	mov	r6, r0
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d0f1      	beq.n	8001b38 <mbedtls_mpi_mod_mpi+0x44>
 8001b54:	e7ee      	b.n	8001b34 <mbedtls_mpi_mod_mpi+0x40>
        return MBEDTLS_ERR_MPI_NEGATIVE_VALUE;
 8001b56:	f06f 0609 	mvn.w	r6, #9
 8001b5a:	e7eb      	b.n	8001b34 <mbedtls_mpi_mod_mpi+0x40>

08001b5c <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd(mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B)
{
 8001b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	4605      	mov	r5, r0
 8001b62:	460f      	mov	r7, r1
 8001b64:	4616      	mov	r6, r2
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t lz, lzt;
    mbedtls_mpi TA, TB;

    mbedtls_mpi_init(&TA); mbedtls_mpi_init(&TB);
 8001b66:	a802      	add	r0, sp, #8
 8001b68:	f7ff faae 	bl	80010c8 <mbedtls_mpi_init>
 8001b6c:	4668      	mov	r0, sp
 8001b6e:	f7ff faab 	bl	80010c8 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&TA, A));
 8001b72:	4639      	mov	r1, r7
 8001b74:	a802      	add	r0, sp, #8
 8001b76:	f7ff fae3 	bl	8001140 <mbedtls_mpi_copy>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	b140      	cbz	r0, 8001b90 <mbedtls_mpi_gcd+0x34>
    MBEDTLS_MPI_CHK(mbedtls_mpi_shift_l(&TB, lz));
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(G, &TB));

cleanup:

    mbedtls_mpi_free(&TA); mbedtls_mpi_free(&TB);
 8001b7e:	a802      	add	r0, sp, #8
 8001b80:	f7ff faa8 	bl	80010d4 <mbedtls_mpi_free>
 8001b84:	4668      	mov	r0, sp
 8001b86:	f7ff faa5 	bl	80010d4 <mbedtls_mpi_free>

    return ret;
}
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	b005      	add	sp, #20
 8001b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&TB, B));
 8001b90:	4631      	mov	r1, r6
 8001b92:	4668      	mov	r0, sp
 8001b94:	f7ff fad4 	bl	8001140 <mbedtls_mpi_copy>
 8001b98:	4604      	mov	r4, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d1ef      	bne.n	8001b7e <mbedtls_mpi_gcd+0x22>
    lz = mbedtls_mpi_lsb(&TA);
 8001b9e:	a802      	add	r0, sp, #8
 8001ba0:	f7ff fb39 	bl	8001216 <mbedtls_mpi_lsb>
 8001ba4:	4604      	mov	r4, r0
    lzt = mbedtls_mpi_lsb(&TB);
 8001ba6:	4668      	mov	r0, sp
 8001ba8:	f7ff fb35 	bl	8001216 <mbedtls_mpi_lsb>
    if (lzt == 0 && mbedtls_mpi_get_bit(&TB, 0) == 0) {
 8001bac:	4606      	mov	r6, r0
 8001bae:	b920      	cbnz	r0, 8001bba <mbedtls_mpi_gcd+0x5e>
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4668      	mov	r0, sp
 8001bb4:	f7ff fb1e 	bl	80011f4 <mbedtls_mpi_get_bit>
 8001bb8:	b140      	cbz	r0, 8001bcc <mbedtls_mpi_gcd+0x70>
    if (lzt < lz) {
 8001bba:	42b4      	cmp	r4, r6
 8001bbc:	d800      	bhi.n	8001bc0 <mbedtls_mpi_gcd+0x64>
    lz = mbedtls_mpi_lsb(&TA);
 8001bbe:	4626      	mov	r6, r4
    TA.s = TB.s = 1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001bc6:	f8ad 300c 	strh.w	r3, [sp, #12]
    while (mbedtls_mpi_cmp_int(&TA, 0) != 0) {
 8001bca:	e014      	b.n	8001bf6 <mbedtls_mpi_gcd+0x9a>
        ret = mbedtls_mpi_copy(G, A);
 8001bcc:	4639      	mov	r1, r7
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f7ff fab6 	bl	8001140 <mbedtls_mpi_copy>
 8001bd4:	4604      	mov	r4, r0
        goto cleanup;
 8001bd6:	e7d2      	b.n	8001b7e <mbedtls_mpi_gcd+0x22>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_abs(&TB, &TB, &TA));
 8001bd8:	aa02      	add	r2, sp, #8
 8001bda:	4669      	mov	r1, sp
 8001bdc:	4668      	mov	r0, sp
 8001bde:	f7ff fc4d 	bl	800147c <mbedtls_mpi_sub_abs>
 8001be2:	4604      	mov	r4, r0
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d1ca      	bne.n	8001b7e <mbedtls_mpi_gcd+0x22>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&TB, 1));
 8001be8:	2101      	movs	r1, #1
 8001bea:	4668      	mov	r0, sp
 8001bec:	f7ff fb48 	bl	8001280 <mbedtls_mpi_shift_r>
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d1c3      	bne.n	8001b7e <mbedtls_mpi_gcd+0x22>
    while (mbedtls_mpi_cmp_int(&TA, 0) != 0) {
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	a802      	add	r0, sp, #8
 8001bfa:	f7ff fbd7 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001bfe:	b348      	cbz	r0, 8001c54 <mbedtls_mpi_gcd+0xf8>
        MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&TA, mbedtls_mpi_lsb(&TA)));
 8001c00:	a802      	add	r0, sp, #8
 8001c02:	f7ff fb08 	bl	8001216 <mbedtls_mpi_lsb>
 8001c06:	4601      	mov	r1, r0
 8001c08:	a802      	add	r0, sp, #8
 8001c0a:	f7ff fb39 	bl	8001280 <mbedtls_mpi_shift_r>
 8001c0e:	4604      	mov	r4, r0
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d1b4      	bne.n	8001b7e <mbedtls_mpi_gcd+0x22>
        MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&TB, mbedtls_mpi_lsb(&TB)));
 8001c14:	4668      	mov	r0, sp
 8001c16:	f7ff fafe 	bl	8001216 <mbedtls_mpi_lsb>
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	4668      	mov	r0, sp
 8001c1e:	f7ff fb2f 	bl	8001280 <mbedtls_mpi_shift_r>
 8001c22:	4604      	mov	r4, r0
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d1aa      	bne.n	8001b7e <mbedtls_mpi_gcd+0x22>
        if (mbedtls_mpi_cmp_mpi(&TA, &TB) >= 0) {
 8001c28:	4669      	mov	r1, sp
 8001c2a:	a802      	add	r0, sp, #8
 8001c2c:	f7ff fb6a 	bl	8001304 <mbedtls_mpi_cmp_mpi>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	dbd1      	blt.n	8001bd8 <mbedtls_mpi_gcd+0x7c>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_abs(&TA, &TA, &TB));
 8001c34:	466a      	mov	r2, sp
 8001c36:	a902      	add	r1, sp, #8
 8001c38:	4608      	mov	r0, r1
 8001c3a:	f7ff fc1f 	bl	800147c <mbedtls_mpi_sub_abs>
 8001c3e:	4604      	mov	r4, r0
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d19c      	bne.n	8001b7e <mbedtls_mpi_gcd+0x22>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&TA, 1));
 8001c44:	2101      	movs	r1, #1
 8001c46:	a802      	add	r0, sp, #8
 8001c48:	f7ff fb1a 	bl	8001280 <mbedtls_mpi_shift_r>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d0d1      	beq.n	8001bf6 <mbedtls_mpi_gcd+0x9a>
 8001c52:	e794      	b.n	8001b7e <mbedtls_mpi_gcd+0x22>
    MBEDTLS_MPI_CHK(mbedtls_mpi_shift_l(&TB, lz));
 8001c54:	4631      	mov	r1, r6
 8001c56:	4668      	mov	r0, sp
 8001c58:	f7ff faf7 	bl	800124a <mbedtls_mpi_shift_l>
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	d18d      	bne.n	8001b7e <mbedtls_mpi_gcd+0x22>
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(G, &TB));
 8001c62:	4669      	mov	r1, sp
 8001c64:	4628      	mov	r0, r5
 8001c66:	f7ff fa6b 	bl	8001140 <mbedtls_mpi_copy>
 8001c6a:	4604      	mov	r4, r0
cleanup:
 8001c6c:	e787      	b.n	8001b7e <mbedtls_mpi_gcd+0x22>

08001c6e <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod(mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N)
{
 8001c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c70:	b093      	sub	sp, #76	; 0x4c
 8001c72:	4607      	mov	r7, r0
 8001c74:	460d      	mov	r5, r1
 8001c76:	4614      	mov	r4, r2
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;

    if (mbedtls_mpi_cmp_int(N, 1) <= 0) {
 8001c78:	2101      	movs	r1, #1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f7ff fb96 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001c80:	2800      	cmp	r0, #0
 8001c82:	f340 8156 	ble.w	8001f32 <mbedtls_mpi_inv_mod+0x2c4>
        return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    }

    mbedtls_mpi_init(&TA); mbedtls_mpi_init(&TU); mbedtls_mpi_init(&U1); mbedtls_mpi_init(&U2);
 8001c86:	a80e      	add	r0, sp, #56	; 0x38
 8001c88:	f7ff fa1e 	bl	80010c8 <mbedtls_mpi_init>
 8001c8c:	a80c      	add	r0, sp, #48	; 0x30
 8001c8e:	f7ff fa1b 	bl	80010c8 <mbedtls_mpi_init>
 8001c92:	a80a      	add	r0, sp, #40	; 0x28
 8001c94:	f7ff fa18 	bl	80010c8 <mbedtls_mpi_init>
 8001c98:	a808      	add	r0, sp, #32
 8001c9a:	f7ff fa15 	bl	80010c8 <mbedtls_mpi_init>
    mbedtls_mpi_init(&G); mbedtls_mpi_init(&TB); mbedtls_mpi_init(&TV);
 8001c9e:	a810      	add	r0, sp, #64	; 0x40
 8001ca0:	f7ff fa12 	bl	80010c8 <mbedtls_mpi_init>
 8001ca4:	a806      	add	r0, sp, #24
 8001ca6:	f7ff fa0f 	bl	80010c8 <mbedtls_mpi_init>
 8001caa:	a804      	add	r0, sp, #16
 8001cac:	f7ff fa0c 	bl	80010c8 <mbedtls_mpi_init>
    mbedtls_mpi_init(&V1); mbedtls_mpi_init(&V2);
 8001cb0:	a802      	add	r0, sp, #8
 8001cb2:	f7ff fa09 	bl	80010c8 <mbedtls_mpi_init>
 8001cb6:	4668      	mov	r0, sp
 8001cb8:	f7ff fa06 	bl	80010c8 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK(mbedtls_mpi_gcd(&G, A, N));
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	a810      	add	r0, sp, #64	; 0x40
 8001cc2:	f7ff ff4b 	bl	8001b5c <mbedtls_mpi_gcd>
 8001cc6:	4606      	mov	r6, r0
 8001cc8:	b930      	cbnz	r0, 8001cd8 <mbedtls_mpi_inv_mod+0x6a>

    if (mbedtls_mpi_cmp_int(&G, 1) != 0) {
 8001cca:	2101      	movs	r1, #1
 8001ccc:	a810      	add	r0, sp, #64	; 0x40
 8001cce:	f7ff fb6d 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001cd2:	b1f8      	cbz	r0, 8001d14 <mbedtls_mpi_inv_mod+0xa6>
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 8001cd4:	f06f 060d 	mvn.w	r6, #13

    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(X, &V1));

cleanup:

    mbedtls_mpi_free(&TA); mbedtls_mpi_free(&TU); mbedtls_mpi_free(&U1); mbedtls_mpi_free(&U2);
 8001cd8:	a80e      	add	r0, sp, #56	; 0x38
 8001cda:	f7ff f9fb 	bl	80010d4 <mbedtls_mpi_free>
 8001cde:	a80c      	add	r0, sp, #48	; 0x30
 8001ce0:	f7ff f9f8 	bl	80010d4 <mbedtls_mpi_free>
 8001ce4:	a80a      	add	r0, sp, #40	; 0x28
 8001ce6:	f7ff f9f5 	bl	80010d4 <mbedtls_mpi_free>
 8001cea:	a808      	add	r0, sp, #32
 8001cec:	f7ff f9f2 	bl	80010d4 <mbedtls_mpi_free>
    mbedtls_mpi_free(&G); mbedtls_mpi_free(&TB); mbedtls_mpi_free(&TV);
 8001cf0:	a810      	add	r0, sp, #64	; 0x40
 8001cf2:	f7ff f9ef 	bl	80010d4 <mbedtls_mpi_free>
 8001cf6:	a806      	add	r0, sp, #24
 8001cf8:	f7ff f9ec 	bl	80010d4 <mbedtls_mpi_free>
 8001cfc:	a804      	add	r0, sp, #16
 8001cfe:	f7ff f9e9 	bl	80010d4 <mbedtls_mpi_free>
    mbedtls_mpi_free(&V1); mbedtls_mpi_free(&V2);
 8001d02:	a802      	add	r0, sp, #8
 8001d04:	f7ff f9e6 	bl	80010d4 <mbedtls_mpi_free>
 8001d08:	4668      	mov	r0, sp
 8001d0a:	f7ff f9e3 	bl	80010d4 <mbedtls_mpi_free>

    return ret;
}
 8001d0e:	4630      	mov	r0, r6
 8001d10:	b013      	add	sp, #76	; 0x4c
 8001d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MBEDTLS_MPI_CHK(mbedtls_mpi_mod_mpi(&TA, A, N));
 8001d14:	4622      	mov	r2, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	a80e      	add	r0, sp, #56	; 0x38
 8001d1a:	f7ff feeb 	bl	8001af4 <mbedtls_mpi_mod_mpi>
 8001d1e:	4606      	mov	r6, r0
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d1d9      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&TU, &TA));
 8001d24:	a90e      	add	r1, sp, #56	; 0x38
 8001d26:	a80c      	add	r0, sp, #48	; 0x30
 8001d28:	f7ff fa0a 	bl	8001140 <mbedtls_mpi_copy>
 8001d2c:	4606      	mov	r6, r0
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d1d2      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&TB, N));
 8001d32:	4621      	mov	r1, r4
 8001d34:	a806      	add	r0, sp, #24
 8001d36:	f7ff fa03 	bl	8001140 <mbedtls_mpi_copy>
 8001d3a:	4606      	mov	r6, r0
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d1cb      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(&TV, N));
 8001d40:	4621      	mov	r1, r4
 8001d42:	a804      	add	r0, sp, #16
 8001d44:	f7ff f9fc 	bl	8001140 <mbedtls_mpi_copy>
 8001d48:	4606      	mov	r6, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d1c4      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&U1, 1));
 8001d4e:	2101      	movs	r1, #1
 8001d50:	a80a      	add	r0, sp, #40	; 0x28
 8001d52:	f7ff fa31 	bl	80011b8 <mbedtls_mpi_lset>
 8001d56:	4606      	mov	r6, r0
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	d1bd      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&U2, 0));
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	a808      	add	r0, sp, #32
 8001d60:	f7ff fa2a 	bl	80011b8 <mbedtls_mpi_lset>
 8001d64:	4606      	mov	r6, r0
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d1b6      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&V1, 0));
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	a802      	add	r0, sp, #8
 8001d6e:	f7ff fa23 	bl	80011b8 <mbedtls_mpi_lset>
 8001d72:	4606      	mov	r6, r0
 8001d74:	2800      	cmp	r0, #0
 8001d76:	d1af      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    MBEDTLS_MPI_CHK(mbedtls_mpi_lset(&V2, 1));
 8001d78:	2101      	movs	r1, #1
 8001d7a:	4668      	mov	r0, sp
 8001d7c:	f7ff fa1c 	bl	80011b8 <mbedtls_mpi_lset>
 8001d80:	4606      	mov	r6, r0
 8001d82:	b1f0      	cbz	r0, 8001dc2 <mbedtls_mpi_inv_mod+0x154>
 8001d84:	e7a8      	b.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
                MBEDTLS_MPI_CHK(mbedtls_mpi_add_mpi(&U1, &U1, &TB));
 8001d86:	aa06      	add	r2, sp, #24
 8001d88:	a90a      	add	r1, sp, #40	; 0x28
 8001d8a:	4608      	mov	r0, r1
 8001d8c:	f7ff fbfa 	bl	8001584 <mbedtls_mpi_add_mpi>
 8001d90:	4606      	mov	r6, r0
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d1a0      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
                MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&U2, &U2, &TA));
 8001d96:	aa0e      	add	r2, sp, #56	; 0x38
 8001d98:	a908      	add	r1, sp, #32
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	f7ff fbf7 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001da0:	4606      	mov	r6, r0
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d198      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&U1, 1));
 8001da6:	2101      	movs	r1, #1
 8001da8:	a80a      	add	r0, sp, #40	; 0x28
 8001daa:	f7ff fa69 	bl	8001280 <mbedtls_mpi_shift_r>
 8001dae:	4606      	mov	r6, r0
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d191      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&U2, 1));
 8001db4:	2101      	movs	r1, #1
 8001db6:	a808      	add	r0, sp, #32
 8001db8:	f7ff fa62 	bl	8001280 <mbedtls_mpi_shift_r>
 8001dbc:	4606      	mov	r6, r0
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d18a      	bne.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
        while ((TU.p[0] & 1) == 0) {
 8001dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f013 0f01 	tst.w	r3, #1
 8001dca:	d134      	bne.n	8001e36 <mbedtls_mpi_inv_mod+0x1c8>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&TU, 1));
 8001dcc:	2101      	movs	r1, #1
 8001dce:	a80c      	add	r0, sp, #48	; 0x30
 8001dd0:	f7ff fa56 	bl	8001280 <mbedtls_mpi_shift_r>
 8001dd4:	4606      	mov	r6, r0
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	f47f af7e 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            if ((U1.p[0] & 1) != 0 || (U2.p[0] & 1) != 0) {
 8001ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f013 0f01 	tst.w	r3, #1
 8001de4:	d1cf      	bne.n	8001d86 <mbedtls_mpi_inv_mod+0x118>
 8001de6:	9b08      	ldr	r3, [sp, #32]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f013 0f01 	tst.w	r3, #1
 8001dee:	d0da      	beq.n	8001da6 <mbedtls_mpi_inv_mod+0x138>
 8001df0:	e7c9      	b.n	8001d86 <mbedtls_mpi_inv_mod+0x118>
                MBEDTLS_MPI_CHK(mbedtls_mpi_add_mpi(&V1, &V1, &TB));
 8001df2:	aa06      	add	r2, sp, #24
 8001df4:	a902      	add	r1, sp, #8
 8001df6:	4608      	mov	r0, r1
 8001df8:	f7ff fbc4 	bl	8001584 <mbedtls_mpi_add_mpi>
 8001dfc:	4606      	mov	r6, r0
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	f47f af6a 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
                MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&V2, &V2, &TA));
 8001e04:	aa0e      	add	r2, sp, #56	; 0x38
 8001e06:	4669      	mov	r1, sp
 8001e08:	4668      	mov	r0, sp
 8001e0a:	f7ff fbc0 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001e0e:	4606      	mov	r6, r0
 8001e10:	2800      	cmp	r0, #0
 8001e12:	f47f af61 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&V1, 1));
 8001e16:	2101      	movs	r1, #1
 8001e18:	a802      	add	r0, sp, #8
 8001e1a:	f7ff fa31 	bl	8001280 <mbedtls_mpi_shift_r>
 8001e1e:	4606      	mov	r6, r0
 8001e20:	2800      	cmp	r0, #0
 8001e22:	f47f af59 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&V2, 1));
 8001e26:	2101      	movs	r1, #1
 8001e28:	4668      	mov	r0, sp
 8001e2a:	f7ff fa29 	bl	8001280 <mbedtls_mpi_shift_r>
 8001e2e:	4606      	mov	r6, r0
 8001e30:	2800      	cmp	r0, #0
 8001e32:	f47f af51 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
        while ((TV.p[0] & 1) == 0) {
 8001e36:	9b04      	ldr	r3, [sp, #16]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f013 0f01 	tst.w	r3, #1
 8001e3e:	d112      	bne.n	8001e66 <mbedtls_mpi_inv_mod+0x1f8>
            MBEDTLS_MPI_CHK(mbedtls_mpi_shift_r(&TV, 1));
 8001e40:	2101      	movs	r1, #1
 8001e42:	a804      	add	r0, sp, #16
 8001e44:	f7ff fa1c 	bl	8001280 <mbedtls_mpi_shift_r>
 8001e48:	4606      	mov	r6, r0
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	f47f af44 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            if ((V1.p[0] & 1) != 0 || (V2.p[0] & 1) != 0) {
 8001e50:	9b02      	ldr	r3, [sp, #8]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f013 0f01 	tst.w	r3, #1
 8001e58:	d1cb      	bne.n	8001df2 <mbedtls_mpi_inv_mod+0x184>
 8001e5a:	9b00      	ldr	r3, [sp, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f013 0f01 	tst.w	r3, #1
 8001e62:	d0d8      	beq.n	8001e16 <mbedtls_mpi_inv_mod+0x1a8>
 8001e64:	e7c5      	b.n	8001df2 <mbedtls_mpi_inv_mod+0x184>
        if (mbedtls_mpi_cmp_mpi(&TU, &TV) >= 0) {
 8001e66:	a904      	add	r1, sp, #16
 8001e68:	a80c      	add	r0, sp, #48	; 0x30
 8001e6a:	f7ff fa4b 	bl	8001304 <mbedtls_mpi_cmp_mpi>
 8001e6e:	2800      	cmp	r0, #0
 8001e70:	db2f      	blt.n	8001ed2 <mbedtls_mpi_inv_mod+0x264>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&TU, &TU, &TV));
 8001e72:	aa04      	add	r2, sp, #16
 8001e74:	a90c      	add	r1, sp, #48	; 0x30
 8001e76:	4608      	mov	r0, r1
 8001e78:	f7ff fb89 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001e7c:	4606      	mov	r6, r0
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	f47f af2a 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&U1, &U1, &V1));
 8001e84:	aa02      	add	r2, sp, #8
 8001e86:	a90a      	add	r1, sp, #40	; 0x28
 8001e88:	4608      	mov	r0, r1
 8001e8a:	f7ff fb80 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001e8e:	4606      	mov	r6, r0
 8001e90:	2800      	cmp	r0, #0
 8001e92:	f47f af21 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&U2, &U2, &V2));
 8001e96:	466a      	mov	r2, sp
 8001e98:	a908      	add	r1, sp, #32
 8001e9a:	4608      	mov	r0, r1
 8001e9c:	f7ff fb77 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001ea0:	4606      	mov	r6, r0
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	f47f af18 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    } while (mbedtls_mpi_cmp_int(&TU, 0) != 0);
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	a80c      	add	r0, sp, #48	; 0x30
 8001eac:	f7ff fa7e 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	d186      	bne.n	8001dc2 <mbedtls_mpi_inv_mod+0x154>
    while (mbedtls_mpi_cmp_int(&V1, 0) < 0) {
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	a802      	add	r0, sp, #8
 8001eb8:	f7ff fa78 	bl	80013ac <mbedtls_mpi_cmp_int>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	da23      	bge.n	8001f08 <mbedtls_mpi_inv_mod+0x29a>
        MBEDTLS_MPI_CHK(mbedtls_mpi_add_mpi(&V1, &V1, N));
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	a902      	add	r1, sp, #8
 8001ec4:	4608      	mov	r0, r1
 8001ec6:	f7ff fb5d 	bl	8001584 <mbedtls_mpi_add_mpi>
 8001eca:	4606      	mov	r6, r0
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d0f1      	beq.n	8001eb4 <mbedtls_mpi_inv_mod+0x246>
 8001ed0:	e702      	b.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&TV, &TV, &TU));
 8001ed2:	aa0c      	add	r2, sp, #48	; 0x30
 8001ed4:	a904      	add	r1, sp, #16
 8001ed6:	4608      	mov	r0, r1
 8001ed8:	f7ff fb59 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001edc:	4606      	mov	r6, r0
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	f47f aefa 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&V1, &V1, &U1));
 8001ee4:	aa0a      	add	r2, sp, #40	; 0x28
 8001ee6:	a902      	add	r1, sp, #8
 8001ee8:	4608      	mov	r0, r1
 8001eea:	f7ff fb50 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001eee:	4606      	mov	r6, r0
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	f47f aef1 	bne.w	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
            MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&V2, &V2, &U2));
 8001ef6:	aa08      	add	r2, sp, #32
 8001ef8:	4669      	mov	r1, sp
 8001efa:	4668      	mov	r0, sp
 8001efc:	f7ff fb47 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001f00:	4606      	mov	r6, r0
 8001f02:	2800      	cmp	r0, #0
 8001f04:	d0d0      	beq.n	8001ea8 <mbedtls_mpi_inv_mod+0x23a>
 8001f06:	e6e7      	b.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    while (mbedtls_mpi_cmp_mpi(&V1, N) >= 0) {
 8001f08:	4621      	mov	r1, r4
 8001f0a:	a802      	add	r0, sp, #8
 8001f0c:	f7ff f9fa 	bl	8001304 <mbedtls_mpi_cmp_mpi>
 8001f10:	2800      	cmp	r0, #0
 8001f12:	db08      	blt.n	8001f26 <mbedtls_mpi_inv_mod+0x2b8>
        MBEDTLS_MPI_CHK(mbedtls_mpi_sub_mpi(&V1, &V1, N));
 8001f14:	4622      	mov	r2, r4
 8001f16:	a902      	add	r1, sp, #8
 8001f18:	4608      	mov	r0, r1
 8001f1a:	f7ff fb38 	bl	800158e <mbedtls_mpi_sub_mpi>
 8001f1e:	4606      	mov	r6, r0
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d0f1      	beq.n	8001f08 <mbedtls_mpi_inv_mod+0x29a>
 8001f24:	e6d8      	b.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
    MBEDTLS_MPI_CHK(mbedtls_mpi_copy(X, &V1));
 8001f26:	a902      	add	r1, sp, #8
 8001f28:	4638      	mov	r0, r7
 8001f2a:	f7ff f909 	bl	8001140 <mbedtls_mpi_copy>
 8001f2e:	4606      	mov	r6, r0
cleanup:
 8001f30:	e6d2      	b.n	8001cd8 <mbedtls_mpi_inv_mod+0x6a>
        return MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
 8001f32:	f06f 0603 	mvn.w	r6, #3
 8001f36:	e6ea      	b.n	8001d0e <mbedtls_mpi_inv_mod+0xa0>

08001f38 <mbedtls_mpi_self_test>:
//     }

//     return ret;
// }

int mbedtls_mpi_self_test(int verbose){
 8001f38:	b530      	push	{r4, r5, lr}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	4604      	mov	r4, r0


    int ret;
    mbedtls_mpi X, A, N, U;

    mbedtls_mpi_init(&X);
 8001f3e:	a806      	add	r0, sp, #24
 8001f40:	f7ff f8c2 	bl	80010c8 <mbedtls_mpi_init>
    mbedtls_mpi_init(&A);
 8001f44:	a804      	add	r0, sp, #16
 8001f46:	f7ff f8bf 	bl	80010c8 <mbedtls_mpi_init>
    mbedtls_mpi_init(&N);
 8001f4a:	a802      	add	r0, sp, #8
 8001f4c:	f7ff f8bc 	bl	80010c8 <mbedtls_mpi_init>
    mbedtls_mpi_init(&U);
 8001f50:	4668      	mov	r0, sp
 8001f52:	f7ff f8b9 	bl	80010c8 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK(mbedtls_mpi_read_string(&A, 16,
 8001f56:	4a2e      	ldr	r2, [pc, #184]	; (8002010 <mbedtls_mpi_self_test+0xd8>)
 8001f58:	2110      	movs	r1, #16
 8001f5a:	eb0d 0001 	add.w	r0, sp, r1
 8001f5e:	f7ff fb6a 	bl	8001636 <mbedtls_mpi_read_string>
 8001f62:	4605      	mov	r5, r0
 8001f64:	b198      	cbz	r0, 8001f8e <mbedtls_mpi_self_test+0x56>
        my_printf("passed\n\r");
    }

cleanup:

    if (ret != 0 && verbose != 0) {
 8001f66:	b10d      	cbz	r5, 8001f6c <mbedtls_mpi_self_test+0x34>
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d147      	bne.n	8001ffc <mbedtls_mpi_self_test+0xc4>
        my_printf("Unexpected error, return code = %08X\n\r", (unsigned int) ret);
    }

    mbedtls_mpi_free(&X);
 8001f6c:	a806      	add	r0, sp, #24
 8001f6e:	f7ff f8b1 	bl	80010d4 <mbedtls_mpi_free>
    mbedtls_mpi_free(&A);
 8001f72:	a804      	add	r0, sp, #16
 8001f74:	f7ff f8ae 	bl	80010d4 <mbedtls_mpi_free>
    mbedtls_mpi_free(&N);
 8001f78:	a802      	add	r0, sp, #8
 8001f7a:	f7ff f8ab 	bl	80010d4 <mbedtls_mpi_free>
    mbedtls_mpi_free(&U);
 8001f7e:	4668      	mov	r0, sp
 8001f80:	f7ff f8a8 	bl	80010d4 <mbedtls_mpi_free>

    if (verbose != 0) {
 8001f84:	2c00      	cmp	r4, #0
 8001f86:	d13e      	bne.n	8002006 <mbedtls_mpi_self_test+0xce>
        my_printf("\n\r");
    }

    return ret;
}
 8001f88:	4628      	mov	r0, r5
 8001f8a:	b009      	add	sp, #36	; 0x24
 8001f8c:	bd30      	pop	{r4, r5, pc}
    MBEDTLS_MPI_CHK(mbedtls_mpi_read_string(&N, 16,
 8001f8e:	4a21      	ldr	r2, [pc, #132]	; (8002014 <mbedtls_mpi_self_test+0xdc>)
 8001f90:	2110      	movs	r1, #16
 8001f92:	a802      	add	r0, sp, #8
 8001f94:	f7ff fb4f 	bl	8001636 <mbedtls_mpi_read_string>
 8001f98:	4605      	mov	r5, r0
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d1e3      	bne.n	8001f66 <mbedtls_mpi_self_test+0x2e>
    MBEDTLS_MPI_CHK(mbedtls_mpi_read_string(&X, 16,
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <mbedtls_mpi_self_test+0xe0>)
 8001fa0:	2110      	movs	r1, #16
 8001fa2:	a806      	add	r0, sp, #24
 8001fa4:	f7ff fb47 	bl	8001636 <mbedtls_mpi_read_string>
 8001fa8:	4605      	mov	r5, r0
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d1db      	bne.n	8001f66 <mbedtls_mpi_self_test+0x2e>
    MBEDTLS_MPI_CHK(mbedtls_mpi_read_string(&U, 16,
 8001fae:	4a1b      	ldr	r2, [pc, #108]	; (800201c <mbedtls_mpi_self_test+0xe4>)
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	4668      	mov	r0, sp
 8001fb4:	f7ff fb3f 	bl	8001636 <mbedtls_mpi_read_string>
 8001fb8:	4605      	mov	r5, r0
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d1d3      	bne.n	8001f66 <mbedtls_mpi_self_test+0x2e>
    MBEDTLS_MPI_CHK(mbedtls_mpi_inv_mod(&X, &A, &N));
 8001fbe:	aa02      	add	r2, sp, #8
 8001fc0:	a904      	add	r1, sp, #16
 8001fc2:	a806      	add	r0, sp, #24
 8001fc4:	f7ff fe53 	bl	8001c6e <mbedtls_mpi_inv_mod>
 8001fc8:	4605      	mov	r5, r0
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d1cb      	bne.n	8001f66 <mbedtls_mpi_self_test+0x2e>
    if (verbose != 0) {
 8001fce:	b954      	cbnz	r4, 8001fe6 <mbedtls_mpi_self_test+0xae>
    if (mbedtls_mpi_cmp_mpi(&X, &U) != 0) {
 8001fd0:	4669      	mov	r1, sp
 8001fd2:	a806      	add	r0, sp, #24
 8001fd4:	f7ff f996 	bl	8001304 <mbedtls_mpi_cmp_mpi>
 8001fd8:	b948      	cbnz	r0, 8001fee <mbedtls_mpi_self_test+0xb6>
    if (verbose != 0) {
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d0c3      	beq.n	8001f66 <mbedtls_mpi_self_test+0x2e>
        my_printf("passed\n\r");
 8001fde:	4810      	ldr	r0, [pc, #64]	; (8002020 <mbedtls_mpi_self_test+0xe8>)
 8001fe0:	f7fe fdba 	bl	8000b58 <my_printf>
 8001fe4:	e7bf      	b.n	8001f66 <mbedtls_mpi_self_test+0x2e>
        my_printf(" Erikav3 MPI test #4 (inv_mod): ");
 8001fe6:	480f      	ldr	r0, [pc, #60]	; (8002024 <mbedtls_mpi_self_test+0xec>)
 8001fe8:	f7fe fdb6 	bl	8000b58 <my_printf>
 8001fec:	e7f0      	b.n	8001fd0 <mbedtls_mpi_self_test+0x98>
        if (verbose != 0) {
 8001fee:	b90c      	cbnz	r4, 8001ff4 <mbedtls_mpi_self_test+0xbc>
        ret = 1;
 8001ff0:	2501      	movs	r5, #1
 8001ff2:	e7b9      	b.n	8001f68 <mbedtls_mpi_self_test+0x30>
            my_printf("failed\n\r");
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <mbedtls_mpi_self_test+0xf0>)
 8001ff6:	f7fe fdaf 	bl	8000b58 <my_printf>
 8001ffa:	e7f9      	b.n	8001ff0 <mbedtls_mpi_self_test+0xb8>
        my_printf("Unexpected error, return code = %08X\n\r", (unsigned int) ret);
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	480b      	ldr	r0, [pc, #44]	; (800202c <mbedtls_mpi_self_test+0xf4>)
 8002000:	f7fe fdaa 	bl	8000b58 <my_printf>
 8002004:	e7b2      	b.n	8001f6c <mbedtls_mpi_self_test+0x34>
        my_printf("\n\r");
 8002006:	480a      	ldr	r0, [pc, #40]	; (8002030 <mbedtls_mpi_self_test+0xf8>)
 8002008:	f7fe fda6 	bl	8000b58 <my_printf>
    return ret;
 800200c:	e7bc      	b.n	8001f88 <mbedtls_mpi_self_test+0x50>
 800200e:	bf00      	nop
 8002010:	08004688 	.word	0x08004688
 8002014:	0800470c 	.word	0x0800470c
 8002018:	08004770 	.word	0x08004770
 800201c:	080047d4 	.word	0x080047d4
 8002020:	08004868 	.word	0x08004868
 8002024:	08004838 	.word	0x08004838
 8002028:	0800485c 	.word	0x0800485c
 800202c:	08004874 	.word	0x08004874
 8002030:	08004898 	.word	0x08004898

08002034 <mbedtls_mpi_core_clz>:
        mask >>= 1;
    }

    return j;
#endif
}
 8002034:	fab0 f080 	clz	r0, r0
 8002038:	4770      	bx	lr

0800203a <mbedtls_mpi_core_bitlen>:

size_t mbedtls_mpi_core_bitlen(const mbedtls_mpi_uint *A, size_t A_limbs)
{
 800203a:	b510      	push	{r4, lr}
 800203c:	4603      	mov	r3, r0
    int i;
    size_t j;

    for (i = ((int) A_limbs) - 1; i >= 0; i--) {
 800203e:	3901      	subs	r1, #1
 8002040:	e000      	b.n	8002044 <mbedtls_mpi_core_bitlen+0xa>
 8002042:	3901      	subs	r1, #1
 8002044:	2900      	cmp	r1, #0
 8002046:	db0b      	blt.n	8002060 <mbedtls_mpi_core_bitlen+0x26>
        if (A[i] != 0) {
 8002048:	460c      	mov	r4, r1
 800204a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800204e:	2800      	cmp	r0, #0
 8002050:	d0f7      	beq.n	8002042 <mbedtls_mpi_core_bitlen+0x8>
            j = biL - mbedtls_mpi_core_clz(A[i]);
 8002052:	f7ff ffef 	bl	8002034 <mbedtls_mpi_core_clz>
 8002056:	f1c0 0020 	rsb	r0, r0, #32
            return (i * biL) + j;
 800205a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800205e:	e000      	b.n	8002062 <mbedtls_mpi_core_bitlen+0x28>
        }
    }

    return 0;
 8002060:	2000      	movs	r0, #0
}
 8002062:	bd10      	pop	{r4, pc}

08002064 <mbedtls_mpi_core_shift_r>:
    return 0;
}

void mbedtls_mpi_core_shift_r(mbedtls_mpi_uint *X, size_t limbs,
                              size_t count)
{
 8002064:	b538      	push	{r3, r4, r5, lr}
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count /  biL;
 8002066:	0954      	lsrs	r4, r2, #5
    v1 = count & (biL - 1);
 8002068:	f002 051f 	and.w	r5, r2, #31

    if (v0 > limbs || (v0 == limbs && v1 > 0)) {
 800206c:	ebb1 1f52 	cmp.w	r1, r2, lsr #5
 8002070:	d307      	bcc.n	8002082 <mbedtls_mpi_core_shift_r+0x1e>
 8002072:	428c      	cmp	r4, r1
 8002074:	d003      	beq.n	800207e <mbedtls_mpi_core_shift_r+0x1a>
    }

    /*
     * shift by count / limb_size
     */
    if (v0 > 0) {
 8002076:	2a1f      	cmp	r2, #31
 8002078:	d812      	bhi.n	80020a0 <mbedtls_mpi_core_shift_r+0x3c>
    }

    /*
     * shift by count % limb_size
     */
    if (v1 > 0) {
 800207a:	bb7d      	cbnz	r5, 80020dc <mbedtls_mpi_core_shift_r+0x78>
            X[i - 1] >>= v1;
            X[i - 1] |= r0;
            r0 = r1;
        }
    }
}
 800207c:	bd38      	pop	{r3, r4, r5, pc}
    if (v0 > limbs || (v0 == limbs && v1 > 0)) {
 800207e:	2d00      	cmp	r5, #0
 8002080:	d0f9      	beq.n	8002076 <mbedtls_mpi_core_shift_r+0x12>
        memset(X, 0, limbs * ciL);
 8002082:	008a      	lsls	r2, r1, #2
 8002084:	2100      	movs	r1, #0
 8002086:	f000 fb49 	bl	800271c <memset>
        return;
 800208a:	e7f7      	b.n	800207c <mbedtls_mpi_core_shift_r+0x18>
            X[i] = X[i + v0];
 800208c:	191a      	adds	r2, r3, r4
 800208e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002092:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (i = 0; i < limbs - v0; i++) {
 8002096:	3301      	adds	r3, #1
 8002098:	1b0a      	subs	r2, r1, r4
 800209a:	429a      	cmp	r2, r3
 800209c:	d8f6      	bhi.n	800208c <mbedtls_mpi_core_shift_r+0x28>
 800209e:	e005      	b.n	80020ac <mbedtls_mpi_core_shift_r+0x48>
 80020a0:	2300      	movs	r3, #0
 80020a2:	e7f9      	b.n	8002098 <mbedtls_mpi_core_shift_r+0x34>
            X[i] = 0;
 80020a4:	2200      	movs	r2, #0
 80020a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (; i < limbs; i++) {
 80020aa:	3301      	adds	r3, #1
 80020ac:	428b      	cmp	r3, r1
 80020ae:	d3f9      	bcc.n	80020a4 <mbedtls_mpi_core_shift_r+0x40>
 80020b0:	e7e3      	b.n	800207a <mbedtls_mpi_core_shift_r+0x16>
            r1 = X[i - 1] << (biL - v1);
 80020b2:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80020bc:	f1c5 0c20 	rsb	ip, r5, #32
            X[i - 1] >>= v1;
 80020c0:	fa24 f205 	lsr.w	r2, r4, r5
 80020c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            X[i - 1] |= r0;
 80020c8:	ea42 020e 	orr.w	r2, r2, lr
 80020cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (i = limbs; i > 0; i--) {
 80020d0:	3901      	subs	r1, #1
            r0 = r1;
 80020d2:	fa04 fe0c 	lsl.w	lr, r4, ip
        for (i = limbs; i > 0; i--) {
 80020d6:	2900      	cmp	r1, #0
 80020d8:	d1eb      	bne.n	80020b2 <mbedtls_mpi_core_shift_r+0x4e>
 80020da:	e7cf      	b.n	800207c <mbedtls_mpi_core_shift_r+0x18>
    mbedtls_mpi_uint r0 = 0, r1;
 80020dc:	f04f 0e00 	mov.w	lr, #0
 80020e0:	e7f9      	b.n	80020d6 <mbedtls_mpi_core_shift_r+0x72>

080020e2 <mbedtls_mpi_core_shift_l>:

void mbedtls_mpi_core_shift_l(mbedtls_mpi_uint *X, size_t limbs,
                              size_t count)
{
 80020e2:	b530      	push	{r4, r5, lr}
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;

    v0 = count / (biL);
 80020e4:	ea4f 1c52 	mov.w	ip, r2, lsr #5
    v1 = count & (biL - 1);
 80020e8:	f002 051f 	and.w	r5, r2, #31

    /*
     * shift by count / limb_size
     */
    if (v0 > 0) {
 80020ec:	2a1f      	cmp	r2, #31
 80020ee:	d810      	bhi.n	8002112 <mbedtls_mpi_core_shift_l+0x30>
    }

    /*
     * shift by count % limb_size
     */
    if (v1 > 0) {
 80020f0:	bb75      	cbnz	r5, 8002150 <mbedtls_mpi_core_shift_l+0x6e>
            X[i] <<= v1;
            X[i] |= r0;
            r0 = r1;
        }
    }
}
 80020f2:	bd30      	pop	{r4, r5, pc}
            X[i - 1] = X[i - v0 - 1];
 80020f4:	eba3 020c 	sub.w	r2, r3, ip
 80020f8:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80020fc:	eb03 0e04 	add.w	lr, r3, r4
 8002100:	4422      	add	r2, r4
 8002102:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8002106:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
        for (i = limbs; i > v0; i--) {
 800210a:	3b01      	subs	r3, #1
 800210c:	4563      	cmp	r3, ip
 800210e:	d8f1      	bhi.n	80020f4 <mbedtls_mpi_core_shift_l+0x12>
 8002110:	e008      	b.n	8002124 <mbedtls_mpi_core_shift_l+0x42>
 8002112:	460b      	mov	r3, r1
 8002114:	e7fa      	b.n	800210c <mbedtls_mpi_core_shift_l+0x2a>
            X[i - 1] = 0;
 8002116:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800211a:	3a01      	subs	r2, #1
 800211c:	2400      	movs	r4, #0
 800211e:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
        for (; i > 0; i--) {
 8002122:	3b01      	subs	r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f6      	bne.n	8002116 <mbedtls_mpi_core_shift_l+0x34>
 8002128:	e7e2      	b.n	80020f0 <mbedtls_mpi_core_shift_l+0xe>
            r1 = X[i] >> (biL - v1);
 800212a:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
 800212e:	f1c5 0220 	rsb	r2, r5, #32
            X[i] <<= v1;
 8002132:	fa04 f305 	lsl.w	r3, r4, r5
 8002136:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
            X[i] |= r0;
 800213a:	ea43 030e 	orr.w	r3, r3, lr
 800213e:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
        for (i = v0; i < limbs; i++) {
 8002142:	f10c 0c01 	add.w	ip, ip, #1
            r0 = r1;
 8002146:	fa24 fe02 	lsr.w	lr, r4, r2
        for (i = v0; i < limbs; i++) {
 800214a:	458c      	cmp	ip, r1
 800214c:	d3ed      	bcc.n	800212a <mbedtls_mpi_core_shift_l+0x48>
 800214e:	e7d0      	b.n	80020f2 <mbedtls_mpi_core_shift_l+0x10>
    mbedtls_mpi_uint r0 = 0, r1;
 8002150:	f04f 0e00 	mov.w	lr, #0
 8002154:	e7f9      	b.n	800214a <mbedtls_mpi_core_shift_l+0x68>

08002156 <mbedtls_mpi_core_add>:

mbedtls_mpi_uint mbedtls_mpi_core_add(mbedtls_mpi_uint *X,
                                      const mbedtls_mpi_uint *A,
                                      const mbedtls_mpi_uint *B,
                                      size_t limbs)
{
 8002156:	b530      	push	{r4, r5, lr}
 8002158:	4605      	mov	r5, r0
    mbedtls_mpi_uint c = 0;

    for (size_t i = 0; i < limbs; i++) {
 800215a:	f04f 0c00 	mov.w	ip, #0
    mbedtls_mpi_uint c = 0;
 800215e:	4660      	mov	r0, ip
    for (size_t i = 0; i < limbs; i++) {
 8002160:	e010      	b.n	8002184 <mbedtls_mpi_core_add+0x2e>
        mbedtls_mpi_uint t = c + A[i];
        c = (t < A[i]);
 8002162:	f851 402c 	ldr.w	r4, [r1, ip, lsl #2]
 8002166:	1820      	adds	r0, r4, r0
 8002168:	bf2c      	ite	cs
 800216a:	f04f 0e01 	movcs.w	lr, #1
 800216e:	f04f 0e00 	movcc.w	lr, #0
        t += B[i];
 8002172:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
        c += (t < B[i]);
 8002176:	1824      	adds	r4, r4, r0
 8002178:	f14e 0000 	adc.w	r0, lr, #0
        X[i] = t;
 800217c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]
    for (size_t i = 0; i < limbs; i++) {
 8002180:	f10c 0c01 	add.w	ip, ip, #1
 8002184:	459c      	cmp	ip, r3
 8002186:	d3ec      	bcc.n	8002162 <mbedtls_mpi_core_add+0xc>
    }

    return c;
}
 8002188:	bd30      	pop	{r4, r5, pc}

0800218a <mbedtls_mpi_core_sub>:

mbedtls_mpi_uint mbedtls_mpi_core_sub(mbedtls_mpi_uint *X,
                                      const mbedtls_mpi_uint *A,
                                      const mbedtls_mpi_uint *B,
                                      size_t limbs)
{
 800218a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218c:	4607      	mov	r7, r0
    mbedtls_mpi_uint c = 0;

    for (size_t i = 0; i < limbs; i++) {
 800218e:	f04f 0c00 	mov.w	ip, #0
    mbedtls_mpi_uint c = 0;
 8002192:	4660      	mov	r0, ip
    for (size_t i = 0; i < limbs; i++) {
 8002194:	e013      	b.n	80021be <mbedtls_mpi_core_sub+0x34>
        mbedtls_mpi_uint z = (A[i] < c);
 8002196:	f851 502c 	ldr.w	r5, [r1, ip, lsl #2]
        mbedtls_mpi_uint t = A[i] - c;
 800219a:	eba5 0e00 	sub.w	lr, r5, r0
        c = (t < B[i]) + z;
 800219e:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 80021a2:	4574      	cmp	r4, lr
 80021a4:	bf94      	ite	ls
 80021a6:	2600      	movls	r6, #0
 80021a8:	2601      	movhi	r6, #1
 80021aa:	4285      	cmp	r5, r0
 80021ac:	bf2c      	ite	cs
 80021ae:	4630      	movcs	r0, r6
 80021b0:	1c70      	addcc	r0, r6, #1
        X[i] = t - B[i];
 80021b2:	ebae 0404 	sub.w	r4, lr, r4
 80021b6:	f847 402c 	str.w	r4, [r7, ip, lsl #2]
    for (size_t i = 0; i < limbs; i++) {
 80021ba:	f10c 0c01 	add.w	ip, ip, #1
 80021be:	459c      	cmp	ip, r3
 80021c0:	d3e9      	bcc.n	8002196 <mbedtls_mpi_core_sub+0xc>
    }

    return c;
}
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021c4 <mbedtls_mpi_core_mla>:

mbedtls_mpi_uint mbedtls_mpi_core_mla(mbedtls_mpi_uint *d, size_t d_len,
                                      const mbedtls_mpi_uint *s, size_t s_len,
                                      mbedtls_mpi_uint b)
{
 80021c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c8:	4684      	mov	ip, r0
 80021ca:	9c06      	ldr	r4, [sp, #24]
    /*
     * It is a documented precondition of this function that d_len >= s_len.
     * If that's not the case, we swap these round: this turns what would be
     * a buffer overflow into an incorrect result.
     */
    if (d_len < s_len) {
 80021cc:	4299      	cmp	r1, r3
 80021ce:	d200      	bcs.n	80021d2 <mbedtls_mpi_core_mla+0xe>
        s_len = d_len;
 80021d0:	460b      	mov	r3, r1
    }
    size_t excess_len = d_len - s_len;
 80021d2:	1acd      	subs	r5, r1, r3
    size_t steps_x8 = s_len / 8;
 80021d4:	08de      	lsrs	r6, r3, #3
    size_t steps_x1 = s_len & 7;
 80021d6:	f003 0107 	and.w	r1, r3, #7
    mbedtls_mpi_uint c = 0; /* carry */
 80021da:	2000      	movs	r0, #0

    while (steps_x8--) {
 80021dc:	e042      	b.n	8002264 <mbedtls_mpi_core_mla+0xa0>
        MULADDC_X8_INIT
 80021de:	4663      	mov	r3, ip
 80021e0:	f852 6b08 	ldr.w	r6, [r2], #8
 80021e4:	f853 cb08 	ldr.w	ip, [r3], #8
 80021e8:	f852 7c04 	ldr.w	r7, [r2, #-4]
 80021ec:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80021f0:	fbe4 c066 	umaal	ip, r0, r4, r6
 80021f4:	fbe4 8067 	umaal	r8, r0, r4, r7
 80021f8:	f843 cc08 	str.w	ip, [r3, #-8]
 80021fc:	f843 8c04 	str.w	r8, [r3, #-4]
 8002200:	f852 6b08 	ldr.w	r6, [r2], #8
 8002204:	f853 cb08 	ldr.w	ip, [r3], #8
 8002208:	f852 7c04 	ldr.w	r7, [r2, #-4]
 800220c:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8002210:	fbe4 c066 	umaal	ip, r0, r4, r6
 8002214:	fbe4 8067 	umaal	r8, r0, r4, r7
 8002218:	f843 cc08 	str.w	ip, [r3, #-8]
 800221c:	f843 8c04 	str.w	r8, [r3, #-4]
 8002220:	f852 6b08 	ldr.w	r6, [r2], #8
 8002224:	f853 cb08 	ldr.w	ip, [r3], #8
 8002228:	f852 7c04 	ldr.w	r7, [r2, #-4]
 800222c:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8002230:	fbe4 c066 	umaal	ip, r0, r4, r6
 8002234:	fbe4 8067 	umaal	r8, r0, r4, r7
 8002238:	f843 cc08 	str.w	ip, [r3, #-8]
 800223c:	f843 8c04 	str.w	r8, [r3, #-4]
 8002240:	f852 6b08 	ldr.w	r6, [r2], #8
 8002244:	f853 cb08 	ldr.w	ip, [r3], #8
 8002248:	f852 7c04 	ldr.w	r7, [r2, #-4]
 800224c:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8002250:	fbe4 c066 	umaal	ip, r0, r4, r6
 8002254:	fbe4 8067 	umaal	r8, r0, r4, r7
 8002258:	f843 cc08 	str.w	ip, [r3, #-8]
 800225c:	f843 8c04 	str.w	r8, [r3, #-4]
 8002260:	469c      	mov	ip, r3
    while (steps_x8--) {
 8002262:	4676      	mov	r6, lr
 8002264:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
 8002268:	2e00      	cmp	r6, #0
 800226a:	d1b8      	bne.n	80021de <mbedtls_mpi_core_mla+0x1a>
 800226c:	e00a      	b.n	8002284 <mbedtls_mpi_core_mla+0xc0>
        MULADDC_X8_CORE
            MULADDC_X8_STOP
    }

    while (steps_x1--) {
        MULADDC_X1_INIT
 800226e:	4663      	mov	r3, ip
 8002270:	f852 1b04 	ldr.w	r1, [r2], #4
 8002274:	f8d3 c000 	ldr.w	ip, [r3]
 8002278:	fbe4 c061 	umaal	ip, r0, r4, r1
 800227c:	f843 cb04 	str.w	ip, [r3], #4
 8002280:	469c      	mov	ip, r3
    while (steps_x1--) {
 8002282:	4631      	mov	r1, r6
 8002284:	1e4e      	subs	r6, r1, #1
 8002286:	2900      	cmp	r1, #0
 8002288:	d1f1      	bne.n	800226e <mbedtls_mpi_core_mla+0xaa>
 800228a:	e009      	b.n	80022a0 <mbedtls_mpi_core_mla+0xdc>
        MULADDC_X1_CORE
            MULADDC_X1_STOP
    }

    while (excess_len--) {
        *d += c;
 800228c:	f8dc 3000 	ldr.w	r3, [ip]
 8002290:	4403      	add	r3, r0
 8002292:	f84c 3b04 	str.w	r3, [ip], #4
        c = (*d < c);
 8002296:	4283      	cmp	r3, r0
 8002298:	bf2c      	ite	cs
 800229a:	2000      	movcs	r0, #0
 800229c:	2001      	movcc	r0, #1
    while (excess_len--) {
 800229e:	4615      	mov	r5, r2
 80022a0:	1e6a      	subs	r2, r5, #1
 80022a2:	2d00      	cmp	r5, #0
 80022a4:	d1f2      	bne.n	800228c <mbedtls_mpi_core_mla+0xc8>
        d++;
    }

    return c;
}
 80022a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022aa:	bf00      	nop

080022ac <mbedtls_mpi_core_sub_int>:

mbedtls_mpi_uint mbedtls_mpi_core_sub_int(mbedtls_mpi_uint *X,
                                          const mbedtls_mpi_uint *A,
                                          mbedtls_mpi_uint c,  /* doubles as carry */
                                          size_t limbs)
{
 80022ac:	b530      	push	{r4, r5, lr}
 80022ae:	4686      	mov	lr, r0
 80022b0:	4610      	mov	r0, r2
    for (size_t i = 0; i < limbs; i++) {
 80022b2:	f04f 0c00 	mov.w	ip, #0
 80022b6:	e00a      	b.n	80022ce <mbedtls_mpi_core_sub_int+0x22>
        mbedtls_mpi_uint s = A[i];
 80022b8:	f851 502c 	ldr.w	r5, [r1, ip, lsl #2]
        mbedtls_mpi_uint t = s - c;
 80022bc:	1a2c      	subs	r4, r5, r0
        c = (t > s);
 80022be:	42a5      	cmp	r5, r4
 80022c0:	bf2c      	ite	cs
 80022c2:	2000      	movcs	r0, #0
 80022c4:	2001      	movcc	r0, #1
        X[i] = t;
 80022c6:	f84e 402c 	str.w	r4, [lr, ip, lsl #2]
    for (size_t i = 0; i < limbs; i++) {
 80022ca:	f10c 0c01 	add.w	ip, ip, #1
 80022ce:	459c      	cmp	ip, r3
 80022d0:	d3f2      	bcc.n	80022b8 <mbedtls_mpi_core_sub_int+0xc>
    }

    return c;
}
 80022d2:	bd30      	pop	{r4, r5, pc}

080022d4 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header(memory_header *hdr)
{
    if (hdr->magic1 != MAGIC1) {
 80022d4:	6802      	ldr	r2, [r0, #0]
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <verify_header+0x4c>)
 80022d8:	429a      	cmp	r2, r3
 80022da:	d115      	bne.n	8002308 <verify_header+0x34>
        mbedtls_fprintf(stderr, "FATAL: MAGIC1 mismatch\n");
#endif
        return 1;
    }

    if (hdr->magic2 != MAGIC2) {
 80022dc:	69c2      	ldr	r2, [r0, #28]
 80022de:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
 80022e2:	f1a3 13ef 	sub.w	r3, r3, #15663343	; 0xef00ef
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d110      	bne.n	800230c <verify_header+0x38>
        mbedtls_fprintf(stderr, "FATAL: MAGIC2 mismatch\n");
#endif
        return 1;
    }

    if (hdr->alloc > 1) {
 80022ea:	6883      	ldr	r3, [r0, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d80f      	bhi.n	8002310 <verify_header+0x3c>
        mbedtls_fprintf(stderr, "FATAL: alloc has illegal value\n");
#endif
        return 1;
    }

    if (hdr->prev != NULL && hdr->prev == hdr->next) {
 80022f0:	68c3      	ldr	r3, [r0, #12]
 80022f2:	b113      	cbz	r3, 80022fa <verify_header+0x26>
 80022f4:	6902      	ldr	r2, [r0, #16]
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00c      	beq.n	8002314 <verify_header+0x40>
        mbedtls_fprintf(stderr, "FATAL: prev == next\n");
#endif
        return 1;
    }

    if (hdr->prev_free != NULL && hdr->prev_free == hdr->next_free) {
 80022fa:	6943      	ldr	r3, [r0, #20]
 80022fc:	b163      	cbz	r3, 8002318 <verify_header+0x44>
 80022fe:	6982      	ldr	r2, [r0, #24]
 8002300:	4293      	cmp	r3, r2
 8002302:	d00b      	beq.n	800231c <verify_header+0x48>
        mbedtls_fprintf(stderr, "FATAL: prev_free == next_free\n");
#endif
        return 1;
    }

    return 0;
 8002304:	2000      	movs	r0, #0
 8002306:	4770      	bx	lr
        return 1;
 8002308:	2001      	movs	r0, #1
 800230a:	4770      	bx	lr
        return 1;
 800230c:	2001      	movs	r0, #1
 800230e:	4770      	bx	lr
        return 1;
 8002310:	2001      	movs	r0, #1
 8002312:	4770      	bx	lr
        return 1;
 8002314:	2001      	movs	r0, #1
 8002316:	4770      	bx	lr
    return 0;
 8002318:	2000      	movs	r0, #0
 800231a:	4770      	bx	lr
        return 1;
 800231c:	2001      	movs	r0, #1
}
 800231e:	4770      	bx	lr
 8002320:	ff00aa55 	.word	0xff00aa55

08002324 <verify_chain>:

static int verify_chain(void)
{
 8002324:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <verify_chain+0x48>)
 8002328:	689d      	ldr	r5, [r3, #8]

    if (prv == NULL || verify_header(prv) != 0) {
 800232a:	b1b5      	cbz	r5, 800235a <verify_chain+0x36>
 800232c:	4628      	mov	r0, r5
 800232e:	f7ff ffd1 	bl	80022d4 <verify_header>
 8002332:	4606      	mov	r6, r0
 8002334:	b998      	cbnz	r0, 800235e <verify_chain+0x3a>
                                "failed\n");
#endif
        return 1;
    }

    if (heap.first->prev != NULL) {
 8002336:	68eb      	ldr	r3, [r5, #12]
 8002338:	b113      	cbz	r3, 8002340 <verify_chain+0x1c>
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf(stderr, "FATAL: verification failed: "
                                "first->prev != NULL\n");
#endif
        return 1;
 800233a:	2601      	movs	r6, #1
        prv = cur;
        cur = cur->next;
    }

    return 0;
}
 800233c:	4630      	mov	r0, r6
 800233e:	bd70      	pop	{r4, r5, r6, pc}
    cur = heap.first->next;
 8002340:	692c      	ldr	r4, [r5, #16]
    while (cur != NULL) {
 8002342:	2c00      	cmp	r4, #0
 8002344:	d0fa      	beq.n	800233c <verify_chain+0x18>
        if (verify_header(cur) != 0) {
 8002346:	4620      	mov	r0, r4
 8002348:	f7ff ffc4 	bl	80022d4 <verify_header>
 800234c:	b948      	cbnz	r0, 8002362 <verify_chain+0x3e>
        if (cur->prev != prv) {
 800234e:	68e3      	ldr	r3, [r4, #12]
 8002350:	42ab      	cmp	r3, r5
 8002352:	d108      	bne.n	8002366 <verify_chain+0x42>
        prv = cur;
 8002354:	4625      	mov	r5, r4
        cur = cur->next;
 8002356:	6924      	ldr	r4, [r4, #16]
 8002358:	e7f3      	b.n	8002342 <verify_chain+0x1e>
        return 1;
 800235a:	2601      	movs	r6, #1
 800235c:	e7ee      	b.n	800233c <verify_chain+0x18>
 800235e:	2601      	movs	r6, #1
 8002360:	e7ec      	b.n	800233c <verify_chain+0x18>
            return 1;
 8002362:	2601      	movs	r6, #1
 8002364:	e7ea      	b.n	800233c <verify_chain+0x18>
            return 1;
 8002366:	2601      	movs	r6, #1
 8002368:	e7e8      	b.n	800233c <verify_chain+0x18>
 800236a:	bf00      	nop
 800236c:	200109fc 	.word	0x200109fc

08002370 <buffer_alloc_free>:

    return ret;
}

static void buffer_alloc_free(void *ptr)
{
 8002370:	b538      	push	{r3, r4, r5, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if (ptr == NULL || heap.buf == NULL || heap.first == NULL) {
 8002372:	4605      	mov	r5, r0
 8002374:	2800      	cmp	r0, #0
 8002376:	d066      	beq.n	8002446 <buffer_alloc_free+0xd6>
 8002378:	4b46      	ldr	r3, [pc, #280]	; (8002494 <buffer_alloc_free+0x124>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d062      	beq.n	8002446 <buffer_alloc_free+0xd6>
 8002380:	4a44      	ldr	r2, [pc, #272]	; (8002494 <buffer_alloc_free+0x124>)
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	2a00      	cmp	r2, #0
 8002386:	d05e      	beq.n	8002446 <buffer_alloc_free+0xd6>
        return;
    }

    if (p < heap.buf || p >= heap.buf + heap.len) {
 8002388:	4283      	cmp	r3, r0
 800238a:	d85d      	bhi.n	8002448 <buffer_alloc_free+0xd8>
 800238c:	4a41      	ldr	r2, [pc, #260]	; (8002494 <buffer_alloc_free+0x124>)
 800238e:	6852      	ldr	r2, [r2, #4]
 8002390:	4413      	add	r3, r2
 8002392:	4283      	cmp	r3, r0
 8002394:	d958      	bls.n	8002448 <buffer_alloc_free+0xd8>
                                "space\n");
#endif
        mbedtls_exit(1);
    }

    p -= sizeof(memory_header);
 8002396:	f1a0 0420 	sub.w	r4, r0, #32
    hdr = (memory_header *) p;

    if (verify_header(hdr) != 0) {
 800239a:	4620      	mov	r0, r4
 800239c:	f7ff ff9a 	bl	80022d4 <verify_header>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d154      	bne.n	800244e <buffer_alloc_free+0xde>
        mbedtls_exit(1);
    }

    if (hdr->alloc != 1) {
 80023a4:	f855 3c18 	ldr.w	r3, [r5, #-24]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d153      	bne.n	8002454 <buffer_alloc_free+0xe4>
                                "data\n");
#endif
        mbedtls_exit(1);
    }

    hdr->alloc = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f845 3c18 	str.w	r3, [r5, #-24]
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if (hdr->prev != NULL && hdr->prev->alloc == 0) {
 80023b2:	f855 3c14 	ldr.w	r3, [r5, #-20]
 80023b6:	b1cb      	cbz	r3, 80023ec <buffer_alloc_free+0x7c>
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	2a00      	cmp	r2, #0
 80023bc:	d14d      	bne.n	800245a <buffer_alloc_free+0xea>
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
 80023be:	f855 2c1c 	ldr.w	r2, [r5, #-28]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	440a      	add	r2, r1
 80023c6:	3220      	adds	r2, #32
 80023c8:	605a      	str	r2, [r3, #4]
        hdr->prev->next = hdr->next;
 80023ca:	f855 3c14 	ldr.w	r3, [r5, #-20]
 80023ce:	f855 2c10 	ldr.w	r2, [r5, #-16]
 80023d2:	611a      	str	r2, [r3, #16]
        old = hdr;
        hdr = hdr->prev;
 80023d4:	f855 5c14 	ldr.w	r5, [r5, #-20]

        if (hdr->next != NULL) {
 80023d8:	692b      	ldr	r3, [r5, #16]
 80023da:	b103      	cbz	r3, 80023de <buffer_alloc_free+0x6e>
            hdr->next->prev = hdr;
 80023dc:	60dd      	str	r5, [r3, #12]
        }

        memset(old, 0, sizeof(memory_header));
 80023de:	2220      	movs	r2, #32
 80023e0:	2100      	movs	r1, #0
 80023e2:	4620      	mov	r0, r4
 80023e4:	f000 f99a 	bl	800271c <memset>
        old = hdr;
 80023e8:	4623      	mov	r3, r4
        hdr = hdr->prev;
 80023ea:	462c      	mov	r4, r5
    }

    // Regroup with block after
    //
    if (hdr->next != NULL && hdr->next->alloc == 0) {
 80023ec:	6925      	ldr	r5, [r4, #16]
 80023ee:	b325      	cbz	r5, 800243a <buffer_alloc_free+0xca>
 80023f0:	68aa      	ldr	r2, [r5, #8]
 80023f2:	bb12      	cbnz	r2, 800243a <buffer_alloc_free+0xca>
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
 80023f4:	686b      	ldr	r3, [r5, #4]
 80023f6:	6862      	ldr	r2, [r4, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	3320      	adds	r3, #32
 80023fc:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
 80023fe:	692b      	ldr	r3, [r5, #16]
 8002400:	6123      	str	r3, [r4, #16]

        if (hdr->prev_free != NULL || hdr->next_free != NULL) {
 8002402:	6963      	ldr	r3, [r4, #20]
 8002404:	b35b      	cbz	r3, 800245e <buffer_alloc_free+0xee>
            if (hdr->prev_free != NULL) {
 8002406:	2b00      	cmp	r3, #0
 8002408:	d02d      	beq.n	8002466 <buffer_alloc_free+0xf6>
                hdr->prev_free->next_free = hdr->next_free;
 800240a:	69a2      	ldr	r2, [r4, #24]
 800240c:	619a      	str	r2, [r3, #24]
            } else {
                heap.first_free = hdr->next_free;
            }

            if (hdr->next_free != NULL) {
 800240e:	69a3      	ldr	r3, [r4, #24]
 8002410:	b10b      	cbz	r3, 8002416 <buffer_alloc_free+0xa6>
                hdr->next_free->prev_free = hdr->prev_free;
 8002412:	6962      	ldr	r2, [r4, #20]
 8002414:	615a      	str	r2, [r3, #20]
            }
        }

        hdr->prev_free = old->prev_free;
 8002416:	696b      	ldr	r3, [r5, #20]
 8002418:	6163      	str	r3, [r4, #20]
        hdr->next_free = old->next_free;
 800241a:	69aa      	ldr	r2, [r5, #24]
 800241c:	61a2      	str	r2, [r4, #24]

        if (hdr->prev_free != NULL) {
 800241e:	b333      	cbz	r3, 800246e <buffer_alloc_free+0xfe>
            hdr->prev_free->next_free = hdr;
 8002420:	619c      	str	r4, [r3, #24]
        } else {
            heap.first_free = hdr;
        }

        if (hdr->next_free != NULL) {
 8002422:	69a3      	ldr	r3, [r4, #24]
 8002424:	b103      	cbz	r3, 8002428 <buffer_alloc_free+0xb8>
            hdr->next_free->prev_free = hdr;
 8002426:	615c      	str	r4, [r3, #20]
        }

        if (hdr->next != NULL) {
 8002428:	6923      	ldr	r3, [r4, #16]
 800242a:	b103      	cbz	r3, 800242e <buffer_alloc_free+0xbe>
            hdr->next->prev = hdr;
 800242c:	60dc      	str	r4, [r3, #12]
        }

        memset(old, 0, sizeof(memory_header));
 800242e:	2220      	movs	r2, #32
 8002430:	2100      	movs	r1, #0
 8002432:	4628      	mov	r0, r5
 8002434:	f000 f972 	bl	800271c <memset>
        old = hdr->next;
 8002438:	462b      	mov	r3, r5
    }

    // Prepend to free_list if we have not merged
    // (Does not have to stay in same order as prev / next list)
    //
    if (old == NULL) {
 800243a:	b1db      	cbz	r3, 8002474 <buffer_alloc_free+0x104>
            heap.first_free->prev_free = hdr;
        }
        heap.first_free = hdr;
    }

    if ((heap.verify & MBEDTLS_MEMORY_VERIFY_FREE) && verify_chain() != 0) {
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <buffer_alloc_free+0x124>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f013 0f02 	tst.w	r3, #2
 8002444:	d11e      	bne.n	8002484 <buffer_alloc_free+0x114>
        mbedtls_exit(1);
    }
}
 8002446:	bd38      	pop	{r3, r4, r5, pc}
        mbedtls_exit(1);
 8002448:	2001      	movs	r0, #1
 800244a:	f000 f92f 	bl	80026ac <exit>
        mbedtls_exit(1);
 800244e:	2001      	movs	r0, #1
 8002450:	f000 f92c 	bl	80026ac <exit>
        mbedtls_exit(1);
 8002454:	2001      	movs	r0, #1
 8002456:	f000 f929 	bl	80026ac <exit>
    memory_header *hdr, *old = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	e7c6      	b.n	80023ec <buffer_alloc_free+0x7c>
        if (hdr->prev_free != NULL || hdr->next_free != NULL) {
 800245e:	69a2      	ldr	r2, [r4, #24]
 8002460:	2a00      	cmp	r2, #0
 8002462:	d1d0      	bne.n	8002406 <buffer_alloc_free+0x96>
 8002464:	e7d7      	b.n	8002416 <buffer_alloc_free+0xa6>
                heap.first_free = hdr->next_free;
 8002466:	69a2      	ldr	r2, [r4, #24]
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <buffer_alloc_free+0x124>)
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	e7cf      	b.n	800240e <buffer_alloc_free+0x9e>
            heap.first_free = hdr;
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <buffer_alloc_free+0x124>)
 8002470:	60dc      	str	r4, [r3, #12]
 8002472:	e7d6      	b.n	8002422 <buffer_alloc_free+0xb2>
        hdr->next_free = heap.first_free;
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <buffer_alloc_free+0x124>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	61a3      	str	r3, [r4, #24]
        if (heap.first_free != NULL) {
 800247a:	b103      	cbz	r3, 800247e <buffer_alloc_free+0x10e>
            heap.first_free->prev_free = hdr;
 800247c:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <buffer_alloc_free+0x124>)
 8002480:	60dc      	str	r4, [r3, #12]
 8002482:	e7db      	b.n	800243c <buffer_alloc_free+0xcc>
    if ((heap.verify & MBEDTLS_MEMORY_VERIFY_FREE) && verify_chain() != 0) {
 8002484:	f7ff ff4e 	bl	8002324 <verify_chain>
 8002488:	2800      	cmp	r0, #0
 800248a:	d0dc      	beq.n	8002446 <buffer_alloc_free+0xd6>
        mbedtls_exit(1);
 800248c:	2001      	movs	r0, #1
 800248e:	f000 f90d 	bl	80026ac <exit>
 8002492:	bf00      	nop
 8002494:	200109fc 	.word	0x200109fc

08002498 <buffer_alloc_calloc>:
{
 8002498:	b570      	push	{r4, r5, r6, lr}
    memory_header *new, *cur = heap.first_free;
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <buffer_alloc_calloc+0x12c>)
 800249c:	68dc      	ldr	r4, [r3, #12]
    if (heap.buf == NULL || heap.first == NULL) {
 800249e:	681d      	ldr	r5, [r3, #0]
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	f000 8089 	beq.w	80025b8 <buffer_alloc_calloc+0x120>
 80024a6:	689d      	ldr	r5, [r3, #8]
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	f000 8085 	beq.w	80025b8 <buffer_alloc_calloc+0x120>
    original_len = len = n * size;
 80024ae:	fb01 f600 	mul.w	r6, r1, r0
    if (n == 0 || size == 0 || len / n != size) {
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d07b      	beq.n	80025ae <buffer_alloc_calloc+0x116>
 80024b6:	2900      	cmp	r1, #0
 80024b8:	d07b      	beq.n	80025b2 <buffer_alloc_calloc+0x11a>
 80024ba:	fbb6 f0f0 	udiv	r0, r6, r0
 80024be:	4288      	cmp	r0, r1
 80024c0:	d179      	bne.n	80025b6 <buffer_alloc_calloc+0x11e>
    } else if (len > (size_t) -MBEDTLS_MEMORY_ALIGN_MULTIPLE) {
 80024c2:	f116 0f04 	cmn.w	r6, #4
 80024c6:	d879      	bhi.n	80025bc <buffer_alloc_calloc+0x124>
    if (len % MBEDTLS_MEMORY_ALIGN_MULTIPLE) {
 80024c8:	f016 0f03 	tst.w	r6, #3
 80024cc:	d02d      	beq.n	800252a <buffer_alloc_calloc+0x92>
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 80024ce:	f026 0203 	bic.w	r2, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 80024d2:	3204      	adds	r2, #4
 80024d4:	e000      	b.n	80024d8 <buffer_alloc_calloc+0x40>
        cur = cur->next_free;
 80024d6:	69a4      	ldr	r4, [r4, #24]
    while (cur != NULL) {
 80024d8:	b114      	cbz	r4, 80024e0 <buffer_alloc_calloc+0x48>
        if (cur->size >= len) {
 80024da:	6863      	ldr	r3, [r4, #4]
 80024dc:	4293      	cmp	r3, r2
 80024de:	d3fa      	bcc.n	80024d6 <buffer_alloc_calloc+0x3e>
    if (cur == NULL) {
 80024e0:	2c00      	cmp	r4, #0
 80024e2:	d06d      	beq.n	80025c0 <buffer_alloc_calloc+0x128>
    if (cur->alloc != 0) {
 80024e4:	68a3      	ldr	r3, [r4, #8]
 80024e6:	bb13      	cbnz	r3, 800252e <buffer_alloc_calloc+0x96>
    if (cur->size - len < sizeof(memory_header) +
 80024e8:	6861      	ldr	r1, [r4, #4]
 80024ea:	1a89      	subs	r1, r1, r2
 80024ec:	2923      	cmp	r1, #35	; 0x23
 80024ee:	d828      	bhi.n	8002542 <buffer_alloc_calloc+0xaa>
        cur->alloc = 1;
 80024f0:	2301      	movs	r3, #1
 80024f2:	60a3      	str	r3, [r4, #8]
        if (cur->prev_free != NULL) {
 80024f4:	6963      	ldr	r3, [r4, #20]
 80024f6:	b1eb      	cbz	r3, 8002534 <buffer_alloc_calloc+0x9c>
            cur->prev_free->next_free = cur->next_free;
 80024f8:	69a2      	ldr	r2, [r4, #24]
 80024fa:	619a      	str	r2, [r3, #24]
        if (cur->next_free != NULL) {
 80024fc:	69a3      	ldr	r3, [r4, #24]
 80024fe:	b10b      	cbz	r3, 8002504 <buffer_alloc_calloc+0x6c>
            cur->next_free->prev_free = cur->prev_free;
 8002500:	6962      	ldr	r2, [r4, #20]
 8002502:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	6163      	str	r3, [r4, #20]
        cur->next_free = NULL;
 8002508:	61a3      	str	r3, [r4, #24]
        if ((heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC) && verify_chain() != 0) {
 800250a:	4b2e      	ldr	r3, [pc, #184]	; (80025c4 <buffer_alloc_calloc+0x12c>)
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f013 0f01 	tst.w	r3, #1
 8002512:	d002      	beq.n	800251a <buffer_alloc_calloc+0x82>
 8002514:	f7ff ff06 	bl	8002324 <verify_chain>
 8002518:	b980      	cbnz	r0, 800253c <buffer_alloc_calloc+0xa4>
        ret = (unsigned char *) cur + sizeof(memory_header);
 800251a:	f104 0520 	add.w	r5, r4, #32
        memset(ret, 0, original_len);
 800251e:	4632      	mov	r2, r6
 8002520:	2100      	movs	r1, #0
 8002522:	4628      	mov	r0, r5
 8002524:	f000 f8fa 	bl	800271c <memset>
        return ret;
 8002528:	e046      	b.n	80025b8 <buffer_alloc_calloc+0x120>
    original_len = len = n * size;
 800252a:	4632      	mov	r2, r6
 800252c:	e7d4      	b.n	80024d8 <buffer_alloc_calloc+0x40>
        mbedtls_exit(1);
 800252e:	2001      	movs	r0, #1
 8002530:	f000 f8bc 	bl	80026ac <exit>
            heap.first_free = cur->next_free;
 8002534:	69a2      	ldr	r2, [r4, #24]
 8002536:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <buffer_alloc_calloc+0x12c>)
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	e7df      	b.n	80024fc <buffer_alloc_calloc+0x64>
            mbedtls_exit(1);
 800253c:	2001      	movs	r0, #1
 800253e:	f000 f8b5 	bl	80026ac <exit>
    p = ((unsigned char *) cur) + sizeof(memory_header) + len;
 8002542:	f102 0020 	add.w	r0, r2, #32
 8002546:	1823      	adds	r3, r4, r0
    new->size = cur->size - len - sizeof(memory_header);
 8002548:	3920      	subs	r1, #32
 800254a:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
 800254c:	2100      	movs	r1, #0
 800254e:	6099      	str	r1, [r3, #8]
    new->prev = cur;
 8002550:	60dc      	str	r4, [r3, #12]
    new->next = cur->next;
 8002552:	6921      	ldr	r1, [r4, #16]
 8002554:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
 8002556:	4d1c      	ldr	r5, [pc, #112]	; (80025c8 <buffer_alloc_calloc+0x130>)
 8002558:	5025      	str	r5, [r4, r0]
    new->magic2 = MAGIC2;
 800255a:	481c      	ldr	r0, [pc, #112]	; (80025cc <buffer_alloc_calloc+0x134>)
 800255c:	61d8      	str	r0, [r3, #28]
    if (new->next != NULL) {
 800255e:	b101      	cbz	r1, 8002562 <buffer_alloc_calloc+0xca>
        new->next->prev = new;
 8002560:	60cb      	str	r3, [r1, #12]
    new->prev_free = cur->prev_free;
 8002562:	6961      	ldr	r1, [r4, #20]
 8002564:	6159      	str	r1, [r3, #20]
    new->next_free = cur->next_free;
 8002566:	69a0      	ldr	r0, [r4, #24]
 8002568:	6198      	str	r0, [r3, #24]
    if (new->prev_free != NULL) {
 800256a:	b1d1      	cbz	r1, 80025a2 <buffer_alloc_calloc+0x10a>
        new->prev_free->next_free = new;
 800256c:	618b      	str	r3, [r1, #24]
    if (new->next_free != NULL) {
 800256e:	6999      	ldr	r1, [r3, #24]
 8002570:	b101      	cbz	r1, 8002574 <buffer_alloc_calloc+0xdc>
        new->next_free->prev_free = new;
 8002572:	614b      	str	r3, [r1, #20]
    cur->alloc = 1;
 8002574:	2101      	movs	r1, #1
 8002576:	60a1      	str	r1, [r4, #8]
    cur->size = len;
 8002578:	6062      	str	r2, [r4, #4]
    cur->next = new;
 800257a:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
 800257c:	2300      	movs	r3, #0
 800257e:	6163      	str	r3, [r4, #20]
    cur->next_free = NULL;
 8002580:	61a3      	str	r3, [r4, #24]
    if ((heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC) && verify_chain() != 0) {
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <buffer_alloc_calloc+0x12c>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f013 0f01 	tst.w	r3, #1
 800258a:	d002      	beq.n	8002592 <buffer_alloc_calloc+0xfa>
 800258c:	f7ff feca 	bl	8002324 <verify_chain>
 8002590:	b950      	cbnz	r0, 80025a8 <buffer_alloc_calloc+0x110>
    ret = (unsigned char *) cur + sizeof(memory_header);
 8002592:	f104 0520 	add.w	r5, r4, #32
    memset(ret, 0, original_len);
 8002596:	4632      	mov	r2, r6
 8002598:	2100      	movs	r1, #0
 800259a:	4628      	mov	r0, r5
 800259c:	f000 f8be 	bl	800271c <memset>
    return ret;
 80025a0:	e00a      	b.n	80025b8 <buffer_alloc_calloc+0x120>
        heap.first_free = new;
 80025a2:	4908      	ldr	r1, [pc, #32]	; (80025c4 <buffer_alloc_calloc+0x12c>)
 80025a4:	60cb      	str	r3, [r1, #12]
 80025a6:	e7e2      	b.n	800256e <buffer_alloc_calloc+0xd6>
        mbedtls_exit(1);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f000 f87f 	bl	80026ac <exit>
        return NULL;
 80025ae:	2500      	movs	r5, #0
 80025b0:	e002      	b.n	80025b8 <buffer_alloc_calloc+0x120>
 80025b2:	2500      	movs	r5, #0
 80025b4:	e000      	b.n	80025b8 <buffer_alloc_calloc+0x120>
 80025b6:	2500      	movs	r5, #0
}
 80025b8:	4628      	mov	r0, r5
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 80025bc:	2500      	movs	r5, #0
 80025be:	e7fb      	b.n	80025b8 <buffer_alloc_calloc+0x120>
        return NULL;
 80025c0:	4625      	mov	r5, r4
 80025c2:	e7f9      	b.n	80025b8 <buffer_alloc_calloc+0x120>
 80025c4:	200109fc 	.word	0x200109fc
 80025c8:	ff00aa55 	.word	0xff00aa55
 80025cc:	ee119966 	.word	0xee119966

080025d0 <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock(&heap.mutex);
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init(unsigned char *buf, size_t len)
{
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4605      	mov	r5, r0
 80025d4:	460c      	mov	r4, r1
    memset(&heap, 0, sizeof(buffer_alloc_ctx));
 80025d6:	2214      	movs	r2, #20
 80025d8:	2100      	movs	r1, #0
 80025da:	4813      	ldr	r0, [pc, #76]	; (8002628 <mbedtls_memory_buffer_alloc_init+0x58>)
 80025dc:	f000 f89e 	bl	800271c <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init(&heap.mutex);
    mbedtls_platform_set_calloc_free(buffer_alloc_calloc_mutexed,
                                     buffer_alloc_free_mutexed);
#else
    mbedtls_platform_set_calloc_free(buffer_alloc_calloc, buffer_alloc_free);
 80025e0:	4912      	ldr	r1, [pc, #72]	; (800262c <mbedtls_memory_buffer_alloc_init+0x5c>)
 80025e2:	4813      	ldr	r0, [pc, #76]	; (8002630 <mbedtls_memory_buffer_alloc_init+0x60>)
 80025e4:	f000 f83c 	bl	8002660 <mbedtls_platform_set_calloc_free>
#endif

    if (len < sizeof(memory_header) + MBEDTLS_MEMORY_ALIGN_MULTIPLE) {
 80025e8:	2c23      	cmp	r4, #35	; 0x23
 80025ea:	d91c      	bls.n	8002626 <mbedtls_memory_buffer_alloc_init+0x56>
        return;
    } else if ((size_t) buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE) {
 80025ec:	f015 0303 	ands.w	r3, r5, #3
 80025f0:	d004      	beq.n	80025fc <mbedtls_memory_buffer_alloc_init+0x2c>
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
 80025f2:	441c      	add	r4, r3
 80025f4:	3c04      	subs	r4, #4
               - (size_t) buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
               - (size_t) buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
 80025f6:	f1c3 0304 	rsb	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
 80025fa:	441d      	add	r5, r3
    }

    memset(buf, 0, len);
 80025fc:	4622      	mov	r2, r4
 80025fe:	2100      	movs	r1, #0
 8002600:	4628      	mov	r0, r5
 8002602:	f000 f88b 	bl	800271c <memset>

    heap.buf = buf;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <mbedtls_memory_buffer_alloc_init+0x58>)
 8002608:	601d      	str	r5, [r3, #0]
    heap.len = len;
 800260a:	605c      	str	r4, [r3, #4]

    heap.first = (memory_header *) buf;
 800260c:	609d      	str	r5, [r3, #8]
    heap.first->size = len - sizeof(memory_header);
 800260e:	3c20      	subs	r4, #32
 8002610:	606c      	str	r4, [r5, #4]
    heap.first->magic1 = MAGIC1;
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4907      	ldr	r1, [pc, #28]	; (8002634 <mbedtls_memory_buffer_alloc_init+0x64>)
 8002616:	6011      	str	r1, [r2, #0]
    heap.first->magic2 = MAGIC2;
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	f1a1 2110 	sub.w	r1, r1, #268439552	; 0x10001000
 800261e:	f1a1 11ef 	sub.w	r1, r1, #15663343	; 0xef00ef
 8002622:	61d1      	str	r1, [r2, #28]
    heap.first_free = heap.first;
 8002624:	60da      	str	r2, [r3, #12]
}
 8002626:	bd38      	pop	{r3, r4, r5, pc}
 8002628:	200109fc 	.word	0x200109fc
 800262c:	08002371 	.word	0x08002371
 8002630:	08002499 	.word	0x08002499
 8002634:	ff00aa55 	.word	0xff00aa55

08002638 <platform_calloc_uninit>:
static void *platform_calloc_uninit(size_t n, size_t size)
{
    ((void) n);
    ((void) size);
    return NULL;
}
 8002638:	2000      	movs	r0, #0
 800263a:	4770      	bx	lr

0800263c <platform_free_uninit>:

#if !defined(MBEDTLS_PLATFORM_STD_FREE)
static void platform_free_uninit(void *ptr)
{
    ((void) ptr);
}
 800263c:	4770      	bx	lr
	...

08002640 <mbedtls_calloc>:

static void * (*mbedtls_calloc_func)(size_t, size_t) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)(void *) = MBEDTLS_PLATFORM_STD_FREE;

void *mbedtls_calloc(size_t nmemb, size_t size)
{
 8002640:	b508      	push	{r3, lr}
    return (*mbedtls_calloc_func)(nmemb, size);
 8002642:	4b02      	ldr	r3, [pc, #8]	; (800264c <mbedtls_calloc+0xc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4798      	blx	r3
}
 8002648:	bd08      	pop	{r3, pc}
 800264a:	bf00      	nop
 800264c:	20000048 	.word	0x20000048

08002650 <mbedtls_free>:

void mbedtls_free(void *ptr)
{
 8002650:	b508      	push	{r3, lr}
    (*mbedtls_free_func)(ptr);
 8002652:	4b02      	ldr	r3, [pc, #8]	; (800265c <mbedtls_free+0xc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4798      	blx	r3
}
 8002658:	bd08      	pop	{r3, pc}
 800265a:	bf00      	nop
 800265c:	2000004c 	.word	0x2000004c

08002660 <mbedtls_platform_set_calloc_free>:

int mbedtls_platform_set_calloc_free(void *(*calloc_func)(size_t, size_t),
                                     void (*free_func)(void *))
{
    mbedtls_calloc_func = calloc_func;
 8002660:	4b02      	ldr	r3, [pc, #8]	; (800266c <mbedtls_platform_set_calloc_free+0xc>)
 8002662:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <mbedtls_platform_set_calloc_free+0x10>)
 8002666:	6019      	str	r1, [r3, #0]
    return 0;
}
 8002668:	2000      	movs	r0, #0
 800266a:	4770      	bx	lr
 800266c:	20000048 	.word	0x20000048
 8002670:	2000004c 	.word	0x2000004c

08002674 <mbedtls_platform_zeroize>:
    && !defined(_WIN32)
static void *(*const volatile memset_func)(void *, int, size_t) = memset;
#endif

void mbedtls_platform_zeroize(void *buf, size_t len)
{
 8002674:	b510      	push	{r4, lr}
 8002676:	4604      	mov	r4, r0
    if (len > 0) {
 8002678:	460a      	mov	r2, r1
 800267a:	b119      	cbz	r1, 8002684 <mbedtls_platform_zeroize+0x10>
#elif defined(__STDC_LIB_EXT1__) && !defined(__IAR_SYSTEMS_ICC__)
        memset_s(buf, len, 0, len);
#elif defined(_WIN32)
        SecureZeroMemory(buf, len);
#else
        memset_func(buf, 0, len);
 800267c:	4b02      	ldr	r3, [pc, #8]	; (8002688 <mbedtls_platform_zeroize+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2100      	movs	r1, #0
 8002682:	4798      	blx	r3
#pragma GCC diagnostic pop
#endif
#endif
#endif
    }
}
 8002684:	bd10      	pop	{r4, pc}
 8002686:	bf00      	nop
 8002688:	20000050 	.word	0x20000050

0800268c <mbedtls_zeroize_and_free>:
#endif /* MBEDTLS_PLATFORM_ZEROIZE_ALT */

void mbedtls_zeroize_and_free(void *buf, size_t len)
{
 800268c:	b510      	push	{r4, lr}
    if (buf != NULL) {
 800268e:	4604      	mov	r4, r0
 8002690:	b108      	cbz	r0, 8002696 <mbedtls_zeroize_and_free+0xa>
        mbedtls_platform_zeroize(buf, len);
 8002692:	f7ff ffef 	bl	8002674 <mbedtls_platform_zeroize>
    }

    mbedtls_free(buf);
 8002696:	4620      	mov	r0, r4
 8002698:	f7ff ffda 	bl	8002650 <mbedtls_free>
}
 800269c:	bd10      	pop	{r4, pc}
	...

080026a0 <__errno>:
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <__errno+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000054 	.word	0x20000054

080026ac <exit>:
 80026ac:	b508      	push	{r3, lr}
 80026ae:	2100      	movs	r1, #0
 80026b0:	4604      	mov	r4, r0
 80026b2:	f000 f88f 	bl	80027d4 <__call_exitprocs>
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <exit+0x1c>)
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80026bc:	b103      	cbz	r3, 80026c0 <exit+0x14>
 80026be:	4798      	blx	r3
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7fe f90b 	bl	80008dc <_exit>
 80026c6:	bf00      	nop
 80026c8:	0800489c 	.word	0x0800489c

080026cc <__libc_init_array>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	4e0d      	ldr	r6, [pc, #52]	; (8002704 <__libc_init_array+0x38>)
 80026d0:	4d0d      	ldr	r5, [pc, #52]	; (8002708 <__libc_init_array+0x3c>)
 80026d2:	1b76      	subs	r6, r6, r5
 80026d4:	10b6      	asrs	r6, r6, #2
 80026d6:	d006      	beq.n	80026e6 <__libc_init_array+0x1a>
 80026d8:	2400      	movs	r4, #0
 80026da:	f855 3b04 	ldr.w	r3, [r5], #4
 80026de:	3401      	adds	r4, #1
 80026e0:	4798      	blx	r3
 80026e2:	42a6      	cmp	r6, r4
 80026e4:	d1f9      	bne.n	80026da <__libc_init_array+0xe>
 80026e6:	4e09      	ldr	r6, [pc, #36]	; (800270c <__libc_init_array+0x40>)
 80026e8:	4d09      	ldr	r5, [pc, #36]	; (8002710 <__libc_init_array+0x44>)
 80026ea:	1b76      	subs	r6, r6, r5
 80026ec:	f001 ff20 	bl	8004530 <_init>
 80026f0:	10b6      	asrs	r6, r6, #2
 80026f2:	d006      	beq.n	8002702 <__libc_init_array+0x36>
 80026f4:	2400      	movs	r4, #0
 80026f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fa:	3401      	adds	r4, #1
 80026fc:	4798      	blx	r3
 80026fe:	42a6      	cmp	r6, r4
 8002700:	d1f9      	bne.n	80026f6 <__libc_init_array+0x2a>
 8002702:	bd70      	pop	{r4, r5, r6, pc}
 8002704:	080048c8 	.word	0x080048c8
 8002708:	080048c8 	.word	0x080048c8
 800270c:	080048d0 	.word	0x080048d0
 8002710:	080048c8 	.word	0x080048c8

08002714 <__retarget_lock_acquire_recursive>:
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop

08002718 <__retarget_lock_release_recursive>:
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop

0800271c <memset>:
 800271c:	0783      	lsls	r3, r0, #30
 800271e:	b530      	push	{r4, r5, lr}
 8002720:	d048      	beq.n	80027b4 <memset+0x98>
 8002722:	1e54      	subs	r4, r2, #1
 8002724:	2a00      	cmp	r2, #0
 8002726:	d03f      	beq.n	80027a8 <memset+0x8c>
 8002728:	b2ca      	uxtb	r2, r1
 800272a:	4603      	mov	r3, r0
 800272c:	e001      	b.n	8002732 <memset+0x16>
 800272e:	3c01      	subs	r4, #1
 8002730:	d33a      	bcc.n	80027a8 <memset+0x8c>
 8002732:	f803 2b01 	strb.w	r2, [r3], #1
 8002736:	079d      	lsls	r5, r3, #30
 8002738:	d1f9      	bne.n	800272e <memset+0x12>
 800273a:	2c03      	cmp	r4, #3
 800273c:	d92d      	bls.n	800279a <memset+0x7e>
 800273e:	b2cd      	uxtb	r5, r1
 8002740:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8002744:	2c0f      	cmp	r4, #15
 8002746:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800274a:	d936      	bls.n	80027ba <memset+0x9e>
 800274c:	f1a4 0210 	sub.w	r2, r4, #16
 8002750:	f022 0c0f 	bic.w	ip, r2, #15
 8002754:	f103 0e20 	add.w	lr, r3, #32
 8002758:	44e6      	add	lr, ip
 800275a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800275e:	f103 0210 	add.w	r2, r3, #16
 8002762:	e942 5504 	strd	r5, r5, [r2, #-16]
 8002766:	e942 5502 	strd	r5, r5, [r2, #-8]
 800276a:	3210      	adds	r2, #16
 800276c:	4572      	cmp	r2, lr
 800276e:	d1f8      	bne.n	8002762 <memset+0x46>
 8002770:	f10c 0201 	add.w	r2, ip, #1
 8002774:	f014 0f0c 	tst.w	r4, #12
 8002778:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800277c:	f004 0c0f 	and.w	ip, r4, #15
 8002780:	d013      	beq.n	80027aa <memset+0x8e>
 8002782:	f1ac 0304 	sub.w	r3, ip, #4
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	3304      	adds	r3, #4
 800278c:	4413      	add	r3, r2
 800278e:	f842 5b04 	str.w	r5, [r2], #4
 8002792:	4293      	cmp	r3, r2
 8002794:	d1fb      	bne.n	800278e <memset+0x72>
 8002796:	f00c 0403 	and.w	r4, ip, #3
 800279a:	b12c      	cbz	r4, 80027a8 <memset+0x8c>
 800279c:	b2ca      	uxtb	r2, r1
 800279e:	441c      	add	r4, r3
 80027a0:	f803 2b01 	strb.w	r2, [r3], #1
 80027a4:	429c      	cmp	r4, r3
 80027a6:	d1fb      	bne.n	80027a0 <memset+0x84>
 80027a8:	bd30      	pop	{r4, r5, pc}
 80027aa:	4664      	mov	r4, ip
 80027ac:	4613      	mov	r3, r2
 80027ae:	2c00      	cmp	r4, #0
 80027b0:	d1f4      	bne.n	800279c <memset+0x80>
 80027b2:	e7f9      	b.n	80027a8 <memset+0x8c>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4614      	mov	r4, r2
 80027b8:	e7bf      	b.n	800273a <memset+0x1e>
 80027ba:	461a      	mov	r2, r3
 80027bc:	46a4      	mov	ip, r4
 80027be:	e7e0      	b.n	8002782 <memset+0x66>

080027c0 <register_fini>:
 80027c0:	4b02      	ldr	r3, [pc, #8]	; (80027cc <register_fini+0xc>)
 80027c2:	b113      	cbz	r3, 80027ca <register_fini+0xa>
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <register_fini+0x10>)
 80027c6:	f000 b867 	b.w	8002898 <atexit>
 80027ca:	4770      	bx	lr
 80027cc:	00000000 	.word	0x00000000
 80027d0:	080028a5 	.word	0x080028a5

080027d4 <__call_exitprocs>:
 80027d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <__call_exitprocs+0xbc>)
 80027da:	b083      	sub	sp, #12
 80027dc:	4683      	mov	fp, r0
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	f8cd b004 	str.w	fp, [sp, #4]
 80027e4:	460f      	mov	r7, r1
 80027e6:	f7ff ff95 	bl	8002714 <__retarget_lock_acquire_recursive>
 80027ea:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <__call_exitprocs+0xc0>)
 80027ec:	f8d3 8000 	ldr.w	r8, [r3]
 80027f0:	f8d8 6148 	ldr.w	r6, [r8, #328]	; 0x148
 80027f4:	b19e      	cbz	r6, 800281e <__call_exitprocs+0x4a>
 80027f6:	f04f 0901 	mov.w	r9, #1
 80027fa:	f04f 0a00 	mov.w	sl, #0
 80027fe:	6874      	ldr	r4, [r6, #4]
 8002800:	1e65      	subs	r5, r4, #1
 8002802:	d40c      	bmi.n	800281e <__call_exitprocs+0x4a>
 8002804:	3401      	adds	r4, #1
 8002806:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800280a:	b17f      	cbz	r7, 800282c <__call_exitprocs+0x58>
 800280c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8002810:	42bb      	cmp	r3, r7
 8002812:	d00b      	beq.n	800282c <__call_exitprocs+0x58>
 8002814:	3d01      	subs	r5, #1
 8002816:	1c6b      	adds	r3, r5, #1
 8002818:	f1a4 0404 	sub.w	r4, r4, #4
 800281c:	d1f5      	bne.n	800280a <__call_exitprocs+0x36>
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <__call_exitprocs+0xbc>)
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	b003      	add	sp, #12
 8002824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002828:	f7ff bf76 	b.w	8002718 <__retarget_lock_release_recursive>
 800282c:	6873      	ldr	r3, [r6, #4]
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	3b01      	subs	r3, #1
 8002832:	42ab      	cmp	r3, r5
 8002834:	bf0c      	ite	eq
 8002836:	6075      	streq	r5, [r6, #4]
 8002838:	f8c4 a000 	strne.w	sl, [r4]
 800283c:	2a00      	cmp	r2, #0
 800283e:	d0e9      	beq.n	8002814 <__call_exitprocs+0x40>
 8002840:	f8d6 0188 	ldr.w	r0, [r6, #392]	; 0x188
 8002844:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8002848:	fa09 f105 	lsl.w	r1, r9, r5
 800284c:	4201      	tst	r1, r0
 800284e:	d10b      	bne.n	8002868 <__call_exitprocs+0x94>
 8002850:	4790      	blx	r2
 8002852:	6872      	ldr	r2, [r6, #4]
 8002854:	455a      	cmp	r2, fp
 8002856:	d112      	bne.n	800287e <__call_exitprocs+0xaa>
 8002858:	f8d8 3148 	ldr.w	r3, [r8, #328]	; 0x148
 800285c:	42b3      	cmp	r3, r6
 800285e:	d0d9      	beq.n	8002814 <__call_exitprocs+0x40>
 8002860:	461e      	mov	r6, r3
 8002862:	2e00      	cmp	r6, #0
 8002864:	d1cb      	bne.n	80027fe <__call_exitprocs+0x2a>
 8002866:	e7da      	b.n	800281e <__call_exitprocs+0x4a>
 8002868:	f8d6 018c 	ldr.w	r0, [r6, #396]	; 0x18c
 800286c:	4201      	tst	r1, r0
 800286e:	d10b      	bne.n	8002888 <__call_exitprocs+0xb4>
 8002870:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002874:	9801      	ldr	r0, [sp, #4]
 8002876:	4790      	blx	r2
 8002878:	6872      	ldr	r2, [r6, #4]
 800287a:	455a      	cmp	r2, fp
 800287c:	d0ec      	beq.n	8002858 <__call_exitprocs+0x84>
 800287e:	f8d8 6148 	ldr.w	r6, [r8, #328]	; 0x148
 8002882:	2e00      	cmp	r6, #0
 8002884:	d1bb      	bne.n	80027fe <__call_exitprocs+0x2a>
 8002886:	e7ca      	b.n	800281e <__call_exitprocs+0x4a>
 8002888:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800288c:	4790      	blx	r2
 800288e:	e7e0      	b.n	8002852 <__call_exitprocs+0x7e>
 8002890:	20000480 	.word	0x20000480
 8002894:	0800489c 	.word	0x0800489c

08002898 <atexit>:
 8002898:	2300      	movs	r3, #0
 800289a:	4601      	mov	r1, r0
 800289c:	461a      	mov	r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 b816 	b.w	80028d0 <__register_exitproc>

080028a4 <__libc_fini_array>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <__libc_fini_array+0x24>)
 80028a8:	4d08      	ldr	r5, [pc, #32]	; (80028cc <__libc_fini_array+0x28>)
 80028aa:	1b5b      	subs	r3, r3, r5
 80028ac:	109c      	asrs	r4, r3, #2
 80028ae:	d007      	beq.n	80028c0 <__libc_fini_array+0x1c>
 80028b0:	3b04      	subs	r3, #4
 80028b2:	441d      	add	r5, r3
 80028b4:	3c01      	subs	r4, #1
 80028b6:	f855 3904 	ldr.w	r3, [r5], #-4
 80028ba:	4798      	blx	r3
 80028bc:	2c00      	cmp	r4, #0
 80028be:	d1f9      	bne.n	80028b4 <__libc_fini_array+0x10>
 80028c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028c4:	f001 be3a 	b.w	800453c <_fini>
 80028c8:	080048d4 	.word	0x080048d4
 80028cc:	080048d0 	.word	0x080048d0

080028d0 <__register_exitproc>:
 80028d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8002954 <__register_exitproc+0x84>
 80028d8:	4606      	mov	r6, r0
 80028da:	f8da 0000 	ldr.w	r0, [sl]
 80028de:	4698      	mov	r8, r3
 80028e0:	460f      	mov	r7, r1
 80028e2:	4691      	mov	r9, r2
 80028e4:	f7ff ff16 	bl	8002714 <__retarget_lock_acquire_recursive>
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <__register_exitproc+0x88>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80028f0:	b324      	cbz	r4, 800293c <__register_exitproc+0x6c>
 80028f2:	6865      	ldr	r5, [r4, #4]
 80028f4:	2d1f      	cmp	r5, #31
 80028f6:	dc26      	bgt.n	8002946 <__register_exitproc+0x76>
 80028f8:	b95e      	cbnz	r6, 8002912 <__register_exitproc+0x42>
 80028fa:	1c6b      	adds	r3, r5, #1
 80028fc:	3502      	adds	r5, #2
 80028fe:	f8da 0000 	ldr.w	r0, [sl]
 8002902:	6063      	str	r3, [r4, #4]
 8002904:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8002908:	f7ff ff06 	bl	8002718 <__retarget_lock_release_recursive>
 800290c:	2000      	movs	r0, #0
 800290e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002912:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8002916:	2301      	movs	r3, #1
 8002918:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800291c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8002920:	40ab      	lsls	r3, r5
 8002922:	431a      	orrs	r2, r3
 8002924:	2e02      	cmp	r6, #2
 8002926:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800292a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800292e:	d1e4      	bne.n	80028fa <__register_exitproc+0x2a>
 8002930:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800293a:	e7de      	b.n	80028fa <__register_exitproc+0x2a>
 800293c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8002940:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8002944:	e7d5      	b.n	80028f2 <__register_exitproc+0x22>
 8002946:	f8da 0000 	ldr.w	r0, [sl]
 800294a:	f7ff fee5 	bl	8002718 <__retarget_lock_release_recursive>
 800294e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002952:	e7dc      	b.n	800290e <__register_exitproc+0x3e>
 8002954:	20000480 	.word	0x20000480
 8002958:	0800489c 	.word	0x0800489c

0800295c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800295c:	b510      	push	{r4, lr}
 800295e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002960:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_InitTick+0x40>)
 8002962:	7818      	ldrb	r0, [r3, #0]
 8002964:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002968:	fbb3 f3f0 	udiv	r3, r3, r0
 800296c:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_InitTick+0x44>)
 800296e:	6810      	ldr	r0, [r2, #0]
 8002970:	fbb0 f0f3 	udiv	r0, r0, r3
 8002974:	f000 f8ac 	bl	8002ad0 <HAL_SYSTICK_Config>
 8002978:	b968      	cbnz	r0, 8002996 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297a:	2c0f      	cmp	r4, #15
 800297c:	d901      	bls.n	8002982 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800297e:	2001      	movs	r0, #1
 8002980:	e00a      	b.n	8002998 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002982:	2200      	movs	r2, #0
 8002984:	4621      	mov	r1, r4
 8002986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800298a:	f000 f85b 	bl	8002a44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_InitTick+0x48>)
 8002990:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002992:	2000      	movs	r0, #0
 8002994:	e000      	b.n	8002998 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002996:	2001      	movs	r0, #1
}
 8002998:	bd10      	pop	{r4, pc}
 800299a:	bf00      	nop
 800299c:	20000484 	.word	0x20000484
 80029a0:	2000048c 	.word	0x2000048c
 80029a4:	20000488 	.word	0x20000488

080029a8 <HAL_Init>:
{
 80029a8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_Init+0x28>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029bc:	2003      	movs	r0, #3
 80029be:	f000 f82f 	bl	8002a20 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c2:	200f      	movs	r0, #15
 80029c4:	f7ff ffca 	bl	800295c <HAL_InitTick>
  HAL_MspInit();
 80029c8:	f7fe f92c 	bl	8000c24 <HAL_MspInit>
}
 80029cc:	2000      	movs	r0, #0
 80029ce:	bd08      	pop	{r3, pc}
 80029d0:	40023c00 	.word	0x40023c00

080029d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029d4:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <HAL_IncTick+0x10>)
 80029d6:	6811      	ldr	r1, [r2, #0]
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_IncTick+0x14>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	440b      	add	r3, r1
 80029de:	6013      	str	r3, [r2, #0]
}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20010a14 	.word	0x20010a14
 80029e8:	20000484 	.word	0x20000484

080029ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80029ec:	4b01      	ldr	r3, [pc, #4]	; (80029f4 <HAL_GetTick+0x8>)
 80029ee:	6818      	ldr	r0, [r3, #0]
}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20010a14 	.word	0x20010a14

080029f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff fff6 	bl	80029ec <HAL_GetTick>
 8002a00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a02:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002a06:	d002      	beq.n	8002a0e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <HAL_Delay+0x24>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0e:	f7ff ffed 	bl	80029ec <HAL_GetTick>
 8002a12:	1b40      	subs	r0, r0, r5
 8002a14:	42a0      	cmp	r0, r4
 8002a16:	d3fa      	bcc.n	8002a0e <HAL_Delay+0x16>
  {
  }
}
 8002a18:	bd38      	pop	{r3, r4, r5, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000484 	.word	0x20000484

08002a20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a20:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a2c:	0200      	lsls	r0, r0, #8
 8002a2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a32:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a3c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a44:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_NVIC_SetPriority+0x68>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a4e:	f1c3 0c07 	rsb	ip, r3, #7
 8002a52:	f1bc 0f04 	cmp.w	ip, #4
 8002a56:	bf28      	it	cs
 8002a58:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5c:	f103 0e04 	add.w	lr, r3, #4
 8002a60:	f1be 0f06 	cmp.w	lr, #6
 8002a64:	d918      	bls.n	8002a98 <HAL_NVIC_SetPriority+0x54>
 8002a66:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8002a6c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002a70:	ea21 010c 	bic.w	r1, r1, ip
 8002a74:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a76:	fa0e f303 	lsl.w	r3, lr, r3
 8002a7a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002a80:	2800      	cmp	r0, #0
 8002a82:	db0b      	blt.n	8002a9c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	0109      	lsls	r1, r1, #4
 8002a86:	b2c9      	uxtb	r1, r1
 8002a88:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002a8c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002a90:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a94:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e7e5      	b.n	8002a68 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	f000 000f 	and.w	r0, r0, #15
 8002aa0:	0109      	lsls	r1, r1, #4
 8002aa2:	b2c9      	uxtb	r1, r1
 8002aa4:	4b02      	ldr	r3, [pc, #8]	; (8002ab0 <HAL_NVIC_SetPriority+0x6c>)
 8002aa6:	5419      	strb	r1, [r3, r0]
 8002aa8:	e7f4      	b.n	8002a94 <HAL_NVIC_SetPriority+0x50>
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00
 8002ab0:	e000ed14 	.word	0xe000ed14

08002ab4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	db07      	blt.n	8002ac8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab8:	f000 021f 	and.w	r2, r0, #31
 8002abc:	0940      	lsrs	r0, r0, #5
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4093      	lsls	r3, r2
 8002ac2:	4a02      	ldr	r2, [pc, #8]	; (8002acc <HAL_NVIC_EnableIRQ+0x18>)
 8002ac4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e100 	.word	0xe000e100

08002ad0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad0:	3801      	subs	r0, #1
 8002ad2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002ad6:	d20b      	bcs.n	8002af0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002adc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <HAL_SYSTICK_Config+0x24>)
 8002ae0:	21f0      	movs	r1, #240	; 0xf0
 8002ae2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aea:	2207      	movs	r2, #7
 8002aec:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aee:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002af0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002af8:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002afa:	6803      	ldr	r3, [r0, #0]
 8002afc:	b2d9      	uxtb	r1, r3
 8002afe:	3910      	subs	r1, #16
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <DMA_CalcBaseAndBitshift+0x38>)
 8002b02:	fba2 4201 	umull	r4, r2, r2, r1
 8002b06:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b08:	4c0a      	ldr	r4, [pc, #40]	; (8002b34 <DMA_CalcBaseAndBitshift+0x3c>)
 8002b0a:	5ca2      	ldrb	r2, [r4, r2]
 8002b0c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b0e:	295f      	cmp	r1, #95	; 0x5f
 8002b10:	d908      	bls.n	8002b24 <DMA_CalcBaseAndBitshift+0x2c>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002b1e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002b20:	bc10      	pop	{r4}
 8002b22:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b24:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b28:	f023 0303 	bic.w	r3, r3, #3
 8002b2c:	6583      	str	r3, [r0, #88]	; 0x58
 8002b2e:	e7f6      	b.n	8002b1e <DMA_CalcBaseAndBitshift+0x26>
 8002b30:	aaaaaaab 	.word	0xaaaaaaab
 8002b34:	080048a0 	.word	0x080048a0

08002b38 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b38:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b3a:	6982      	ldr	r2, [r0, #24]
 8002b3c:	b992      	cbnz	r2, 8002b64 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d00a      	beq.n	8002b58 <DMA_CheckFifoParam+0x20>
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d002      	beq.n	8002b4c <DMA_CheckFifoParam+0x14>
 8002b46:	b10b      	cbz	r3, 8002b4c <DMA_CheckFifoParam+0x14>
 8002b48:	2000      	movs	r0, #0
 8002b4a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b4e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b52:	d128      	bne.n	8002ba6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2000      	movs	r0, #0
 8002b56:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b5e:	d024      	beq.n	8002baa <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8002b60:	2000      	movs	r0, #0
 8002b62:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b64:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002b68:	d009      	beq.n	8002b7e <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d925      	bls.n	8002bba <DMA_CheckFifoParam+0x82>
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d125      	bne.n	8002bbe <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b74:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b78:	d123      	bne.n	8002bc2 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	4770      	bx	lr
    switch (tmp)
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d803      	bhi.n	8002b8a <DMA_CheckFifoParam+0x52>
 8002b82:	e8df f003 	tbb	[pc, r3]
 8002b86:	0414      	.short	0x0414
 8002b88:	0a14      	.short	0x0a14
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b90:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b94:	d10d      	bne.n	8002bb2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2000      	movs	r0, #0
 8002b98:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba0:	d009      	beq.n	8002bb6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	4770      	bx	lr
        status = HAL_ERROR;
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	4770      	bx	lr
        status = HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
 8002bac:	4770      	bx	lr
      status = HAL_ERROR;
 8002bae:	2001      	movs	r0, #1
 8002bb0:	4770      	bx	lr
        status = HAL_ERROR;
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	4770      	bx	lr
        status = HAL_ERROR;
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	4770      	bx	lr
      status = HAL_ERROR;
 8002bba:	2001      	movs	r0, #1
 8002bbc:	4770      	bx	lr
    switch (tmp)
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8002bc2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_DMA_Init>:
{
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002bcc:	f7ff ff0e 	bl	80029ec <HAL_GetTick>
 8002bd0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002bd2:	2c00      	cmp	r4, #0
 8002bd4:	d05a      	beq.n	8002c8c <HAL_DMA_Init+0xc4>
  __HAL_UNLOCK(hdma);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002be2:	6822      	ldr	r2, [r4, #0]
 8002be4:	6813      	ldr	r3, [r2, #0]
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f012 0f01 	tst.w	r2, #1
 8002bf4:	d00a      	beq.n	8002c0c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf6:	f7ff fef9 	bl	80029ec <HAL_GetTick>
 8002bfa:	1b43      	subs	r3, r0, r5
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d9f5      	bls.n	8002bec <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c00:	2320      	movs	r3, #32
 8002c02:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c04:	2003      	movs	r0, #3
 8002c06:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002c0c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c0e:	4820      	ldr	r0, [pc, #128]	; (8002c90 <HAL_DMA_Init+0xc8>)
 8002c10:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c12:	6861      	ldr	r1, [r4, #4]
 8002c14:	68a2      	ldr	r2, [r4, #8]
 8002c16:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c18:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c1a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1c:	6921      	ldr	r1, [r4, #16]
 8002c1e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c20:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c22:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c24:	69a1      	ldr	r1, [r4, #24]
 8002c26:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c28:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2c:	6a21      	ldr	r1, [r4, #32]
 8002c2e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c30:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c32:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c34:	2904      	cmp	r1, #4
 8002c36:	d01e      	beq.n	8002c76 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002c38:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002c3a:	6826      	ldr	r6, [r4, #0]
 8002c3c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c3e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c44:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d107      	bne.n	8002c5a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002c4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c4c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c50:	b11b      	cbz	r3, 8002c5a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7ff ff70 	bl	8002b38 <DMA_CheckFifoParam>
 8002c58:	b990      	cbnz	r0, 8002c80 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002c5a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff ff4b 	bl	8002af8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c62:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002c64:	233f      	movs	r3, #63	; 0x3f
 8002c66:	4093      	lsls	r3, r2
 8002c68:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002c74:	e7c9      	b.n	8002c0a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c78:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c7a:	4301      	orrs	r1, r0
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	e7db      	b.n	8002c38 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c80:	2340      	movs	r3, #64	; 0x40
 8002c82:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002c84:	2001      	movs	r0, #1
 8002c86:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002c8a:	e7be      	b.n	8002c0a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	e7bc      	b.n	8002c0a <HAL_DMA_Init+0x42>
 8002c90:	f010803f 	.word	0xf010803f

08002c94 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c94:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002cac:	6802      	ldr	r2, [r0, #0]
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002cb6:	2000      	movs	r0, #0
}
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_DMA_IRQHandler>:
{
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cc6:	4b72      	ldr	r3, [pc, #456]	; (8002e90 <HAL_DMA_IRQHandler+0x1d4>)
 8002cc8:	681d      	ldr	r5, [r3, #0]
 8002cca:	4b72      	ldr	r3, [pc, #456]	; (8002e94 <HAL_DMA_IRQHandler+0x1d8>)
 8002ccc:	fba3 3505 	umull	r3, r5, r3, r5
 8002cd0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002cd4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cd6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002cd8:	2308      	movs	r3, #8
 8002cda:	4093      	lsls	r3, r2
 8002cdc:	4233      	tst	r3, r6
 8002cde:	d010      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ce0:	6803      	ldr	r3, [r0, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	f012 0f04 	tst.w	r2, #4
 8002ce8:	d00b      	beq.n	8002d02 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	f022 0204 	bic.w	r2, r2, #4
 8002cf0:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cf2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cfa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d04:	2301      	movs	r3, #1
 8002d06:	4093      	lsls	r3, r2
 8002d08:	4233      	tst	r3, r6
 8002d0a:	d009      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d0c:	6822      	ldr	r2, [r4, #0]
 8002d0e:	6952      	ldr	r2, [r2, #20]
 8002d10:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d14:	d004      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d16:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d22:	2304      	movs	r3, #4
 8002d24:	4093      	lsls	r3, r2
 8002d26:	4233      	tst	r3, r6
 8002d28:	d009      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d2a:	6822      	ldr	r2, [r4, #0]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	f012 0f02 	tst.w	r2, #2
 8002d32:	d004      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d34:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d38:	f043 0304 	orr.w	r3, r3, #4
 8002d3c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d40:	2310      	movs	r3, #16
 8002d42:	4093      	lsls	r3, r2
 8002d44:	4233      	tst	r3, r6
 8002d46:	d024      	beq.n	8002d92 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d48:	6822      	ldr	r2, [r4, #0]
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	f012 0f08 	tst.w	r2, #8
 8002d50:	d01f      	beq.n	8002d92 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d52:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002d5c:	d00d      	beq.n	8002d7a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002d64:	d104      	bne.n	8002d70 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d68:	b19b      	cbz	r3, 8002d92 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	4798      	blx	r3
 8002d6e:	e010      	b.n	8002d92 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d72:	b173      	cbz	r3, 8002d92 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002d74:	4620      	mov	r0, r4
 8002d76:	4798      	blx	r3
 8002d78:	e00b      	b.n	8002d92 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d80:	d103      	bne.n	8002d8a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	f022 0208 	bic.w	r2, r2, #8
 8002d88:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d8c:	b10b      	cbz	r3, 8002d92 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002d8e:	4620      	mov	r0, r4
 8002d90:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d92:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d94:	2320      	movs	r3, #32
 8002d96:	4093      	lsls	r3, r2
 8002d98:	4233      	tst	r3, r6
 8002d9a:	d055      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d9c:	6822      	ldr	r2, [r4, #0]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	f012 0f10 	tst.w	r2, #16
 8002da4:	d050      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002da6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002da8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b05      	cmp	r3, #5
 8002db0:	d00e      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002dba:	d033      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002dc2:	d12a      	bne.n	8002e1a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002dc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03e      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002dca:	4620      	mov	r0, r4
 8002dcc:	4798      	blx	r3
 8002dce:	e03b      	b.n	8002e48 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd0:	6822      	ldr	r2, [r4, #0]
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	f023 0316 	bic.w	r3, r3, #22
 8002dd8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dda:	6822      	ldr	r2, [r4, #0]
 8002ddc:	6953      	ldr	r3, [r2, #20]
 8002dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002de2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002de4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002de6:	b1a3      	cbz	r3, 8002e12 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de8:	6822      	ldr	r2, [r4, #0]
 8002dea:	6813      	ldr	r3, [r2, #0]
 8002dec:	f023 0308 	bic.w	r3, r3, #8
 8002df0:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002df2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002df4:	233f      	movs	r3, #63	; 0x3f
 8002df6:	4093      	lsls	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002e06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d03f      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	4798      	blx	r3
        return;
 8002e10:	e03c      	b.n	8002e8c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e7      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x12c>
 8002e18:	e7eb      	b.n	8002df2 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002e1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e1c:	b1a3      	cbz	r3, 8002e48 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002e1e:	4620      	mov	r0, r4
 8002e20:	4798      	blx	r3
 8002e22:	e011      	b.n	8002e48 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002e2a:	d109      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	f022 0210 	bic.w	r2, r2, #16
 8002e32:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002e34:	2300      	movs	r3, #0
 8002e36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e42:	b10b      	cbz	r3, 8002e48 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002e44:	4620      	mov	r0, r4
 8002e46:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e4a:	b1fb      	cbz	r3, 8002e8c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e4e:	f013 0f01 	tst.w	r3, #1
 8002e52:	d017      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e54:	2305      	movs	r3, #5
 8002e56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002e5a:	6822      	ldr	r2, [r4, #0]
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002e64:	9b01      	ldr	r3, [sp, #4]
 8002e66:	3301      	adds	r3, #1
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	42ab      	cmp	r3, r5
 8002e6c:	d804      	bhi.n	8002e78 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f013 0f01 	tst.w	r3, #1
 8002e76:	d1f5      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002e84:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002e86:	b10b      	cbz	r3, 8002e8c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002e88:	4620      	mov	r0, r4
 8002e8a:	4798      	blx	r3
}
 8002e8c:	b003      	add	sp, #12
 8002e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e90:	2000048c 	.word	0x2000048c
 8002e94:	1b4e81b5 	.word	0x1b4e81b5

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e037      	b.n	8002f10 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	e000      	b.n	8002ea6 <HAL_GPIO_Init+0xe>
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	40aa      	lsls	r2, r5
 8002ea8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eaa:	3402      	adds	r4, #2
 8002eac:	4d68      	ldr	r5, [pc, #416]	; (8003050 <HAL_GPIO_Init+0x1b8>)
 8002eae:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb2:	4a68      	ldr	r2, [pc, #416]	; (8003054 <HAL_GPIO_Init+0x1bc>)
 8002eb4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	ea6f 020c 	mvn.w	r2, ip
 8002eba:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ebe:	684e      	ldr	r6, [r1, #4]
 8002ec0:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002ec4:	d001      	beq.n	8002eca <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 8002ec6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8002eca:	4c62      	ldr	r4, [pc, #392]	; (8003054 <HAL_GPIO_Init+0x1bc>)
 8002ecc:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8002ece:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ed4:	684e      	ldr	r6, [r1, #4]
 8002ed6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8002eda:	d001      	beq.n	8002ee0 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8002edc:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002ee0:	4c5c      	ldr	r4, [pc, #368]	; (8003054 <HAL_GPIO_Init+0x1bc>)
 8002ee2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ee4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eea:	684e      	ldr	r6, [r1, #4]
 8002eec:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8002ef0:	d001      	beq.n	8002ef6 <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 8002ef2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002ef6:	4c57      	ldr	r4, [pc, #348]	; (8003054 <HAL_GPIO_Init+0x1bc>)
 8002ef8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8002efa:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002efc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002efe:	684d      	ldr	r5, [r1, #4]
 8002f00:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8002f04:	d001      	beq.n	8002f0a <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 8002f06:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8002f0a:	4c52      	ldr	r4, [pc, #328]	; (8003054 <HAL_GPIO_Init+0x1bc>)
 8002f0c:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0e:	3301      	adds	r3, #1
 8002f10:	2b0f      	cmp	r3, #15
 8002f12:	f200 809a 	bhi.w	800304a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8002f16:	2201      	movs	r2, #1
 8002f18:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f1a:	680c      	ldr	r4, [r1, #0]
 8002f1c:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002f20:	ea32 0404 	bics.w	r4, r2, r4
 8002f24:	d1f3      	bne.n	8002f0e <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f26:	684c      	ldr	r4, [r1, #4]
 8002f28:	1e65      	subs	r5, r4, #1
 8002f2a:	2d01      	cmp	r5, #1
 8002f2c:	d903      	bls.n	8002f36 <HAL_GPIO_Init+0x9e>
 8002f2e:	2c11      	cmp	r4, #17
 8002f30:	d001      	beq.n	8002f36 <HAL_GPIO_Init+0x9e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f32:	2c12      	cmp	r4, #18
 8002f34:	d112      	bne.n	8002f5c <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR; 
 8002f36:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f38:	005e      	lsls	r6, r3, #1
 8002f3a:	2403      	movs	r4, #3
 8002f3c:	40b4      	lsls	r4, r6
 8002f3e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f42:	68cc      	ldr	r4, [r1, #12]
 8002f44:	40b4      	lsls	r4, r6
 8002f46:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002f48:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002f4a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4c:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f50:	684c      	ldr	r4, [r1, #4]
 8002f52:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8002f5a:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002f5c:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f5e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002f62:	2403      	movs	r4, #3
 8002f64:	fa04 f40e 	lsl.w	r4, r4, lr
 8002f68:	43e2      	mvns	r2, r4
 8002f6a:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f6e:	688c      	ldr	r4, [r1, #8]
 8002f70:	fa04 f40e 	lsl.w	r4, r4, lr
 8002f74:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002f76:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f78:	684c      	ldr	r4, [r1, #4]
 8002f7a:	2c02      	cmp	r4, #2
 8002f7c:	d001      	beq.n	8002f82 <HAL_GPIO_Init+0xea>
 8002f7e:	2c12      	cmp	r4, #18
 8002f80:	d10f      	bne.n	8002fa2 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->AFR[position >> 3U];
 8002f82:	08dd      	lsrs	r5, r3, #3
 8002f84:	3508      	adds	r5, #8
 8002f86:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f8a:	f003 0407 	and.w	r4, r3, #7
 8002f8e:	00a6      	lsls	r6, r4, #2
 8002f90:	240f      	movs	r4, #15
 8002f92:	40b4      	lsls	r4, r6
 8002f94:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f98:	690c      	ldr	r4, [r1, #16]
 8002f9a:	40b4      	lsls	r4, r6
 8002f9c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002f9e:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8002fa2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fa4:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa6:	684a      	ldr	r2, [r1, #4]
 8002fa8:	f002 0203 	and.w	r2, r2, #3
 8002fac:	fa02 f20e 	lsl.w	r2, r2, lr
 8002fb0:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002fb2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fb4:	684a      	ldr	r2, [r1, #4]
 8002fb6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002fba:	d0a8      	beq.n	8002f0e <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	9201      	str	r2, [sp, #4]
 8002fc0:	4a25      	ldr	r2, [pc, #148]	; (8003058 <HAL_GPIO_Init+0x1c0>)
 8002fc2:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002fc4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002fc8:	6454      	str	r4, [r2, #68]	; 0x44
 8002fca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fcc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002fd0:	9201      	str	r2, [sp, #4]
 8002fd2:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002fd4:	089c      	lsrs	r4, r3, #2
 8002fd6:	1ca5      	adds	r5, r4, #2
 8002fd8:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_GPIO_Init+0x1b8>)
 8002fda:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fde:	f003 0203 	and.w	r2, r3, #3
 8002fe2:	0095      	lsls	r5, r2, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	40aa      	lsls	r2, r5
 8002fe8:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_GPIO_Init+0x1c4>)
 8002fee:	4290      	cmp	r0, r2
 8002ff0:	f43f af58 	beq.w	8002ea4 <HAL_GPIO_Init+0xc>
 8002ff4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ff8:	4290      	cmp	r0, r2
 8002ffa:	d01a      	beq.n	8003032 <HAL_GPIO_Init+0x19a>
 8002ffc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003000:	4290      	cmp	r0, r2
 8003002:	d018      	beq.n	8003036 <HAL_GPIO_Init+0x19e>
 8003004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003008:	4290      	cmp	r0, r2
 800300a:	d016      	beq.n	800303a <HAL_GPIO_Init+0x1a2>
 800300c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003010:	4290      	cmp	r0, r2
 8003012:	d014      	beq.n	800303e <HAL_GPIO_Init+0x1a6>
 8003014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003018:	4290      	cmp	r0, r2
 800301a:	d012      	beq.n	8003042 <HAL_GPIO_Init+0x1aa>
 800301c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003020:	4290      	cmp	r0, r2
 8003022:	d010      	beq.n	8003046 <HAL_GPIO_Init+0x1ae>
 8003024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003028:	4290      	cmp	r0, r2
 800302a:	f43f af39 	beq.w	8002ea0 <HAL_GPIO_Init+0x8>
 800302e:	2208      	movs	r2, #8
 8003030:	e739      	b.n	8002ea6 <HAL_GPIO_Init+0xe>
 8003032:	2201      	movs	r2, #1
 8003034:	e737      	b.n	8002ea6 <HAL_GPIO_Init+0xe>
 8003036:	2202      	movs	r2, #2
 8003038:	e735      	b.n	8002ea6 <HAL_GPIO_Init+0xe>
 800303a:	2203      	movs	r2, #3
 800303c:	e733      	b.n	8002ea6 <HAL_GPIO_Init+0xe>
 800303e:	2204      	movs	r2, #4
 8003040:	e731      	b.n	8002ea6 <HAL_GPIO_Init+0xe>
 8003042:	2205      	movs	r2, #5
 8003044:	e72f      	b.n	8002ea6 <HAL_GPIO_Init+0xe>
 8003046:	2206      	movs	r2, #6
 8003048:	e72d      	b.n	8002ea6 <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 800304a:	b003      	add	sp, #12
 800304c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304e:	bf00      	nop
 8003050:	40013800 	.word	0x40013800
 8003054:	40013c00 	.word	0x40013c00
 8003058:	40023800 	.word	0x40023800
 800305c:	40020000 	.word	0x40020000

08003060 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003060:	b10a      	cbz	r2, 8003066 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003062:	6181      	str	r1, [r0, #24]
 8003064:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003066:	0409      	lsls	r1, r1, #16
 8003068:	6181      	str	r1, [r0, #24]
  }
}
 800306a:	4770      	bx	lr

0800306c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800306c:	6943      	ldr	r3, [r0, #20]
 800306e:	ea31 0303 	bics.w	r3, r1, r3
 8003072:	d001      	beq.n	8003078 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003074:	6181      	str	r1, [r0, #24]
  }
}
 8003076:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003078:	0409      	lsls	r1, r1, #16
 800307a:	6181      	str	r1, [r0, #24]
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	b082      	sub	sp, #8
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003084:	4604      	mov	r4, r0
 8003086:	2800      	cmp	r0, #0
 8003088:	f000 81d7 	beq.w	800343a <HAL_RCC_OscConfig+0x3ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308c:	6803      	ldr	r3, [r0, #0]
 800308e:	f013 0f01 	tst.w	r3, #1
 8003092:	d03b      	beq.n	800310c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003094:	4b9f      	ldr	r3, [pc, #636]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b04      	cmp	r3, #4
 800309e:	d02c      	beq.n	80030fa <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030a0:	4b9c      	ldr	r3, [pc, #624]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d021      	beq.n	80030f0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	6863      	ldr	r3, [r4, #4]
 80030ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b2:	d04f      	beq.n	8003154 <HAL_RCC_OscConfig+0xd4>
 80030b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b8:	d052      	beq.n	8003160 <HAL_RCC_OscConfig+0xe0>
 80030ba:	4b96      	ldr	r3, [pc, #600]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030cc:	6863      	ldr	r3, [r4, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d050      	beq.n	8003174 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7ff fc8b 	bl	80029ec <HAL_GetTick>
 80030d6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d8:	4b8e      	ldr	r3, [pc, #568]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030e0:	d114      	bne.n	800310c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e2:	f7ff fc83 	bl	80029ec <HAL_GetTick>
 80030e6:	1b40      	subs	r0, r0, r5
 80030e8:	2864      	cmp	r0, #100	; 0x64
 80030ea:	d9f5      	bls.n	80030d8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80030ec:	2003      	movs	r0, #3
 80030ee:	e1a5      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f0:	4b88      	ldr	r3, [pc, #544]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80030f8:	d0d8      	beq.n	80030ac <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fa:	4b86      	ldr	r3, [pc, #536]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003102:	d003      	beq.n	800310c <HAL_RCC_OscConfig+0x8c>
 8003104:	6863      	ldr	r3, [r4, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 819a 	beq.w	8003440 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310c:	6823      	ldr	r3, [r4, #0]
 800310e:	f013 0f02 	tst.w	r3, #2
 8003112:	d054      	beq.n	80031be <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003114:	4b7f      	ldr	r3, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f013 0f0c 	tst.w	r3, #12
 800311c:	d03e      	beq.n	800319c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311e:	4b7d      	ldr	r3, [pc, #500]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003126:	2b08      	cmp	r3, #8
 8003128:	d033      	beq.n	8003192 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800312a:	68e3      	ldr	r3, [r4, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d068      	beq.n	8003202 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b79      	ldr	r3, [pc, #484]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003136:	f7ff fc59 	bl	80029ec <HAL_GetTick>
 800313a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	4b75      	ldr	r3, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f013 0f02 	tst.w	r3, #2
 8003144:	d154      	bne.n	80031f0 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003146:	f7ff fc51 	bl	80029ec <HAL_GetTick>
 800314a:	1b40      	subs	r0, r0, r5
 800314c:	2802      	cmp	r0, #2
 800314e:	d9f5      	bls.n	800313c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003150:	2003      	movs	r0, #3
 8003152:	e173      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003154:	4a6f      	ldr	r2, [pc, #444]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003156:	6813      	ldr	r3, [r2, #0]
 8003158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315c:	6013      	str	r3, [r2, #0]
 800315e:	e7b5      	b.n	80030cc <HAL_RCC_OscConfig+0x4c>
 8003160:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e7ab      	b.n	80030cc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003174:	f7ff fc3a 	bl	80029ec <HAL_GetTick>
 8003178:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317a:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003182:	d0c3      	beq.n	800310c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7ff fc32 	bl	80029ec <HAL_GetTick>
 8003188:	1b40      	subs	r0, r0, r5
 800318a:	2864      	cmp	r0, #100	; 0x64
 800318c:	d9f5      	bls.n	800317a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800318e:	2003      	movs	r0, #3
 8003190:	e154      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003192:	4b60      	ldr	r3, [pc, #384]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800319a:	d1c6      	bne.n	800312a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f013 0f02 	tst.w	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_OscConfig+0x12e>
 80031a6:	68e3      	ldr	r3, [r4, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	f040 814b 	bne.w	8003444 <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4a59      	ldr	r2, [pc, #356]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80031b0:	6813      	ldr	r3, [r2, #0]
 80031b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031b6:	6921      	ldr	r1, [r4, #16]
 80031b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031bc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	f013 0f08 	tst.w	r3, #8
 80031c4:	d042      	beq.n	800324c <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031c6:	6963      	ldr	r3, [r4, #20]
 80031c8:	b36b      	cbz	r3, 8003226 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ca:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d2:	f7ff fc0b 	bl	80029ec <HAL_GetTick>
 80031d6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d8:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f013 0f02 	tst.w	r3, #2
 80031e0:	d134      	bne.n	800324c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e2:	f7ff fc03 	bl	80029ec <HAL_GetTick>
 80031e6:	1b40      	subs	r0, r0, r5
 80031e8:	2802      	cmp	r0, #2
 80031ea:	d9f5      	bls.n	80031d8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80031ec:	2003      	movs	r0, #3
 80031ee:	e125      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f0:	4a48      	ldr	r2, [pc, #288]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80031f2:	6813      	ldr	r3, [r2, #0]
 80031f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031f8:	6921      	ldr	r1, [r4, #16]
 80031fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	e7dd      	b.n	80031be <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b45      	ldr	r3, [pc, #276]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003208:	f7ff fbf0 	bl	80029ec <HAL_GetTick>
 800320c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	4b41      	ldr	r3, [pc, #260]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f013 0f02 	tst.w	r3, #2
 8003216:	d0d2      	beq.n	80031be <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003218:	f7ff fbe8 	bl	80029ec <HAL_GetTick>
 800321c:	1b40      	subs	r0, r0, r5
 800321e:	2802      	cmp	r0, #2
 8003220:	d9f5      	bls.n	800320e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003222:	2003      	movs	r0, #3
 8003224:	e10a      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b3c      	ldr	r3, [pc, #240]	; (8003318 <HAL_RCC_OscConfig+0x298>)
 8003228:	2200      	movs	r2, #0
 800322a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7ff fbdd 	bl	80029ec <HAL_GetTick>
 8003232:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003238:	f013 0f02 	tst.w	r3, #2
 800323c:	d006      	beq.n	800324c <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323e:	f7ff fbd5 	bl	80029ec <HAL_GetTick>
 8003242:	1b40      	subs	r0, r0, r5
 8003244:	2802      	cmp	r0, #2
 8003246:	d9f5      	bls.n	8003234 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8003248:	2003      	movs	r0, #3
 800324a:	e0f7      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	f013 0f04 	tst.w	r3, #4
 8003252:	d077      	beq.n	8003344 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800325c:	d133      	bne.n	80032c6 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003266:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003276:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RCC_OscConfig+0x29c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003280:	d023      	beq.n	80032ca <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d034      	beq.n	80032f2 <HAL_RCC_OscConfig+0x272>
 8003288:	2b05      	cmp	r3, #5
 800328a:	d038      	beq.n	80032fe <HAL_RCC_OscConfig+0x27e>
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 800328e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	671a      	str	r2, [r3, #112]	; 0x70
 8003296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003298:	f022 0204 	bic.w	r2, r2, #4
 800329c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800329e:	68a3      	ldr	r3, [r4, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d03d      	beq.n	8003320 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7ff fba2 	bl	80029ec <HAL_GetTick>
 80032a8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	f013 0f02 	tst.w	r3, #2
 80032b2:	d146      	bne.n	8003342 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b4:	f7ff fb9a 	bl	80029ec <HAL_GetTick>
 80032b8:	1b80      	subs	r0, r0, r6
 80032ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80032be:	4298      	cmp	r0, r3
 80032c0:	d9f3      	bls.n	80032aa <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 80032c2:	2003      	movs	r0, #3
 80032c4:	e0ba      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
    FlagStatus       pwrclkchanged = RESET;
 80032c6:	2500      	movs	r5, #0
 80032c8:	e7d6      	b.n	8003278 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4a14      	ldr	r2, [pc, #80]	; (800331c <HAL_RCC_OscConfig+0x29c>)
 80032cc:	6813      	ldr	r3, [r2, #0]
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80032d4:	f7ff fb8a 	bl	80029ec <HAL_GetTick>
 80032d8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_RCC_OscConfig+0x29c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032e2:	d1ce      	bne.n	8003282 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7ff fb82 	bl	80029ec <HAL_GetTick>
 80032e8:	1b80      	subs	r0, r0, r6
 80032ea:	2802      	cmp	r0, #2
 80032ec:	d9f5      	bls.n	80032da <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80032ee:	2003      	movs	r0, #3
 80032f0:	e0a4      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f2:	4a08      	ldr	r2, [pc, #32]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 80032f4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
 80032fc:	e7cf      	b.n	800329e <HAL_RCC_OscConfig+0x21e>
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_OscConfig+0x294>)
 8003300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003302:	f042 0204 	orr.w	r2, r2, #4
 8003306:	671a      	str	r2, [r3, #112]	; 0x70
 8003308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	671a      	str	r2, [r3, #112]	; 0x70
 8003310:	e7c5      	b.n	800329e <HAL_RCC_OscConfig+0x21e>
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	42470000 	.word	0x42470000
 800331c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7ff fb64 	bl	80029ec <HAL_GetTick>
 8003324:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003326:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_RCC_OscConfig+0x3e4>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	f013 0f02 	tst.w	r3, #2
 800332e:	d008      	beq.n	8003342 <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7ff fb5c 	bl	80029ec <HAL_GetTick>
 8003334:	1b80      	subs	r0, r0, r6
 8003336:	f241 3388 	movw	r3, #5000	; 0x1388
 800333a:	4298      	cmp	r0, r3
 800333c:	d9f3      	bls.n	8003326 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800333e:	2003      	movs	r0, #3
 8003340:	e07c      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003342:	b9e5      	cbnz	r5, 800337e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003344:	69a3      	ldr	r3, [r4, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d07e      	beq.n	8003448 <HAL_RCC_OscConfig+0x3c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334a:	4a46      	ldr	r2, [pc, #280]	; (8003464 <HAL_RCC_OscConfig+0x3e4>)
 800334c:	6892      	ldr	r2, [r2, #8]
 800334e:	f002 020c 	and.w	r2, r2, #12
 8003352:	2a08      	cmp	r2, #8
 8003354:	d051      	beq.n	80033fa <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	2b02      	cmp	r3, #2
 8003358:	d017      	beq.n	800338a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCC_OscConfig+0x3e8>)
 800335c:	2200      	movs	r2, #0
 800335e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7ff fb44 	bl	80029ec <HAL_GetTick>
 8003364:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_OscConfig+0x3e4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800336e:	d042      	beq.n	80033f6 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003370:	f7ff fb3c 	bl	80029ec <HAL_GetTick>
 8003374:	1b00      	subs	r0, r0, r4
 8003376:	2802      	cmp	r0, #2
 8003378:	d9f5      	bls.n	8003366 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800337a:	2003      	movs	r0, #3
 800337c:	e05e      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800337e:	4a39      	ldr	r2, [pc, #228]	; (8003464 <HAL_RCC_OscConfig+0x3e4>)
 8003380:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003386:	6413      	str	r3, [r2, #64]	; 0x40
 8003388:	e7dc      	b.n	8003344 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b37      	ldr	r3, [pc, #220]	; (8003468 <HAL_RCC_OscConfig+0x3e8>)
 800338c:	2200      	movs	r2, #0
 800338e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003390:	f7ff fb2c 	bl	80029ec <HAL_GetTick>
 8003394:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_RCC_OscConfig+0x3e4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800339e:	d006      	beq.n	80033ae <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a0:	f7ff fb24 	bl	80029ec <HAL_GetTick>
 80033a4:	1b40      	subs	r0, r0, r5
 80033a6:	2802      	cmp	r0, #2
 80033a8:	d9f5      	bls.n	8003396 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 80033aa:	2003      	movs	r0, #3
 80033ac:	e046      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ae:	69e3      	ldr	r3, [r4, #28]
 80033b0:	6a22      	ldr	r2, [r4, #32]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033b6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80033ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80033bc:	0852      	lsrs	r2, r2, #1
 80033be:	3a01      	subs	r2, #1
 80033c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80033c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033ca:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_RCC_OscConfig+0x3e4>)
 80033cc:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_RCC_OscConfig+0x3e8>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80033d4:	f7ff fb0a 	bl	80029ec <HAL_GetTick>
 80033d8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_OscConfig+0x3e4>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e4:	f7ff fb02 	bl	80029ec <HAL_GetTick>
 80033e8:	1b00      	subs	r0, r0, r4
 80033ea:	2802      	cmp	r0, #2
 80033ec:	d9f5      	bls.n	80033da <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80033ee:	2003      	movs	r0, #3
 80033f0:	e024      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80033f2:	2000      	movs	r0, #0
 80033f4:	e022      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
 80033f6:	2000      	movs	r0, #0
 80033f8:	e020      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d026      	beq.n	800344c <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCC_OscConfig+0x3e4>)
 8003400:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003406:	69e2      	ldr	r2, [r4, #28]
 8003408:	4291      	cmp	r1, r2
 800340a:	d121      	bne.n	8003450 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800340c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003410:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003412:	428a      	cmp	r2, r1
 8003414:	d11e      	bne.n	8003454 <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003416:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003418:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800341c:	401a      	ands	r2, r3
 800341e:	428a      	cmp	r2, r1
 8003420:	d11a      	bne.n	8003458 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003426:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003428:	428a      	cmp	r2, r1
 800342a:	d117      	bne.n	800345c <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800342c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003430:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003432:	4293      	cmp	r3, r2
 8003434:	d114      	bne.n	8003460 <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 8003436:	2000      	movs	r0, #0
 8003438:	e000      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
    return HAL_ERROR;
 800343a:	2001      	movs	r0, #1
}
 800343c:	b002      	add	sp, #8
 800343e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003440:	2001      	movs	r0, #1
 8003442:	e7fb      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
        return HAL_ERROR;
 8003444:	2001      	movs	r0, #1
 8003446:	e7f9      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
  return HAL_OK;
 8003448:	2000      	movs	r0, #0
 800344a:	e7f7      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
        return HAL_ERROR;
 800344c:	2001      	movs	r0, #1
 800344e:	e7f5      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
          return HAL_ERROR;
 8003450:	2001      	movs	r0, #1
 8003452:	e7f3      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
 8003454:	2001      	movs	r0, #1
 8003456:	e7f1      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
 8003458:	2001      	movs	r0, #1
 800345a:	e7ef      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
 800345c:	2001      	movs	r0, #1
 800345e:	e7ed      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
 8003460:	2001      	movs	r0, #1
 8003462:	e7eb      	b.n	800343c <HAL_RCC_OscConfig+0x3bc>
 8003464:	40023800 	.word	0x40023800
 8003468:	42470000 	.word	0x42470000

0800346c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800346e:	4b31      	ldr	r3, [pc, #196]	; (8003534 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b04      	cmp	r3, #4
 8003478:	d057      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0xbe>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d157      	bne.n	800352e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800348c:	d02a      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348e:	4b29      	ldr	r3, [pc, #164]	; (8003534 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003496:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800349a:	ebb1 000c 	subs.w	r0, r1, ip
 800349e:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80034a2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80034a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034aa:	0181      	lsls	r1, r0, #6
 80034ac:	1a09      	subs	r1, r1, r0
 80034ae:	eb63 030e 	sbc.w	r3, r3, lr
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034b8:	00c9      	lsls	r1, r1, #3
 80034ba:	eb11 0c0c 	adds.w	ip, r1, ip
 80034be:	f143 0300 	adc.w	r3, r3, #0
 80034c2:	0259      	lsls	r1, r3, #9
 80034c4:	2300      	movs	r3, #0
 80034c6:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80034ca:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80034ce:	f7fc ffa5 	bl	800041c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80034da:	3301      	adds	r3, #1
 80034dc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80034de:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80034e2:	e025      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80034ec:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80034f0:	ebb1 000c 	subs.w	r0, r1, ip
 80034f4:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80034f8:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80034fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003500:	0181      	lsls	r1, r0, #6
 8003502:	1a09      	subs	r1, r1, r0
 8003504:	eb63 030e 	sbc.w	r3, r3, lr
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350e:	00c9      	lsls	r1, r1, #3
 8003510:	eb11 0c0c 	adds.w	ip, r1, ip
 8003514:	f143 0300 	adc.w	r3, r3, #0
 8003518:	0299      	lsls	r1, r3, #10
 800351a:	2300      	movs	r3, #0
 800351c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003520:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003524:	f7fc ff7a 	bl	800041c <__aeabi_uldivmod>
 8003528:	e7d3      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 800352a:	4803      	ldr	r0, [pc, #12]	; (8003538 <HAL_RCC_GetSysClockFreq+0xcc>)
 800352c:	e000      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800352e:	4803      	ldr	r0, [pc, #12]	; (800353c <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003530:	bd08      	pop	{r3, pc}
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800
 8003538:	007a1200 	.word	0x007a1200
 800353c:	00f42400 	.word	0x00f42400

08003540 <HAL_RCC_ClockConfig>:
{
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003544:	4604      	mov	r4, r0
 8003546:	2800      	cmp	r0, #0
 8003548:	f000 8098 	beq.w	800367c <HAL_RCC_ClockConfig+0x13c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b4f      	ldr	r3, [pc, #316]	; (800368c <HAL_RCC_ClockConfig+0x14c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	428b      	cmp	r3, r1
 8003556:	d208      	bcs.n	800356a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003558:	b2cb      	uxtb	r3, r1
 800355a:	4a4c      	ldr	r2, [pc, #304]	; (800368c <HAL_RCC_ClockConfig+0x14c>)
 800355c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	428b      	cmp	r3, r1
 8003566:	f040 808b 	bne.w	8003680 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	f013 0f02 	tst.w	r3, #2
 8003570:	d017      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003572:	f013 0f04 	tst.w	r3, #4
 8003576:	d004      	beq.n	8003582 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003578:	4a45      	ldr	r2, [pc, #276]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 800357a:	6893      	ldr	r3, [r2, #8]
 800357c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003580:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	f013 0f08 	tst.w	r3, #8
 8003588:	d004      	beq.n	8003594 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800358a:	4a41      	ldr	r2, [pc, #260]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 800358c:	6893      	ldr	r3, [r2, #8]
 800358e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003592:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4a3e      	ldr	r2, [pc, #248]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 8003596:	6893      	ldr	r3, [r2, #8]
 8003598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800359c:	68a1      	ldr	r1, [r4, #8]
 800359e:	430b      	orrs	r3, r1
 80035a0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	f013 0f01 	tst.w	r3, #1
 80035a8:	d032      	beq.n	8003610 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035aa:	6863      	ldr	r3, [r4, #4]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d021      	beq.n	80035f4 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b0:	1e9a      	subs	r2, r3, #2
 80035b2:	2a01      	cmp	r2, #1
 80035b4:	d925      	bls.n	8003602 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b6:	4a36      	ldr	r2, [pc, #216]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	f012 0f02 	tst.w	r2, #2
 80035be:	d061      	beq.n	8003684 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c0:	4933      	ldr	r1, [pc, #204]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 80035c2:	688a      	ldr	r2, [r1, #8]
 80035c4:	f022 0203 	bic.w	r2, r2, #3
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80035cc:	f7ff fa0e 	bl	80029ec <HAL_GetTick>
 80035d0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	6862      	ldr	r2, [r4, #4]
 80035dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035e0:	d016      	beq.n	8003610 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e2:	f7ff fa03 	bl	80029ec <HAL_GetTick>
 80035e6:	1b80      	subs	r0, r0, r6
 80035e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80035ec:	4298      	cmp	r0, r3
 80035ee:	d9f0      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80035f0:	2003      	movs	r0, #3
 80035f2:	e042      	b.n	800367a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f4:	4a26      	ldr	r2, [pc, #152]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80035fc:	d1e0      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80035fe:	2001      	movs	r0, #1
 8003600:	e03b      	b.n	800367a <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4a23      	ldr	r2, [pc, #140]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800360a:	d1d9      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e034      	b.n	800367a <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b1e      	ldr	r3, [pc, #120]	; (800368c <HAL_RCC_ClockConfig+0x14c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	42ab      	cmp	r3, r5
 800361a:	d907      	bls.n	800362c <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361c:	b2ea      	uxtb	r2, r5
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_RCC_ClockConfig+0x14c>)
 8003620:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	42ab      	cmp	r3, r5
 800362a:	d12d      	bne.n	8003688 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	f013 0f04 	tst.w	r3, #4
 8003632:	d006      	beq.n	8003642 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003634:	4a16      	ldr	r2, [pc, #88]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 8003636:	6893      	ldr	r3, [r2, #8]
 8003638:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800363c:	68e1      	ldr	r1, [r4, #12]
 800363e:	430b      	orrs	r3, r1
 8003640:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	f013 0f08 	tst.w	r3, #8
 8003648:	d007      	beq.n	800365a <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364a:	4a11      	ldr	r2, [pc, #68]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 800364c:	6893      	ldr	r3, [r2, #8]
 800364e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003652:	6921      	ldr	r1, [r4, #16]
 8003654:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003658:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365a:	f7ff ff07 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_RCC_ClockConfig+0x150>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003666:	4a0b      	ldr	r2, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x154>)
 8003668:	5cd3      	ldrb	r3, [r2, r3]
 800366a:	40d8      	lsrs	r0, r3
 800366c:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x158>)
 800366e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <HAL_RCC_ClockConfig+0x15c>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	f7ff f972 	bl	800295c <HAL_InitTick>
  return HAL_OK;
 8003678:	2000      	movs	r0, #0
}
 800367a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800367c:	2001      	movs	r0, #1
 800367e:	e7fc      	b.n	800367a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003680:	2001      	movs	r0, #1
 8003682:	e7fa      	b.n	800367a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
 8003686:	e7f8      	b.n	800367a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003688:	2001      	movs	r0, #1
 800368a:	e7f6      	b.n	800367a <HAL_RCC_ClockConfig+0x13a>
 800368c:	40023c00 	.word	0x40023c00
 8003690:	40023800 	.word	0x40023800
 8003694:	080048a8 	.word	0x080048a8
 8003698:	2000048c 	.word	0x2000048c
 800369c:	20000488 	.word	0x20000488

080036a0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80036a0:	4b01      	ldr	r3, [pc, #4]	; (80036a8 <HAL_RCC_GetHCLKFreq+0x8>)
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	2000048c 	.word	0x2000048c

080036ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036ae:	f7ff fff7 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80036ba:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80036bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80036be:	40d8      	lsrs	r0, r3
 80036c0:	bd08      	pop	{r3, pc}
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	080048b8 	.word	0x080048b8

080036cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036cc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ce:	f7ff ffe7 	bl	80036a0 <HAL_RCC_GetHCLKFreq>
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80036da:	4a03      	ldr	r2, [pc, #12]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
}
 80036de:	40d8      	lsrs	r0, r3
 80036e0:	bd08      	pop	{r3, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	080048b8 	.word	0x080048b8

080036ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ec:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036ee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f0:	6a04      	ldr	r4, [r0, #32]
 80036f2:	f024 0401 	bic.w	r4, r4, #1
 80036f6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036fa:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036fe:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003702:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003706:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003708:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800370a:	6203      	str	r3, [r0, #32]
}
 800370c:	bc10      	pop	{r4}
 800370e:	4770      	bx	lr

08003710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003710:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003712:	6a04      	ldr	r4, [r0, #32]
 8003714:	f024 0410 	bic.w	r4, r4, #16
 8003718:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800371c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800371e:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003722:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800372a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800372e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003730:	6203      	str	r3, [r0, #32]
}
 8003732:	bc10      	pop	{r4}
 8003734:	4770      	bx	lr

08003736 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003736:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373c:	430b      	orrs	r3, r1
 800373e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003742:	6083      	str	r3, [r0, #8]
}
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_OnePulse_MspInit>:
}
 8003746:	4770      	bx	lr

08003748 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003748:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800374a:	4a30      	ldr	r2, [pc, #192]	; (800380c <TIM_Base_SetConfig+0xc4>)
 800374c:	4290      	cmp	r0, r2
 800374e:	d012      	beq.n	8003776 <TIM_Base_SetConfig+0x2e>
 8003750:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003754:	d00f      	beq.n	8003776 <TIM_Base_SetConfig+0x2e>
 8003756:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800375a:	4290      	cmp	r0, r2
 800375c:	d00b      	beq.n	8003776 <TIM_Base_SetConfig+0x2e>
 800375e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003762:	4290      	cmp	r0, r2
 8003764:	d007      	beq.n	8003776 <TIM_Base_SetConfig+0x2e>
 8003766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800376a:	4290      	cmp	r0, r2
 800376c:	d003      	beq.n	8003776 <TIM_Base_SetConfig+0x2e>
 800376e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003772:	4290      	cmp	r0, r2
 8003774:	d103      	bne.n	800377e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800377a:	684a      	ldr	r2, [r1, #4]
 800377c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377e:	4a23      	ldr	r2, [pc, #140]	; (800380c <TIM_Base_SetConfig+0xc4>)
 8003780:	4290      	cmp	r0, r2
 8003782:	d02a      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 8003784:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003788:	d027      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 800378a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800378e:	4290      	cmp	r0, r2
 8003790:	d023      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 8003792:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003796:	4290      	cmp	r0, r2
 8003798:	d01f      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 800379a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800379e:	4290      	cmp	r0, r2
 80037a0:	d01b      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 80037a2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80037a6:	4290      	cmp	r0, r2
 80037a8:	d017      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 80037aa:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80037ae:	4290      	cmp	r0, r2
 80037b0:	d013      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 80037b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037b6:	4290      	cmp	r0, r2
 80037b8:	d00f      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 80037ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037be:	4290      	cmp	r0, r2
 80037c0:	d00b      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 80037c2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80037c6:	4290      	cmp	r0, r2
 80037c8:	d007      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 80037ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037ce:	4290      	cmp	r0, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0x92>
 80037d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037d6:	4290      	cmp	r0, r2
 80037d8:	d103      	bne.n	80037e2 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	68ca      	ldr	r2, [r1, #12]
 80037e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e6:	694a      	ldr	r2, [r1, #20]
 80037e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80037ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ec:	688b      	ldr	r3, [r1, #8]
 80037ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80037f0:	680b      	ldr	r3, [r1, #0]
 80037f2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f4:	4b05      	ldr	r3, [pc, #20]	; (800380c <TIM_Base_SetConfig+0xc4>)
 80037f6:	4298      	cmp	r0, r3
 80037f8:	d003      	beq.n	8003802 <TIM_Base_SetConfig+0xba>
 80037fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037fe:	4298      	cmp	r0, r3
 8003800:	d101      	bne.n	8003806 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8003802:	690b      	ldr	r3, [r1, #16]
 8003804:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003806:	2301      	movs	r3, #1
 8003808:	6143      	str	r3, [r0, #20]
}
 800380a:	4770      	bx	lr
 800380c:	40010000 	.word	0x40010000

08003810 <HAL_TIM_Base_Init>:
{
 8003810:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003812:	4604      	mov	r4, r0
 8003814:	b1a0      	cbz	r0, 8003840 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800381a:	b163      	cbz	r3, 8003836 <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003822:	4621      	mov	r1, r4
 8003824:	f851 0b04 	ldr.w	r0, [r1], #4
 8003828:	f7ff ff8e 	bl	8003748 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800382c:	2301      	movs	r3, #1
 800382e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003832:	2000      	movs	r0, #0
}
 8003834:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003836:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800383a:	f7fd fb3b 	bl	8000eb4 <HAL_TIM_Base_MspInit>
 800383e:	e7ed      	b.n	800381c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003840:	2001      	movs	r0, #1
 8003842:	e7f7      	b.n	8003834 <HAL_TIM_Base_Init+0x24>

08003844 <HAL_TIM_OnePulse_Init>:
{
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	460d      	mov	r5, r1
  if (htim == NULL)
 8003848:	4604      	mov	r4, r0
 800384a:	b1e8      	cbz	r0, 8003888 <HAL_TIM_OnePulse_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 800384c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003850:	b1ab      	cbz	r3, 800387e <HAL_TIM_OnePulse_Init+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003852:	2302      	movs	r3, #2
 8003854:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003858:	4621      	mov	r1, r4
 800385a:	f851 0b04 	ldr.w	r0, [r1], #4
 800385e:	f7ff ff73 	bl	8003748 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003862:	6822      	ldr	r2, [r4, #0]
 8003864:	6813      	ldr	r3, [r2, #0]
 8003866:	f023 0308 	bic.w	r3, r3, #8
 800386a:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	430d      	orrs	r5, r1
 8003872:	601d      	str	r5, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003874:	2301      	movs	r3, #1
 8003876:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800387a:	2000      	movs	r0, #0
}
 800387c:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
 800387e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8003882:	f7ff ff60 	bl	8003746 <HAL_TIM_OnePulse_MspInit>
 8003886:	e7e4      	b.n	8003852 <HAL_TIM_OnePulse_Init+0xe>
    return HAL_ERROR;
 8003888:	2001      	movs	r0, #1
 800388a:	e7f7      	b.n	800387c <HAL_TIM_OnePulse_Init+0x38>

0800388c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800388c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800388e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003890:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003894:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003898:	430a      	orrs	r2, r1
 800389a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389e:	6082      	str	r2, [r0, #8]
}
 80038a0:	bc10      	pop	{r4}
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_ConfigClockSource>:
{
 80038a4:	b510      	push	{r4, lr}
 80038a6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80038a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d064      	beq.n	800397a <HAL_TIM_ConfigClockSource+0xd6>
 80038b0:	2301      	movs	r3, #1
 80038b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	6802      	ldr	r2, [r0, #0]
 80038be:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80038c8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80038ca:	680b      	ldr	r3, [r1, #0]
 80038cc:	2b60      	cmp	r3, #96	; 0x60
 80038ce:	d040      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0xae>
 80038d0:	d822      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x74>
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d047      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0xc2>
 80038d6:	d90b      	bls.n	80038f0 <HAL_TIM_ConfigClockSource+0x4c>
 80038d8:	2b50      	cmp	r3, #80	; 0x50
 80038da:	d10e      	bne.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038dc:	68ca      	ldr	r2, [r1, #12]
 80038de:	6849      	ldr	r1, [r1, #4]
 80038e0:	6800      	ldr	r0, [r0, #0]
 80038e2:	f7ff ff03 	bl	80036ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e6:	2150      	movs	r1, #80	; 0x50
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	f7ff ff24 	bl	8003736 <TIM_ITRx_SetConfig>
      break;
 80038ee:	e004      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d00c      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x6a>
 80038f4:	d908      	bls.n	8003908 <HAL_TIM_ConfigClockSource+0x64>
 80038f6:	2b30      	cmp	r3, #48	; 0x30
 80038f8:	d009      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003900:	2000      	movs	r0, #0
 8003902:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003906:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003908:	b10b      	cbz	r3, 800390e <HAL_TIM_ConfigClockSource+0x6a>
 800390a:	2b10      	cmp	r3, #16
 800390c:	d1f5      	bne.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800390e:	4619      	mov	r1, r3
 8003910:	6820      	ldr	r0, [r4, #0]
 8003912:	f7ff ff10 	bl	8003736 <TIM_ITRx_SetConfig>
      break;
 8003916:	e7f0      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8003918:	2b70      	cmp	r3, #112	; 0x70
 800391a:	d00e      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x96>
 800391c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003920:	d1eb      	bne.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003922:	68cb      	ldr	r3, [r1, #12]
 8003924:	684a      	ldr	r2, [r1, #4]
 8003926:	6889      	ldr	r1, [r1, #8]
 8003928:	6800      	ldr	r0, [r0, #0]
 800392a:	f7ff ffaf 	bl	800388c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	6893      	ldr	r3, [r2, #8]
 8003932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003936:	6093      	str	r3, [r2, #8]
      break;
 8003938:	e7df      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800393a:	68cb      	ldr	r3, [r1, #12]
 800393c:	684a      	ldr	r2, [r1, #4]
 800393e:	6889      	ldr	r1, [r1, #8]
 8003940:	6800      	ldr	r0, [r0, #0]
 8003942:	f7ff ffa3 	bl	800388c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003946:	6822      	ldr	r2, [r4, #0]
 8003948:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800394a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800394e:	6093      	str	r3, [r2, #8]
      break;
 8003950:	e7d3      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003952:	68ca      	ldr	r2, [r1, #12]
 8003954:	6849      	ldr	r1, [r1, #4]
 8003956:	6800      	ldr	r0, [r0, #0]
 8003958:	f7ff feda 	bl	8003710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800395c:	2160      	movs	r1, #96	; 0x60
 800395e:	6820      	ldr	r0, [r4, #0]
 8003960:	f7ff fee9 	bl	8003736 <TIM_ITRx_SetConfig>
      break;
 8003964:	e7c9      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003966:	68ca      	ldr	r2, [r1, #12]
 8003968:	6849      	ldr	r1, [r1, #4]
 800396a:	6800      	ldr	r0, [r0, #0]
 800396c:	f7ff febe 	bl	80036ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003970:	2140      	movs	r1, #64	; 0x40
 8003972:	6820      	ldr	r0, [r4, #0]
 8003974:	f7ff fedf 	bl	8003736 <TIM_ITRx_SetConfig>
      break;
 8003978:	e7bf      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800397a:	2002      	movs	r0, #2
 800397c:	e7c3      	b.n	8003906 <HAL_TIM_ConfigClockSource+0x62>

0800397e <TIM_SlaveTimer_SetConfig>:
{
 800397e:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8003980:	6804      	ldr	r4, [r0, #0]
 8003982:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003984:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003988:	684b      	ldr	r3, [r1, #4]
 800398a:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800398c:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003990:	680a      	ldr	r2, [r1, #0]
 8003992:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003994:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8003996:	684b      	ldr	r3, [r1, #4]
 8003998:	2b60      	cmp	r3, #96	; 0x60
 800399a:	d02c      	beq.n	80039f6 <TIM_SlaveTimer_SetConfig+0x78>
 800399c:	d80c      	bhi.n	80039b8 <TIM_SlaveTimer_SetConfig+0x3a>
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d014      	beq.n	80039cc <TIM_SlaveTimer_SetConfig+0x4e>
 80039a2:	2b50      	cmp	r3, #80	; 0x50
 80039a4:	d106      	bne.n	80039b4 <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a6:	690a      	ldr	r2, [r1, #16]
 80039a8:	6889      	ldr	r1, [r1, #8]
 80039aa:	6800      	ldr	r0, [r0, #0]
 80039ac:	f7ff fe9e 	bl	80036ec <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 80039b0:	2000      	movs	r0, #0
      break;
 80039b2:	e028      	b.n	8003a06 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 80039b4:	2000      	movs	r0, #0
 80039b6:	e026      	b.n	8003a06 <TIM_SlaveTimer_SetConfig+0x88>
 80039b8:	2b70      	cmp	r3, #112	; 0x70
 80039ba:	d123      	bne.n	8003a04 <TIM_SlaveTimer_SetConfig+0x86>
      TIM_ETR_SetConfig(htim->Instance,
 80039bc:	690b      	ldr	r3, [r1, #16]
 80039be:	688a      	ldr	r2, [r1, #8]
 80039c0:	68c9      	ldr	r1, [r1, #12]
 80039c2:	6800      	ldr	r0, [r0, #0]
 80039c4:	f7ff ff62 	bl	800388c <TIM_ETR_SetConfig>
  return HAL_OK;
 80039c8:	2000      	movs	r0, #0
      break;
 80039ca:	e01c      	b.n	8003a06 <TIM_SlaveTimer_SetConfig+0x88>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80039cc:	680b      	ldr	r3, [r1, #0]
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	d01a      	beq.n	8003a08 <TIM_SlaveTimer_SetConfig+0x8a>
      tmpccer = htim->Instance->CCER;
 80039d2:	6803      	ldr	r3, [r0, #0]
 80039d4:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80039de:	6802      	ldr	r2, [r0, #0]
 80039e0:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80039e6:	6909      	ldr	r1, [r1, #16]
 80039e8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80039ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 80039ee:	6803      	ldr	r3, [r0, #0]
 80039f0:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 80039f2:	2000      	movs	r0, #0
      break;
 80039f4:	e007      	b.n	8003a06 <TIM_SlaveTimer_SetConfig+0x88>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039f6:	690a      	ldr	r2, [r1, #16]
 80039f8:	6889      	ldr	r1, [r1, #8]
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	f7ff fe88 	bl	8003710 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8003a00:	2000      	movs	r0, #0
      break;
 8003a02:	e000      	b.n	8003a06 <TIM_SlaveTimer_SetConfig+0x88>
  switch (sSlaveConfig->InputTrigger)
 8003a04:	2000      	movs	r0, #0
}
 8003a06:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8003a08:	2001      	movs	r0, #1
 8003a0a:	e7fc      	b.n	8003a06 <TIM_SlaveTimer_SetConfig+0x88>

08003a0c <HAL_TIM_SlaveConfigSynchro>:
{
 8003a0c:	b510      	push	{r4, lr}
 8003a0e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8003a10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d020      	beq.n	8003a5a <HAL_TIM_SlaveConfigSynchro+0x4e>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003a24:	f7ff ffab 	bl	800397e <TIM_SlaveTimer_SetConfig>
 8003a28:	b980      	cbnz	r0, 8003a4c <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a2a:	6822      	ldr	r2, [r4, #0]
 8003a2c:	68d3      	ldr	r3, [r2, #12]
 8003a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a32:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a34:	6822      	ldr	r2, [r4, #0]
 8003a36:	68d3      	ldr	r3, [r2, #12]
 8003a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3c:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003a44:	2300      	movs	r3, #0
 8003a46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003a4a:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003a52:	2300      	movs	r3, #0
 8003a54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003a58:	e7f7      	b.n	8003a4a <HAL_TIM_SlaveConfigSynchro+0x3e>
  __HAL_LOCK(htim);
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	e7f5      	b.n	8003a4a <HAL_TIM_SlaveConfigSynchro+0x3e>
	...

08003a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a60:	b410      	push	{r4}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d03b      	beq.n	8003ae2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a70:	2302      	movs	r3, #2
 8003a72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a76:	6803      	ldr	r3, [r0, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7a:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a7c:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a80:	680a      	ldr	r2, [r1, #0]
 8003a82:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a88:	6803      	ldr	r3, [r0, #0]
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01a      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a94:	d017      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003a96:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003a9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00f      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003aae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003ab6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003abe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d104      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aca:	684a      	ldr	r2, [r1, #4]
 8003acc:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ace:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003adc:	4618      	mov	r0, r3
}
 8003ade:	bc10      	pop	{r4}
 8003ae0:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	e7fb      	b.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ae6:	bf00      	nop
 8003ae8:	40010000 	.word	0x40010000

08003aec <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aec:	6802      	ldr	r2, [r0, #0]
 8003aee:	68d3      	ldr	r3, [r2, #12]
 8003af0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af6:	6802      	ldr	r2, [r0, #0]
 8003af8:	6953      	ldr	r3, [r2, #20]
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	2320      	movs	r3, #32
 8003b02:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8003b06:	4770      	bx	lr

08003b08 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b08:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b21      	cmp	r3, #33	; 0x21
 8003b10:	d001      	beq.n	8003b16 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2002      	movs	r0, #2
  }
}
 8003b14:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b16:	6883      	ldr	r3, [r0, #8]
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1c:	d017      	beq.n	8003b4e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b1e:	6a03      	ldr	r3, [r0, #32]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	6202      	str	r2, [r0, #32]
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	6803      	ldr	r3, [r0, #0]
 8003b28:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003b2a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003b34:	b94b      	cbnz	r3, 8003b4a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b36:	6802      	ldr	r2, [r0, #0]
 8003b38:	68d3      	ldr	r3, [r2, #12]
 8003b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b3e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b40:	6802      	ldr	r2, [r0, #0]
 8003b42:	68d3      	ldr	r3, [r2, #12]
 8003b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b48:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b4e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	6802      	ldr	r2, [r0, #0]
 8003b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b58:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b5a:	6903      	ldr	r3, [r0, #16]
 8003b5c:	b91b      	cbnz	r3, 8003b66 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8003b5e:	6a03      	ldr	r3, [r0, #32]
 8003b60:	3302      	adds	r3, #2
 8003b62:	6203      	str	r3, [r0, #32]
 8003b64:	e7e1      	b.n	8003b2a <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8003b66:	6a03      	ldr	r3, [r0, #32]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	6203      	str	r3, [r0, #32]
 8003b6c:	e7dd      	b.n	8003b2a <UART_Transmit_IT+0x22>
	...

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b74:	6802      	ldr	r2, [r0, #0]
 8003b76:	6913      	ldr	r3, [r2, #16]
 8003b78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b7c:	68c1      	ldr	r1, [r0, #12]
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b82:	6883      	ldr	r3, [r0, #8]
 8003b84:	6902      	ldr	r2, [r0, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	6942      	ldr	r2, [r0, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	69c2      	ldr	r2, [r0, #28]
 8003b8e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003b90:	6801      	ldr	r1, [r0, #0]
 8003b92:	68cb      	ldr	r3, [r1, #12]
 8003b94:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b98:	f023 030c 	bic.w	r3, r3, #12
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba0:	6802      	ldr	r2, [r0, #0]
 8003ba2:	6953      	ldr	r3, [r2, #20]
 8003ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba8:	6981      	ldr	r1, [r0, #24]
 8003baa:	430b      	orrs	r3, r1
 8003bac:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bae:	69c3      	ldr	r3, [r0, #28]
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	d035      	beq.n	8003c22 <UART_SetConfig+0xb2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bb6:	6803      	ldr	r3, [r0, #0]
 8003bb8:	4a60      	ldr	r2, [pc, #384]	; (8003d3c <UART_SetConfig+0x1cc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	f000 8091 	beq.w	8003ce2 <UART_SetConfig+0x172>
 8003bc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	f000 808c 	beq.w	8003ce2 <UART_SetConfig+0x172>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bca:	f7ff fd6f 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bce:	2100      	movs	r1, #0
 8003bd0:	1803      	adds	r3, r0, r0
 8003bd2:	4149      	adcs	r1, r1
 8003bd4:	181b      	adds	r3, r3, r0
 8003bd6:	f141 0100 	adc.w	r1, r1, #0
 8003bda:	00c9      	lsls	r1, r1, #3
 8003bdc:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	1818      	adds	r0, r3, r0
 8003be4:	6863      	ldr	r3, [r4, #4]
 8003be6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003bea:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003bee:	f141 0100 	adc.w	r1, r1, #0
 8003bf2:	f7fc fc13 	bl	800041c <__aeabi_uldivmod>
 8003bf6:	4d52      	ldr	r5, [pc, #328]	; (8003d40 <UART_SetConfig+0x1d0>)
 8003bf8:	fba5 3200 	umull	r3, r2, r5, r0
 8003bfc:	0951      	lsrs	r1, r2, #5
 8003bfe:	2364      	movs	r3, #100	; 0x64
 8003c00:	fb03 0311 	mls	r3, r3, r1, r0
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	3332      	adds	r3, #50	; 0x32
 8003c08:	fba5 2303 	umull	r2, r3, r5, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c12:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	6821      	ldr	r1, [r4, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]
    }
  }
}
 8003c20:	e08a      	b.n	8003d38 <UART_SetConfig+0x1c8>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c22:	6803      	ldr	r3, [r0, #0]
 8003c24:	4a45      	ldr	r2, [pc, #276]	; (8003d3c <UART_SetConfig+0x1cc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d02f      	beq.n	8003c8a <UART_SetConfig+0x11a>
 8003c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02b      	beq.n	8003c8a <UART_SetConfig+0x11a>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c32:	f7ff fd3b 	bl	80036ac <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c36:	2300      	movs	r3, #0
 8003c38:	1802      	adds	r2, r0, r0
 8003c3a:	eb43 0103 	adc.w	r1, r3, r3
 8003c3e:	1812      	adds	r2, r2, r0
 8003c40:	f141 0100 	adc.w	r1, r1, #0
 8003c44:	00c9      	lsls	r1, r1, #3
 8003c46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c4a:	00d2      	lsls	r2, r2, #3
 8003c4c:	1810      	adds	r0, r2, r0
 8003c4e:	f141 0100 	adc.w	r1, r1, #0
 8003c52:	6862      	ldr	r2, [r4, #4]
 8003c54:	1892      	adds	r2, r2, r2
 8003c56:	415b      	adcs	r3, r3
 8003c58:	f7fc fbe0 	bl	800041c <__aeabi_uldivmod>
 8003c5c:	4d38      	ldr	r5, [pc, #224]	; (8003d40 <UART_SetConfig+0x1d0>)
 8003c5e:	fba5 3200 	umull	r3, r2, r5, r0
 8003c62:	0951      	lsrs	r1, r2, #5
 8003c64:	2364      	movs	r3, #100	; 0x64
 8003c66:	fb03 0311 	mls	r3, r3, r1, r0
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	3332      	adds	r3, #50	; 0x32
 8003c6e:	fba5 2303 	umull	r2, r3, r5, r3
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	005a      	lsls	r2, r3, #1
 8003c76:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003c7a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	6821      	ldr	r1, [r4, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]
 8003c88:	e056      	b.n	8003d38 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c8a:	f7ff fd1f 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	1802      	adds	r2, r0, r0
 8003c92:	eb43 0103 	adc.w	r1, r3, r3
 8003c96:	1812      	adds	r2, r2, r0
 8003c98:	f141 0100 	adc.w	r1, r1, #0
 8003c9c:	00c9      	lsls	r1, r1, #3
 8003c9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ca2:	00d2      	lsls	r2, r2, #3
 8003ca4:	1810      	adds	r0, r2, r0
 8003ca6:	f141 0100 	adc.w	r1, r1, #0
 8003caa:	6862      	ldr	r2, [r4, #4]
 8003cac:	1892      	adds	r2, r2, r2
 8003cae:	415b      	adcs	r3, r3
 8003cb0:	f7fc fbb4 	bl	800041c <__aeabi_uldivmod>
 8003cb4:	4d22      	ldr	r5, [pc, #136]	; (8003d40 <UART_SetConfig+0x1d0>)
 8003cb6:	fba5 3200 	umull	r3, r2, r5, r0
 8003cba:	0951      	lsrs	r1, r2, #5
 8003cbc:	2364      	movs	r3, #100	; 0x64
 8003cbe:	fb03 0311 	mls	r3, r3, r1, r0
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	3332      	adds	r3, #50	; 0x32
 8003cc6:	fba5 2303 	umull	r2, r3, r5, r3
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	005a      	lsls	r2, r3, #1
 8003cce:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003cd2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	6821      	ldr	r1, [r4, #0]
 8003cdc:	4413      	add	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]
 8003ce0:	e02a      	b.n	8003d38 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce2:	f7ff fcf3 	bl	80036cc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	1803      	adds	r3, r0, r0
 8003cea:	4149      	adcs	r1, r1
 8003cec:	181b      	adds	r3, r3, r0
 8003cee:	f141 0100 	adc.w	r1, r1, #0
 8003cf2:	00c9      	lsls	r1, r1, #3
 8003cf4:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	1818      	adds	r0, r3, r0
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003d02:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003d06:	f141 0100 	adc.w	r1, r1, #0
 8003d0a:	f7fc fb87 	bl	800041c <__aeabi_uldivmod>
 8003d0e:	4d0c      	ldr	r5, [pc, #48]	; (8003d40 <UART_SetConfig+0x1d0>)
 8003d10:	fba5 3200 	umull	r3, r2, r5, r0
 8003d14:	0951      	lsrs	r1, r2, #5
 8003d16:	2364      	movs	r3, #100	; 0x64
 8003d18:	fb03 0311 	mls	r3, r3, r1, r0
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	3332      	adds	r3, #50	; 0x32
 8003d20:	fba5 2303 	umull	r2, r3, r5, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d2a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	6821      	ldr	r1, [r4, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
}
 8003d38:	bd38      	pop	{r3, r4, r5, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40011000 	.word	0x40011000
 8003d40:	51eb851f 	.word	0x51eb851f

08003d44 <UART_WaitOnFlagUntilTimeout>:
{
 8003d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d48:	4605      	mov	r5, r0
 8003d4a:	460f      	mov	r7, r1
 8003d4c:	4616      	mov	r6, r2
 8003d4e:	4699      	mov	r9, r3
 8003d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	682c      	ldr	r4, [r5, #0]
 8003d56:	6824      	ldr	r4, [r4, #0]
 8003d58:	ea37 0304 	bics.w	r3, r7, r4
 8003d5c:	bf0c      	ite	eq
 8003d5e:	f04f 0c01 	moveq.w	ip, #1
 8003d62:	f04f 0c00 	movne.w	ip, #0
 8003d66:	45b4      	cmp	ip, r6
 8003d68:	d11f      	bne.n	8003daa <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003d6e:	d0f1      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d70:	f1b8 0f00 	cmp.w	r8, #0
 8003d74:	d005      	beq.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x3e>
 8003d76:	f7fe fe39 	bl	80029ec <HAL_GetTick>
 8003d7a:	eba0 0009 	sub.w	r0, r0, r9
 8003d7e:	4540      	cmp	r0, r8
 8003d80:	d9e8      	bls.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d82:	682a      	ldr	r2, [r5, #0]
 8003d84:	68d3      	ldr	r3, [r2, #12]
 8003d86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d8a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8c:	682a      	ldr	r2, [r5, #0]
 8003d8e:	6953      	ldr	r3, [r2, #20]
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003d96:	2320      	movs	r3, #32
 8003d98:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8003da0:	2300      	movs	r3, #0
 8003da2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8003da6:	2003      	movs	r0, #3
 8003da8:	e000      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8003daa:	2000      	movs	r0, #0
}
 8003dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003db0 <HAL_UART_Init>:
{
 8003db0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003db2:	4604      	mov	r4, r0
 8003db4:	b348      	cbz	r0, 8003e0a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003db6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003dba:	b30b      	cbz	r3, 8003e00 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	2324      	movs	r3, #36	; 0x24
 8003dbe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	68d3      	ldr	r3, [r2, #12]
 8003dc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7ff fecf 	bl	8003b70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd2:	6822      	ldr	r2, [r4, #0]
 8003dd4:	6913      	ldr	r3, [r2, #16]
 8003dd6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003dda:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	6953      	ldr	r3, [r2, #20]
 8003de0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003de4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	68d3      	ldr	r3, [r2, #12]
 8003dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dee:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	2000      	movs	r0, #0
 8003df2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003df4:	2320      	movs	r3, #32
 8003df6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003dfe:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003e00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003e04:	f7fd f8bc 	bl	8000f80 <HAL_UART_MspInit>
 8003e08:	e7d8      	b.n	8003dbc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	e7f7      	b.n	8003dfe <HAL_UART_Init+0x4e>

08003e0e <HAL_UART_Transmit>:
{
 8003e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e12:	b083      	sub	sp, #12
 8003e14:	4604      	mov	r4, r0
 8003e16:	460d      	mov	r5, r1
 8003e18:	4690      	mov	r8, r2
 8003e1a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003e1c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d153      	bne.n	8003ece <HAL_UART_Transmit+0xc0>
    if ((pData == NULL) || (Size == 0U))
 8003e26:	2900      	cmp	r1, #0
 8003e28:	d055      	beq.n	8003ed6 <HAL_UART_Transmit+0xc8>
 8003e2a:	2a00      	cmp	r2, #0
 8003e2c:	d055      	beq.n	8003eda <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8003e2e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d053      	beq.n	8003ede <HAL_UART_Transmit+0xd0>
 8003e36:	2301      	movs	r3, #1
 8003e38:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	f04f 0900 	mov.w	r9, #0
 8003e40:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e44:	2321      	movs	r3, #33	; 0x21
 8003e46:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003e4a:	f7fe fdcf 	bl	80029ec <HAL_GetTick>
 8003e4e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003e50:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e54:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003e58:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8003e5c:	e010      	b.n	8003e80 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	9600      	str	r6, [sp, #0]
 8003e60:	463b      	mov	r3, r7
 8003e62:	2200      	movs	r2, #0
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	4620      	mov	r0, r4
 8003e68:	f7ff ff6c 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d138      	bne.n	8003ee2 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e70:	882b      	ldrh	r3, [r5, #0]
 8003e72:	6822      	ldr	r2, [r4, #0]
 8003e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e78:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	b9cb      	cbnz	r3, 8003eb2 <HAL_UART_Transmit+0xa4>
          pData += 2U;
 8003e7e:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8003e80:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	b1bb      	cbz	r3, 8003eb6 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 8003e86:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003e88:	b292      	uxth	r2, r2
 8003e8a:	3a01      	subs	r2, #1
 8003e8c:	b292      	uxth	r2, r2
 8003e8e:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e90:	68a3      	ldr	r3, [r4, #8]
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	d0e2      	beq.n	8003e5e <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e98:	9600      	str	r6, [sp, #0]
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2180      	movs	r1, #128	; 0x80
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f7ff ff4f 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003ea6:	b9f0      	cbnz	r0, 8003ee6 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ea8:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	605a      	str	r2, [r3, #4]
 8003eb0:	e7e6      	b.n	8003e80 <HAL_UART_Transmit+0x72>
          pData += 1U;
 8003eb2:	3501      	adds	r5, #1
 8003eb4:	e7e4      	b.n	8003e80 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eb6:	9600      	str	r6, [sp, #0]
 8003eb8:	463b      	mov	r3, r7
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2140      	movs	r1, #64	; 0x40
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff ff40 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003ec4:	b988      	cbnz	r0, 8003eea <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003ecc:	e000      	b.n	8003ed0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8003ece:	2002      	movs	r0, #2
}
 8003ed0:	b003      	add	sp, #12
 8003ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	e7fa      	b.n	8003ed0 <HAL_UART_Transmit+0xc2>
 8003eda:	2001      	movs	r0, #1
 8003edc:	e7f8      	b.n	8003ed0 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 8003ede:	2002      	movs	r0, #2
 8003ee0:	e7f6      	b.n	8003ed0 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8003ee2:	2003      	movs	r0, #3
 8003ee4:	e7f4      	b.n	8003ed0 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8003ee6:	2003      	movs	r0, #3
 8003ee8:	e7f2      	b.n	8003ed0 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 8003eea:	2003      	movs	r0, #3
 8003eec:	e7f0      	b.n	8003ed0 <HAL_UART_Transmit+0xc2>

08003eee <HAL_UART_TxCpltCallback>:
}
 8003eee:	4770      	bx	lr

08003ef0 <UART_EndTransmit_IT>:
{
 8003ef0:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ef2:	6801      	ldr	r1, [r0, #0]
 8003ef4:	68ca      	ldr	r2, [r1, #12]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	2220      	movs	r2, #32
 8003efe:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003f02:	f7ff fff4 	bl	8003eee <HAL_UART_TxCpltCallback>
}
 8003f06:	2000      	movs	r0, #0
 8003f08:	bd08      	pop	{r3, pc}

08003f0a <HAL_UART_RxCpltCallback>:
}
 8003f0a:	4770      	bx	lr

08003f0c <UART_Receive_IT>:
{
 8003f0c:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f0e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b22      	cmp	r3, #34	; 0x22
 8003f16:	d146      	bne.n	8003fa6 <UART_Receive_IT+0x9a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f18:	6883      	ldr	r3, [r0, #8]
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f1e:	d00f      	beq.n	8003f40 <UART_Receive_IT+0x34>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f20:	6903      	ldr	r3, [r0, #16]
 8003f22:	bb0b      	cbnz	r3, 8003f68 <UART_Receive_IT+0x5c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f24:	6803      	ldr	r3, [r0, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f2a:	1c59      	adds	r1, r3, #1
 8003f2c:	6281      	str	r1, [r0, #40]	; 0x28
 8003f2e:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8003f30:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003f3a:	b1f3      	cbz	r3, 8003f7a <UART_Receive_IT+0x6e>
    return HAL_OK;
 8003f3c:	2000      	movs	r0, #0
}
 8003f3e:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f40:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f42:	6903      	ldr	r3, [r0, #16]
 8003f44:	b943      	cbnz	r3, 8003f58 <UART_Receive_IT+0x4c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f46:	6803      	ldr	r3, [r0, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8003f50:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f52:	3302      	adds	r3, #2
 8003f54:	6283      	str	r3, [r0, #40]	; 0x28
 8003f56:	e7eb      	b.n	8003f30 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f58:	6803      	ldr	r3, [r0, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8003f60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f62:	3301      	adds	r3, #1
 8003f64:	6283      	str	r3, [r0, #40]	; 0x28
 8003f66:	e7e3      	b.n	8003f30 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f68:	6803      	ldr	r3, [r0, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003f6e:	1c51      	adds	r1, r2, #1
 8003f70:	6281      	str	r1, [r0, #40]	; 0x28
 8003f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f76:	7013      	strb	r3, [r2, #0]
 8003f78:	e7da      	b.n	8003f30 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f7a:	6802      	ldr	r2, [r0, #0]
 8003f7c:	68d3      	ldr	r3, [r2, #12]
 8003f7e:	f023 0320 	bic.w	r3, r3, #32
 8003f82:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f84:	6802      	ldr	r2, [r0, #0]
 8003f86:	68d3      	ldr	r3, [r2, #12]
 8003f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f8c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f8e:	6802      	ldr	r2, [r0, #0]
 8003f90:	6953      	ldr	r3, [r2, #20]
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003f98:	2320      	movs	r3, #32
 8003f9a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003f9e:	f7ff ffb4 	bl	8003f0a <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e7cb      	b.n	8003f3e <UART_Receive_IT+0x32>
    return HAL_BUSY;
 8003fa6:	2002      	movs	r0, #2
 8003fa8:	e7c9      	b.n	8003f3e <UART_Receive_IT+0x32>

08003faa <HAL_UART_ErrorCallback>:
}
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_IRQHandler>:
{
 8003fac:	b510      	push	{r4, lr}
 8003fae:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb0:	6802      	ldr	r2, [r0, #0]
 8003fb2:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fb4:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fb6:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8003fb8:	f013 000f 	ands.w	r0, r3, #15
 8003fbc:	d105      	bne.n	8003fca <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fbe:	f013 0f20 	tst.w	r3, #32
 8003fc2:	d002      	beq.n	8003fca <HAL_UART_IRQHandler+0x1e>
 8003fc4:	f011 0f20 	tst.w	r1, #32
 8003fc8:	d113      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x46>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fca:	b128      	cbz	r0, 8003fd8 <HAL_UART_IRQHandler+0x2c>
 8003fcc:	f012 0201 	ands.w	r2, r2, #1
 8003fd0:	d113      	bne.n	8003ffa <HAL_UART_IRQHandler+0x4e>
 8003fd2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8003fd6:	d110      	bne.n	8003ffa <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003fdc:	d002      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x38>
 8003fde:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003fe2:	d16c      	bne.n	80040be <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fe4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fe8:	d002      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x44>
 8003fea:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003fee:	d16a      	bne.n	80040c6 <HAL_UART_IRQHandler+0x11a>
}
 8003ff0:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7ff ff8a 	bl	8003f0c <UART_Receive_IT>
      return;
 8003ff8:	e7fa      	b.n	8003ff0 <HAL_UART_IRQHandler+0x44>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ffa:	f013 0f01 	tst.w	r3, #1
 8003ffe:	d006      	beq.n	800400e <HAL_UART_IRQHandler+0x62>
 8004000:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004004:	d003      	beq.n	800400e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004006:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004008:	f040 0001 	orr.w	r0, r0, #1
 800400c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400e:	f013 0f04 	tst.w	r3, #4
 8004012:	d004      	beq.n	800401e <HAL_UART_IRQHandler+0x72>
 8004014:	b11a      	cbz	r2, 800401e <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004016:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004018:	f040 0002 	orr.w	r0, r0, #2
 800401c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800401e:	f013 0f02 	tst.w	r3, #2
 8004022:	d004      	beq.n	800402e <HAL_UART_IRQHandler+0x82>
 8004024:	b11a      	cbz	r2, 800402e <HAL_UART_IRQHandler+0x82>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004026:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004028:	f040 0004 	orr.w	r0, r0, #4
 800402c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800402e:	f013 0f08 	tst.w	r3, #8
 8004032:	d007      	beq.n	8004044 <HAL_UART_IRQHandler+0x98>
 8004034:	f011 0f20 	tst.w	r1, #32
 8004038:	d100      	bne.n	800403c <HAL_UART_IRQHandler+0x90>
 800403a:	b11a      	cbz	r2, 8004044 <HAL_UART_IRQHandler+0x98>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800403c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004044:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004046:	2a00      	cmp	r2, #0
 8004048:	d0d2      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x44>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800404a:	f013 0f20 	tst.w	r3, #32
 800404e:	d002      	beq.n	8004056 <HAL_UART_IRQHandler+0xaa>
 8004050:	f011 0f20 	tst.w	r1, #32
 8004054:	d121      	bne.n	800409a <HAL_UART_IRQHandler+0xee>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800405e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004060:	f012 0f08 	tst.w	r2, #8
 8004064:	d100      	bne.n	8004068 <HAL_UART_IRQHandler+0xbc>
 8004066:	b323      	cbz	r3, 80040b2 <HAL_UART_IRQHandler+0x106>
        UART_EndRxTransfer(huart);
 8004068:	4620      	mov	r0, r4
 800406a:	f7ff fd3f 	bl	8003aec <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004076:	d018      	beq.n	80040aa <HAL_UART_IRQHandler+0xfe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004082:	b173      	cbz	r3, 80040a2 <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004084:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_UART_IRQHandler+0x124>)
 8004086:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004088:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800408a:	f7fe fe03 	bl	8002c94 <HAL_DMA_Abort_IT>
 800408e:	2800      	cmp	r0, #0
 8004090:	d0ae      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x44>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004092:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004094:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004096:	4798      	blx	r3
 8004098:	e7aa      	b.n	8003ff0 <HAL_UART_IRQHandler+0x44>
        UART_Receive_IT(huart);
 800409a:	4620      	mov	r0, r4
 800409c:	f7ff ff36 	bl	8003f0c <UART_Receive_IT>
 80040a0:	e7d9      	b.n	8004056 <HAL_UART_IRQHandler+0xaa>
            HAL_UART_ErrorCallback(huart);
 80040a2:	4620      	mov	r0, r4
 80040a4:	f7ff ff81 	bl	8003faa <HAL_UART_ErrorCallback>
 80040a8:	e7a2      	b.n	8003ff0 <HAL_UART_IRQHandler+0x44>
          HAL_UART_ErrorCallback(huart);
 80040aa:	4620      	mov	r0, r4
 80040ac:	f7ff ff7d 	bl	8003faa <HAL_UART_ErrorCallback>
 80040b0:	e79e      	b.n	8003ff0 <HAL_UART_IRQHandler+0x44>
        HAL_UART_ErrorCallback(huart);
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7ff ff79 	bl	8003faa <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	2300      	movs	r3, #0
 80040ba:	63e3      	str	r3, [r4, #60]	; 0x3c
    return;
 80040bc:	e798      	b.n	8003ff0 <HAL_UART_IRQHandler+0x44>
    UART_Transmit_IT(huart);
 80040be:	4620      	mov	r0, r4
 80040c0:	f7ff fd22 	bl	8003b08 <UART_Transmit_IT>
    return;
 80040c4:	e794      	b.n	8003ff0 <HAL_UART_IRQHandler+0x44>
    UART_EndTransmit_IT(huart);
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff ff12 	bl	8003ef0 <UART_EndTransmit_IT>
    return;
 80040cc:	e790      	b.n	8003ff0 <HAL_UART_IRQHandler+0x44>
 80040ce:	bf00      	nop
 80040d0:	080040d5 	.word	0x080040d5

080040d4 <UART_DMAAbortOnError>:
{
 80040d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80040d8:	2300      	movs	r3, #0
 80040da:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040dc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80040de:	f7ff ff64 	bl	8003faa <HAL_UART_ErrorCallback>
}
 80040e2:	bd08      	pop	{r3, pc}

080040e4 <SystemInit>:

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040e4:	4b02      	ldr	r3, [pc, #8]	; (80040f0 <SystemInit+0xc>)
 80040e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040ea:	609a      	str	r2, [r3, #8]
#endif
}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <DisableAllInterrupts>:
(
  void
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
 80040f4:	4b02      	ldr	r3, [pc, #8]	; (8004100 <DisableAllInterrupts+0xc>)
 80040f6:	681b      	ldr	r3, [r3, #0]

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE FUNC(void, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_disableIRQ( void )
{
  OSEE_CLI();
 80040f8:	b672      	cpsid	i
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
 80040fa:	2201      	movs	r2, #1
 80040fc:	779a      	strb	r2, [r3, #30]
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_DisableAllInterrupts);
  return;
}
 80040fe:	4770      	bx	lr
 8004100:	080045e0 	.word	0x080045e0

08004104 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
 8004104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004108:	4607      	mov	r7, r0
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
 800410a:	4b1a      	ldr	r3, [pc, #104]	; (8004174 <StartOS+0x70>)
 800410c:	681e      	ldr	r6, [r3, #0]
 * an IRQ and from within a task. */
OSEE_STATIC_INLINE FUNC(OsEE_reg, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_begin_nested_primitive( void )
{
  OsEE_reg flags = 0U;
  OSEE_GET_IPL(flags);
 800410e:	f3ef 8511 	mrs	r5, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 8004112:	092b      	lsrs	r3, r5, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 8004114:	3b01      	subs	r3, #1
 8004116:	2b07      	cmp	r3, #7
 8004118:	d902      	bls.n	8004120 <StartOS+0x1c>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	f383 8811 	msr	BASEPRI, r3
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
 8004120:	7c33      	ldrb	r3, [r6, #16]
 8004122:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8004126:	b143      	cbz	r3, 800413a <StartOS+0x36>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
 8004128:	2401      	movs	r4, #1
      osEE_hal_enableIRQ();
    }
#endif /* OSEE_STARTOS_RETURN || OSEE_API_DYNAMIC */
  }

  if (ev != E_OK) {
 800412a:	b11c      	cbz	r4, 8004134 <StartOS+0x30>
OSEE_STATIC_INLINE FUNC(void, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_end_nested_primitive(
  VAR(OsEE_reg, AUTOMATIC)	flag
)
{
  OSEE_SET_IPL(flag << OSEE_CORTEX_M_PRIO_SH_BITS);
 800412c:	f025 050f 	bic.w	r5, r5, #15
 8004130:	f385 8811 	msr	BASEPRI, r5
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
 8004134:	4620      	mov	r0, r4
 8004136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif	/* OS_EE_ARCH_CORTEX_M_M4F_FPU */
#endif	/* 0 - [GS]: T.B.C. */
#if	(defined(OSEE_HAS_ORTI)) || (defined(OSEE_HAS_STACK_MONITORING))
    osEE_cortex_m_stack_init();
#endif	/* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */
    osEE_cortex_m_system_init();
 800413a:	f000 f91c 	bl	8004376 <osEE_cortex_m_system_init>
      p_idle_tdb = p_cdb->p_idle_task;
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <StartOS+0x70>)
 8004140:	f8d3 8008 	ldr.w	r8, [r3, #8]
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
 8004144:	2301      	movs	r3, #1
 8004146:	7433      	strb	r3, [r6, #16]
    p_ccb->app_mode                 = real_mode;
 8004148:	7477      	strb	r7, [r6, #17]
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
 800414a:	7c33      	ldrb	r3, [r6, #16]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d00d      	beq.n	800416e <StartOS+0x6a>
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
 8004152:	7c33      	ldrb	r3, [r6, #16]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d1e7      	bne.n	800412a <StartOS+0x26>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
 800415a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800415e:	460a      	mov	r2, r1
 8004160:	4640      	mov	r0, r8
 8004162:	f7fc fb01 	bl	8000768 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_task_end(p_idle_tdb);
 8004166:	4640      	mov	r0, r8
 8004168:	f000 f87e 	bl	8004268 <osEE_task_end>
 800416c:	e7dd      	b.n	800412a <StartOS+0x26>
      p_ccb->os_status = OSEE_KERNEL_STARTED;
 800416e:	2302      	movs	r3, #2
 8004170:	7433      	strb	r3, [r6, #16]
 8004172:	e7ee      	b.n	8004152 <StartOS+0x4e>
 8004174:	080045e0 	.word	0x080045e0

08004178 <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
 8004178:	b508      	push	{r3, lr}
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <TerminateTask+0x3c>)
 800417c:	681b      	ldr	r3, [r3, #0]
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
 800417e:	681a      	ldr	r2, [r3, #0]
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
 8004180:	7f19      	ldrb	r1, [r3, #28]
 8004182:	b121      	cbz	r1, 800418e <TerminateTask+0x16>
        p_ccb->s_isr_all_cnt = 0U;
 8004184:	2100      	movs	r1, #0
 8004186:	7719      	strb	r1, [r3, #28]
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
 8004188:	6959      	ldr	r1, [r3, #20]
  OSEE_SET_ISR(flags);
 800418a:	f381 8810 	msr	PRIMASK, r1
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
 800418e:	7f99      	ldrb	r1, [r3, #30]
 8004190:	b111      	cbz	r1, 8004198 <TerminateTask+0x20>
        p_ccb->d_isr_all_cnt = 0U;
 8004192:	2100      	movs	r1, #0
 8004194:	7799      	strb	r1, [r3, #30]
  OSEE_SEI();
 8004196:	b662      	cpsie	i
  OSEE_GET_IPL(flags);
 8004198:	f3ef 8311 	mrs	r3, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 800419c:	091b      	lsrs	r3, r3, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 800419e:	3b01      	subs	r3, #1
 80041a0:	2b07      	cmp	r3, #7
 80041a2:	d902      	bls.n	80041aa <TerminateTask+0x32>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	f383 8811 	msr	BASEPRI, r3
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
 80041aa:	4903      	ldr	r1, [pc, #12]	; (80041b8 <TerminateTask+0x40>)
 80041ac:	6850      	ldr	r0, [r2, #4]
 80041ae:	f7fc fae9 	bl	8000784 <osEE_hal_terminate_ctx>
 80041b2:	bf00      	nop
 80041b4:	080045e0 	.word	0x080045e0
 80041b8:	08004385 	.word	0x08004385

080041bc <osEE_scheduler_task_not_terminated>:
static FUNC(void, OS_CODE)
  osEE_scheduler_task_not_terminated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_term
)
{
 80041bc:	b508      	push	{r3, lr}
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <osEE_scheduler_task_not_terminated+0x3c>)
 80041c0:	681b      	ldr	r3, [r3, #0]

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
 80041c2:	2200      	movs	r2, #0
 80041c4:	775a      	strb	r2, [r3, #29]
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
 80041c6:	7f1a      	ldrb	r2, [r3, #28]
 80041c8:	b122      	cbz	r2, 80041d4 <osEE_scheduler_task_not_terminated+0x18>
    p_ccb->s_isr_all_cnt = 0U;
 80041ca:	2200      	movs	r2, #0
 80041cc:	771a      	strb	r2, [r3, #28]
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
 80041ce:	695a      	ldr	r2, [r3, #20]
  OSEE_SET_ISR(flags);
 80041d0:	f382 8810 	msr	PRIMASK, r2
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
 80041d4:	7f9a      	ldrb	r2, [r3, #30]
 80041d6:	b112      	cbz	r2, 80041de <osEE_scheduler_task_not_terminated+0x22>
    p_ccb->d_isr_all_cnt = 0U;
 80041d8:	2200      	movs	r2, #0
 80041da:	779a      	strb	r2, [r3, #30]
  OSEE_SEI();
 80041dc:	b662      	cpsie	i
  OSEE_GET_IPL(flags);
 80041de:	f3ef 8311 	mrs	r3, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 80041e2:	091b      	lsrs	r3, r3, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 80041e4:	3b01      	subs	r3, #1
 80041e6:	2b07      	cmp	r3, #7
 80041e8:	d902      	bls.n	80041f0 <osEE_scheduler_task_not_terminated+0x34>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	4902      	ldr	r1, [pc, #8]	; (80041fc <osEE_scheduler_task_not_terminated+0x40>)
 80041f2:	6840      	ldr	r0, [r0, #4]
 80041f4:	f7fc fac6 	bl	8000784 <osEE_hal_terminate_ctx>
 80041f8:	080045e0 	.word	0x080045e0
 80041fc:	08004385 	.word	0x08004385

08004200 <osEE_scheduler_task_wrapper_restore>:
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
 8004200:	6883      	ldr	r3, [r0, #8]
 8004202:	2204      	movs	r2, #4
 8004204:	709a      	strb	r2, [r3, #2]
    }
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
 8004206:	4770      	bx	lr

08004208 <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4604      	mov	r4, r0
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
 800420c:	6883      	ldr	r3, [r0, #8]
 800420e:	785d      	ldrb	r5, [r3, #1]
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
 8004210:	f7ff fff6 	bl	8004200 <osEE_scheduler_task_wrapper_restore>

  if (task_priority < OSEE_ISR_ALL_PRIO) {
 8004214:	2dff      	cmp	r5, #255	; 0xff
 8004216:	d006      	beq.n	8004226 <osEE_scheduler_task_wrapper_run+0x1e>
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
 8004218:	f015 0f80 	tst.w	r5, #128	; 0x80
 800421c:	d108      	bne.n	8004230 <osEE_scheduler_task_wrapper_run+0x28>
    OSEE_SET_IPL(OSEE_ISR_UNMASKED << OSEE_CORTEX_M_PRIO_SH_BITS);
 800421e:	2300      	movs	r3, #0
 8004220:	f383 8811 	msr	BASEPRI, r3
  OSEE_SEI();
 8004224:	b662      	cpsie	i
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
 8004226:	6963      	ldr	r3, [r4, #20]
 8004228:	4798      	blx	r3

  /* Unexpected TASK Function return */
  osEE_scheduler_task_not_terminated(p_tdb_to);
 800422a:	4620      	mov	r0, r4
 800422c:	f7ff ffc6 	bl	80041bc <osEE_scheduler_task_not_terminated>
    OSEE_SET_IPL(
 8004230:	f1c5 050f 	rsb	r5, r5, #15
 8004234:	012d      	lsls	r5, r5, #4
 8004236:	b2ed      	uxtb	r5, r5
 8004238:	f385 8811 	msr	BASEPRI, r5
 800423c:	e7f2      	b.n	8004224 <osEE_scheduler_task_wrapper_run+0x1c>
	...

08004240 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
 8004240:	b508      	push	{r3, lr}
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <osEE_idle_hook_wrapper+0x24>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	7c1b      	ldrb	r3, [r3, #16]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d105      	bne.n	800425a <osEE_idle_hook_wrapper+0x1a>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <osEE_idle_hook_wrapper+0x24>)
 8004250:	685b      	ldr	r3, [r3, #4]
    if (p_idle_hook != NULL) {
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f5      	beq.n	8004242 <osEE_idle_hook_wrapper+0x2>
      p_idle_hook();
 8004256:	4798      	blx	r3
 8004258:	e7f3      	b.n	8004242 <osEE_idle_hook_wrapper+0x2>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
 800425a:	4b02      	ldr	r3, [pc, #8]	; (8004264 <osEE_idle_hook_wrapper+0x24>)
 800425c:	6898      	ldr	r0, [r3, #8]
 800425e:	f000 f87c 	bl	800435a <osEE_idle_task_terminate>
}
 8004262:	bd08      	pop	{r3, pc}
 8004264:	080045e0 	.word	0x080045e0

08004268 <osEE_task_end>:
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
 8004268:	6882      	ldr	r2, [r0, #8]

  p_tcb->current_prio = p_tdb->ready_prio;
 800426a:	7e03      	ldrb	r3, [r0, #24]
 800426c:	7053      	strb	r3, [r2, #1]

  --p_tcb->current_num_of_act;
 800426e:	7813      	ldrb	r3, [r2, #0]
 8004270:	3b01      	subs	r3, #1
 8004272:	b2db      	uxtb	r3, r3
 8004274:	7013      	strb	r3, [r2, #0]

  if (p_tcb->current_num_of_act == 0U) {
 8004276:	b90b      	cbnz	r3, 800427c <osEE_task_end+0x14>
    p_tcb->status = OSEE_TASK_SUSPENDED;
 8004278:	7093      	strb	r3, [r2, #2]
 800427a:	4770      	bx	lr
  } else {
    p_tcb->status = OSEE_TASK_READY;
 800427c:	2301      	movs	r3, #1
 800427e:	7093      	strb	r3, [r2, #2]
  }
}
 8004280:	4770      	bx	lr
	...

08004284 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
 8004284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 8004288:	4b1b      	ldr	r3, [pc, #108]	; (80042f8 <osEE_scheduler_task_terminated+0x74>)
 800428a:	681c      	ldr	r4, [r3, #0]
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
 800428c:	6825      	ldr	r5, [r4, #0]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
 800428e:	68ae      	ldr	r6, [r5, #8]

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
 8004290:	600d      	str	r5, [r1, #0]
    /* We are having a termination so the hook flag has to be
       unset */
    p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
 8004292:	78b3      	ldrb	r3, [r6, #2]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d015      	beq.n	80042c4 <osEE_scheduler_task_terminated+0x40>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
 8004298:	68e1      	ldr	r1, [r4, #12]

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
 800429a:	680b      	ldr	r3, [r1, #0]
 800429c:	60e3      	str	r3, [r4, #12]
#endif /* OSEE_HAS_POSTTASKHOOK */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
 800429e:	7e2b      	ldrb	r3, [r5, #24]
 80042a0:	7073      	strb	r3, [r6, #1]
      p_tcb_term->status = OSEE_TASK_READY;
 80042a2:	2301      	movs	r3, #1
 80042a4:	70b3      	strb	r3, [r6, #2]
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
 80042a6:	1d23      	adds	r3, r4, #4
 80042a8:	462a      	mov	r2, r5
 80042aa:	461d      	mov	r5, r3
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f8ef 	bl	8004490 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
 80042b2:	4629      	mov	r1, r5
 80042b4:	4810      	ldr	r0, [pc, #64]	; (80042f8 <osEE_scheduler_task_terminated+0x74>)
 80042b6:	f000 f8a3 	bl	8004400 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
 80042ba:	b1c0      	cbz	r0, 80042ee <osEE_scheduler_task_terminated+0x6a>
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
          p_ccb->p_curr           = p_tdb_to;
        } else {
          p_tdb_to = p_ccb->p_curr;
 80042bc:	6827      	ldr	r7, [r4, #0]
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
 80042be:	4638      	mov	r0, r7
 80042c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
 80042c4:	1d21      	adds	r1, r4, #4
 80042c6:	480c      	ldr	r0, [pc, #48]	; (80042f8 <osEE_scheduler_task_terminated+0x74>)
 80042c8:	f000 f8e8 	bl	800449c <osEE_scheduler_core_pop_running>
 80042cc:	4680      	mov	r8, r0
      p_tdb_to = p_ccb->p_curr;
 80042ce:	6827      	ldr	r7, [r4, #0]
      if (p_tdb_term != p_tdb_to) {
 80042d0:	42bd      	cmp	r5, r7
 80042d2:	d008      	beq.n	80042e6 <osEE_scheduler_task_terminated+0x62>
        osEE_task_end(p_tdb_term);
 80042d4:	4628      	mov	r0, r5
 80042d6:	f7ff ffc7 	bl	8004268 <osEE_task_end>
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	f8c8 3000 	str.w	r3, [r8]
  (*pp_first)       = p_to_free;
 80042e0:	f8c4 8008 	str.w	r8, [r4, #8]
}
 80042e4:	e7eb      	b.n	80042be <osEE_scheduler_task_terminated+0x3a>
        --p_tcb_term->current_num_of_act;
 80042e6:	7833      	ldrb	r3, [r6, #0]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	7033      	strb	r3, [r6, #0]
 80042ec:	e7f5      	b.n	80042da <osEE_scheduler_task_terminated+0x56>
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
 80042ee:	68e3      	ldr	r3, [r4, #12]
 80042f0:	685f      	ldr	r7, [r3, #4]
          p_ccb->p_curr           = p_tdb_to;
 80042f2:	6027      	str	r7, [r4, #0]
 80042f4:	e7e3      	b.n	80042be <osEE_scheduler_task_terminated+0x3a>
 80042f6:	bf00      	nop
 80042f8:	080045e0 	.word	0x080045e0

080042fc <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
 80042fc:	b510      	push	{r4, lr}
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 80042fe:	4806      	ldr	r0, [pc, #24]	; (8004318 <osEE_scheduler_task_preemption_point+0x1c>)
 8004300:	6804      	ldr	r4, [r0, #0]
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
 8004302:	1d21      	adds	r1, r4, #4
 8004304:	f000 f87c 	bl	8004400 <osEE_scheduler_core_rq_preempt_stk>

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
 8004308:	b120      	cbz	r0, 8004314 <osEE_scheduler_task_preemption_point+0x18>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
 800430a:	6821      	ldr	r1, [r4, #0]
 800430c:	f000 f806 	bl	800431c <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
 8004310:	2001      	movs	r0, #1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
 8004312:	bd10      	pop	{r4, pc}
    is_preemption = OSEE_FALSE;
 8004314:	2000      	movs	r0, #0
 8004316:	e7fc      	b.n	8004312 <osEE_scheduler_task_preemption_point+0x16>
 8004318:	080045e0 	.word	0x080045e0

0800431c <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
 800431c:	b508      	push	{r3, lr}
 800431e:	4603      	mov	r3, r0
 8004320:	4608      	mov	r0, r1
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
 8004322:	688a      	ldr	r2, [r1, #8]

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
 8004324:	7892      	ldrb	r2, [r2, #2]
 8004326:	2a02      	cmp	r2, #2
 8004328:	d004      	beq.n	8004334 <osEE_change_context_from_running+0x18>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	6849      	ldr	r1, [r1, #4]
 800432e:	f7fc fa1b 	bl	8000768 <osEE_hal_save_ctx_and_ready2stacked>
      p_from->hdb.p_scb);
  }
}
 8004332:	bd08      	pop	{r3, pc}
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	6849      	ldr	r1, [r1, #4]
 8004338:	f7fc f9f2 	bl	8000720 <osEE_hal_save_ctx_and_restore_ctx>
 800433c:	e7f9      	b.n	8004332 <osEE_change_context_from_running+0x16>

0800433e <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
 800433e:	b508      	push	{r3, lr}
 8004340:	4608      	mov	r0, r1
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
 8004342:	688b      	ldr	r3, [r1, #8]

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
 8004344:	789b      	ldrb	r3, [r3, #2]
 8004346:	2b02      	cmp	r3, #2
 8004348:	d003      	beq.n	8004352 <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
 800434a:	6849      	ldr	r1, [r1, #4]
 800434c:	f7fc fa06 	bl	800075c <osEE_hal_ready2stacked>
  }
  /* STD Implementation do not use p_from here, but I cannot assure
     that any implementation won't do that */
  (void)p_from;
}
 8004350:	bd08      	pop	{r3, pc}
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
 8004352:	6849      	ldr	r1, [r1, #4]
 8004354:	f7fc f9f2 	bl	800073c <osEE_hal_restore_ctx>
 8004358:	e7fa      	b.n	8004350 <osEE_change_context_from_task_end+0x12>

0800435a <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
 800435a:	b510      	push	{r4, lr}
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
 800435c:	6803      	ldr	r3, [r0, #0]
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
 800435e:	6841      	ldr	r1, [r0, #4]
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
 8004360:	681c      	ldr	r4, [r3, #0]
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
 8004362:	680b      	ldr	r3, [r1, #0]

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
 8004364:	461a      	mov	r2, r3
 8004366:	681b      	ldr	r3, [r3, #0]
  } while ((p_tos != NULL) && (p_tos != p_bos));
 8004368:	b10b      	cbz	r3, 800436e <osEE_idle_task_terminate+0x14>
 800436a:	429c      	cmp	r4, r3
 800436c:	d1fa      	bne.n	8004364 <osEE_idle_task_terminate+0xa>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
 800436e:	600a      	str	r2, [r1, #0]

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
 8004370:	f7fc f9e4 	bl	800073c <osEE_hal_restore_ctx>
}
 8004374:	bd10      	pop	{r4, pc}

08004376 <osEE_cortex_m_system_init>:

/*
 * System Initialization.
 */
FUNC(void, OS_CODE) osEE_cortex_m_system_init(void)
{
 8004376:	b508      	push	{r3, lr}
	/* 
	 * Set the priority of PendSV to the minimum one
	 * PendSV is the software interrupt used for context switch
	 */
	osEE_set_switch_context_pri();
 8004378:	f7fc fa18 	bl	80007ac <osEE_set_switch_context_pri>
#endif	/* OSEE_CORTEX_M_SYSTICK_ISR */

	/* 
	 * MCU System Initialization.
	 */
	osEE_cortex_m_mcu_system_init();
 800437c:	f000 f8a0 	bl	80044c0 <osEE_cortex_m_mcu_system_init>

}	/* osEE_cortex_m_system_init() */
 8004380:	bd08      	pop	{r3, pc}
	...

08004384 <osEE_cortex_m_scheduler_task_end>:
 *  \date   2016
 */
#include "ee_internal.h"

FUNC(void, OS_CODE) osEE_cortex_m_scheduler_task_end(void)
{
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	b082      	sub	sp, #8

  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb = p_cdb->p_ccb;
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <osEE_cortex_m_scheduler_task_end+0x58>)
 800438a:	681c      	ldr	r4, [r3, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)   p_term_sn = p_ccb->p_stk_sn;
 800438c:	68e5      	ldr	r5, [r4, #12]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_orig_task_sn = p_term_sn->p_next;
 800438e:	682b      	ldr	r3, [r5, #0]
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_orig_tdb;

  /* p_orig_task_sn == NULL means I preempted idle task */
  if (p_orig_task_sn != NULL) {
 8004390:	b173      	cbz	r3, 80043b0 <osEE_cortex_m_scheduler_task_end+0x2c>
    p_orig_tdb = p_orig_task_sn->p_tdb;
 8004392:	685e      	ldr	r6, [r3, #4]
    /* Set PendSV */
    osEE_cortex_m_trigger_pend_sv();
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
  }
#else
  if (p_ccb->p_curr->task_type != OSEE_TASK_TYPE_ISR2) {
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	7c12      	ldrb	r2, [r2, #16]
 8004398:	2a02      	cmp	r2, #2
 800439a:	d00c      	beq.n	80043b6 <osEE_cortex_m_scheduler_task_end+0x32>
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)            p_from;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)       p_to =
      osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
 800439c:	a901      	add	r1, sp, #4
 800439e:	4810      	ldr	r0, [pc, #64]	; (80043e0 <osEE_cortex_m_scheduler_task_end+0x5c>)
 80043a0:	f7ff ff70 	bl	8004284 <osEE_scheduler_task_terminated>
 80043a4:	4601      	mov	r1, r0

    osEE_change_context_from_task_end(p_from, p_to);
 80043a6:	9801      	ldr	r0, [sp, #4]
 80043a8:	f7ff ffc9 	bl	800433e <osEE_change_context_from_task_end>
       (osEE_cortex_m_isr2_stub) after osEE_activate_isr2(t) call */
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
  }
#endif

}
 80043ac:	b002      	add	sp, #8
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
    p_orig_tdb = p_cdb->p_idle_task;
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <osEE_cortex_m_scheduler_task_end+0x58>)
 80043b2:	6896      	ldr	r6, [r2, #8]
 80043b4:	e7ee      	b.n	8004394 <osEE_cortex_m_scheduler_task_end+0x10>
    p_ccb->p_stk_sn = p_orig_task_sn;
 80043b6:	60e3      	str	r3, [r4, #12]
    osEE_task_end(p_term_sn->p_tdb);
 80043b8:	6868      	ldr	r0, [r5, #4]
 80043ba:	f7ff ff55 	bl	8004268 <osEE_task_end>
    p_ccb->p_curr = p_orig_tdb;
 80043be:	6026      	str	r6, [r4, #0]
    p_orig_tdb->p_tcb->status = OSEE_TASK_RUNNING;
 80043c0:	68b3      	ldr	r3, [r6, #8]
 80043c2:	2204      	movs	r2, #4
 80043c4:	709a      	strb	r2, [r3, #2]
  p_to_free->p_next = (*pp_first);
 80043c6:	68a3      	ldr	r3, [r4, #8]
 80043c8:	602b      	str	r3, [r5, #0]
  (*pp_first)       = p_to_free;
 80043ca:	60a5      	str	r5, [r4, #8]
    osEE_cortex_m_trigger_pend_sv();
 80043cc:	f7fc f9fc 	bl	80007c8 <osEE_cortex_m_trigger_pend_sv>
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
 80043d0:	6871      	ldr	r1, [r6, #4]
 80043d2:	4630      	mov	r0, r6
 80043d4:	f7fc f9b2 	bl	800073c <osEE_hal_restore_ctx>
}
 80043d8:	e7e8      	b.n	80043ac <osEE_cortex_m_scheduler_task_end+0x28>
 80043da:	bf00      	nop
 80043dc:	080045e0 	.word	0x080045e0
 80043e0:	080045fc 	.word	0x080045fc

080043e4 <osEE_scheduler_stk_next>:
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
 80043e4:	684b      	ldr	r3, [r1, #4]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
 80043e6:	689a      	ldr	r2, [r3, #8]
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
 80043e8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80043ec:	f8c1 c000 	str.w	ip, [r1]
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
 80043f0:	60c1      	str	r1, [r0, #12]
  p_ccb->p_curr                 = p_tdb;
 80043f2:	6003      	str	r3, [r0, #0]

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
 80043f4:	7e5b      	ldrb	r3, [r3, #25]
    if (p_tcb->current_prio < dispatch_prio) {
 80043f6:	7851      	ldrb	r1, [r2, #1]
 80043f8:	4299      	cmp	r1, r3
 80043fa:	d200      	bcs.n	80043fe <osEE_scheduler_stk_next+0x1a>
      p_tcb->current_prio = dispatch_prio;
 80043fc:	7053      	strb	r3, [r2, #1]
    }
  }
}
 80043fe:	4770      	bx	lr

08004400 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 8004406:	6800      	ldr	r0, [r0, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
 8004408:	6809      	ldr	r1, [r1, #0]
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
 800440a:	68c4      	ldr	r4, [r0, #12]

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
 800440c:	b194      	cbz	r4, 8004434 <osEE_scheduler_core_rq_preempt_stk+0x34>
    p_ret_tdb = p_ret_sn->p_tdb;
 800440e:	6864      	ldr	r4, [r4, #4]
    if (p_rq_sn != NULL) {
 8004410:	b1b1      	cbz	r1, 8004440 <osEE_scheduler_core_rq_preempt_stk+0x40>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
 8004412:	68a2      	ldr	r2, [r4, #8]
      if (p_ret_tcb->current_prio <
 8004414:	f892 e001 	ldrb.w	lr, [r2, #1]
        p_rq_sn->p_tdb->p_tcb->current_prio)
 8004418:	684d      	ldr	r5, [r1, #4]
 800441a:	68ad      	ldr	r5, [r5, #8]
 800441c:	f895 c001 	ldrb.w	ip, [r5, #1]
      if (p_ret_tcb->current_prio <
 8004420:	45e6      	cmp	lr, ip
 8004422:	d20f      	bcs.n	8004444 <osEE_scheduler_core_rq_preempt_stk+0x44>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
 8004424:	2502      	movs	r5, #2
 8004426:	7095      	strb	r5, [r2, #2]
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
 8004428:	680a      	ldr	r2, [r1, #0]
 800442a:	601a      	str	r2, [r3, #0]

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
 800442c:	f7ff ffda 	bl	80043e4 <osEE_scheduler_stk_next>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
 8004430:	4620      	mov	r0, r4
 8004432:	bd38      	pop	{r3, r4, r5, pc}
  } else if (p_rq_sn != NULL) {
 8004434:	b141      	cbz	r1, 8004448 <osEE_scheduler_core_rq_preempt_stk+0x48>
    p_ret_tdb                 = p_cdb->p_idle_task;
 8004436:	6894      	ldr	r4, [r2, #8]
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
 8004438:	68a2      	ldr	r2, [r4, #8]
 800443a:	2502      	movs	r5, #2
 800443c:	7095      	strb	r5, [r2, #2]
  if (is_rq_preemption) {
 800443e:	e7f3      	b.n	8004428 <osEE_scheduler_core_rq_preempt_stk+0x28>
    p_ret_tdb = NULL;
 8004440:	460c      	mov	r4, r1
 8004442:	e7f5      	b.n	8004430 <osEE_scheduler_core_rq_preempt_stk+0x30>
 8004444:	2400      	movs	r4, #0
 8004446:	e7f3      	b.n	8004430 <osEE_scheduler_core_rq_preempt_stk+0x30>
 8004448:	460c      	mov	r4, r1
  return p_ret_tdb;
 800444a:	e7f1      	b.n	8004430 <osEE_scheduler_core_rq_preempt_stk+0x30>

0800444c <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
 800444c:	b470      	push	{r4, r5, r6}
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
 800444e:	684b      	ldr	r3, [r1, #4]
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
 8004450:	689c      	ldr	r4, [r3, #8]
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
 8004452:	4616      	mov	r6, r2
 8004454:	b122      	cbz	r2, 8004460 <osEE_sn_priority_insert+0x14>
 8004456:	f893 c018 	ldrb.w	ip, [r3, #24]
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
 800445a:	6803      	ldr	r3, [r0, #0]
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
 800445c:	2500      	movs	r5, #0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
 800445e:	e007      	b.n	8004470 <osEE_sn_priority_insert+0x24>
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
 8004460:	f894 c001 	ldrb.w	ip, [r4, #1]
 8004464:	e7f9      	b.n	800445a <osEE_sn_priority_insert+0xe>
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (as_ready) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
 8004466:	7862      	ldrb	r2, [r4, #1]
    }

    if (new_task_prio <= prio_to_check)
 8004468:	4562      	cmp	r2, ip
 800446a:	d308      	bcc.n	800447e <osEE_sn_priority_insert+0x32>
    {
      p_prev = p_curr;
 800446c:	461d      	mov	r5, r3
      p_curr = p_curr->p_next;
 800446e:	681b      	ldr	r3, [r3, #0]
  while (p_curr != NULL) {
 8004470:	b12b      	cbz	r3, 800447e <osEE_sn_priority_insert+0x32>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
 8004472:	685a      	ldr	r2, [r3, #4]
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
 8004474:	6894      	ldr	r4, [r2, #8]
    if (as_ready) {
 8004476:	2e00      	cmp	r6, #0
 8004478:	d0f5      	beq.n	8004466 <osEE_sn_priority_insert+0x1a>
      prio_to_check = p_cur_tdb->ready_prio;
 800447a:	7e12      	ldrb	r2, [r2, #24]
 800447c:	e7f4      	b.n	8004468 <osEE_sn_priority_insert+0x1c>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
 800447e:	b125      	cbz	r5, 800448a <osEE_sn_priority_insert+0x3e>
    p_prev->p_next = p_sn_new;
 8004480:	6029      	str	r1, [r5, #0]
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
 8004482:	2000      	movs	r0, #0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
 8004484:	600b      	str	r3, [r1, #0]

  return head_changed;
}
 8004486:	bc70      	pop	{r4, r5, r6}
 8004488:	4770      	bx	lr
    (*pp_first)   = p_sn_new;
 800448a:	6001      	str	r1, [r0, #0]
    head_changed  = OSEE_TRUE;
 800448c:	2001      	movs	r0, #1
 800448e:	e7f9      	b.n	8004484 <osEE_sn_priority_insert+0x38>

08004490 <osEE_scheduler_rq_insert>:
{
 8004490:	b508      	push	{r3, lr}
  p_sn_new->p_tdb = p_tdb_new;
 8004492:	604a      	str	r2, [r1, #4]
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
 8004494:	2201      	movs	r2, #1
 8004496:	f7ff ffd9 	bl	800444c <osEE_sn_priority_insert>
}
 800449a:	bd08      	pop	{r3, pc}

0800449c <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4605      	mov	r5, r0
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
 80044a0:	6804      	ldr	r4, [r0, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
 80044a2:	68e6      	ldr	r6, [r4, #12]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;
 80044a4:	6833      	ldr	r3, [r6, #0]

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
 80044a6:	60e3      	str	r3, [r4, #12]
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
 80044a8:	f7ff ffaa 	bl	8004400 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
 80044ac:	68e3      	ldr	r3, [r4, #12]

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
 80044ae:	b108      	cbz	r0, 80044b4 <osEE_scheduler_core_pop_running+0x18>
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
 80044b0:	4630      	mov	r0, r6
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
      if (p_curr_stk_sn != NULL) {
 80044b4:	b113      	cbz	r3, 80044bc <osEE_scheduler_core_pop_running+0x20>
        p_tdb_stk = p_curr_stk_sn->p_tdb;
 80044b6:	685b      	ldr	r3, [r3, #4]
      p_ccb->p_curr            = p_tdb_stk;
 80044b8:	6023      	str	r3, [r4, #0]
  return p_prev_stk_sn;
 80044ba:	e7f9      	b.n	80044b0 <osEE_scheduler_core_pop_running+0x14>
        p_tdb_stk = p_cdb->p_idle_task;
 80044bc:	68ab      	ldr	r3, [r5, #8]
 80044be:	e7fb      	b.n	80044b8 <osEE_scheduler_core_pop_running+0x1c>

080044c0 <osEE_cortex_m_mcu_system_init>:
)
#define	OSEE_CORTEX_M_USART2_NUM		(			\
	OSEE_CORTEX_M_USART2_ISR_ID - OSEE_CORTEX_M_OVERALL_EXC_NUM	\
)
#ifdef	OSEE_CORTEX_M_USART2_ISR_PRI
	OSEE_CORTEX_M_NVIC_SET_PRI(
 80044c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80044c4:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80044c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044cc:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 80044d0:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80044d4:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 80044d8:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		OSEE_CORTEX_M_USART2_NUM, OSEE_CORTEX_M_USART2_ISR_PRI
	);
#endif	/* OSEE_CORTEX_M_USART2_ISR_PRI */
	OSEE_CORTEX_M_NVIC_INT_ENABLE(OSEE_CORTEX_M_USART2_NUM);
 80044dc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80044e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	);
#endif	/* OSEE_CORTEX_M_DMA2D_ISR_PRI */
	OSEE_CORTEX_M_NVIC_INT_ENABLE(OSEE_CORTEX_M_DMA2D_NUM);
#endif	/* OSEE_CORTEX_M_DMA2D_ISR */
#endif	/* OS_EE_ARCH_CORTEX_M_STM32F429xx */
}	/* osEE_cortex_m_mcu_system_init() */
 80044e8:	4770      	bx	lr
	...

080044ec <USART2_IRQHandler>:
 * USART2 global interrupt
 */
#if (defined(OSEE_CORTEX_M_USART2_ISR_TID)) && (OSEE_CORTEX_M_USART2_ISR_CAT == 2)
OSEE_CORTEX_M_ISR2_DEFINITION(USART2_IRQHandler, OSEE_CORTEX_M_USART2_ISR_TID)
#elif (defined(OSEE_CORTEX_M_USART2_ISR)) && (OSEE_CORTEX_M_USART2_ISR_CAT == 1)
OSEE_CORTEX_M_ISR1_DEFINITION(USART2_IRQHandler, OSEE_CORTEX_M_USART2_ISR)
 80044ec:	b508      	push	{r3, lr}
 80044ee:	4802      	ldr	r0, [pc, #8]	; (80044f8 <USART2_IRQHandler+0xc>)
 80044f0:	f000 f81a 	bl	8004528 <osEE_cortex_m_isr1_stub>
 80044f4:	bd08      	pop	{r3, pc}
 80044f6:	bf00      	nop
 80044f8:	08000861 	.word	0x08000861

080044fc <osEE_cortex_m_change_context_from_task_end>:
#include "ee_internal.h"

FUNC(void, OS_CODE) osEE_cortex_m_change_context_from_task_end(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_orig_tdb
)
{
 80044fc:	b510      	push	{r4, lr}
  OSEE_GET_IPL(flags);
 80044fe:	f3ef 8411 	mrs	r4, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 8004502:	0923      	lsrs	r3, r4, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 8004504:	3b01      	subs	r3, #1
 8004506:	2b07      	cmp	r3, #7
 8004508:	d902      	bls.n	8004510 <osEE_cortex_m_change_context_from_task_end+0x14>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	f383 8811 	msr	BASEPRI, r3
  OSEE_SEI();
 8004510:	b662      	cpsie	i
  OsEE_reg f = osEE_hal_begin_nested_primitive();

  osEE_hal_enableIRQ();

  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
 8004512:	4804      	ldr	r0, [pc, #16]	; (8004524 <osEE_cortex_m_change_context_from_task_end+0x28>)
 8004514:	f7ff fef2 	bl	80042fc <osEE_scheduler_task_preemption_point>
  OSEE_CLI();
 8004518:	b672      	cpsid	i
  OSEE_SET_IPL(flag << OSEE_CORTEX_M_PRIO_SH_BITS);
 800451a:	f024 040f 	bic.w	r4, r4, #15
 800451e:	f384 8811 	msr	BASEPRI, r4

  osEE_hal_disableIRQ();

  osEE_hal_end_nested_primitive(f);
}
 8004522:	bd10      	pop	{r4, pc}
 8004524:	080045fc 	.word	0x080045fc

08004528 <osEE_cortex_m_isr1_stub>:
 */
FUNC(void, OS_CODE) OSEE_COMPILER_KEEP
osEE_cortex_m_isr1_stub(
  VAR(OsEE_void_cb, AUTOMATIC)	f
)
{
 8004528:	b508      	push	{r3, lr}

  /* Call The ISR User Handler */
  f();
 800452a:	4780      	blx	r0

}	/* osEE_cortex_m_isr1_stub() */
 800452c:	bd08      	pop	{r3, pc}
	...

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr
