
erika3app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b4c  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .cacheable_text 000005ac  08002d0c  08002d0c  00012d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000264  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08003524  08003524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0800352c  0800352c  0001352c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000488  20000000  08003530  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020488  2**0
                  CONTENTS
  9 .bss          000021cc  20000488  20000488  00020488  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002654  20002654  00020488  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015742  00000000  00000000  000204b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb0  00000000  00000000  00035bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  00039aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  0003aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041abd  00000000  00000000  0003bb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022634  00000000  00000000  0007d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd06c  00000000  00000000  0009fbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0019cc5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002618  00000000  00000000  0019cca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000ad14  00000000  00000000  0019f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000488 	.word	0x20000488
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08002cf4 	.word	0x08002cf4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000048c 	.word	0x2000048c
 80001fc:	08002cf4 	.word	0x08002cf4

08000200 <strlen>:
 8000200:	f890 f000 	pld	[r0]
 8000204:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000208:	f020 0107 	bic.w	r1, r0, #7
 800020c:	f06f 0c00 	mvn.w	ip, #0
 8000210:	f010 0407 	ands.w	r4, r0, #7
 8000214:	f891 f020 	pld	[r1, #32]
 8000218:	f040 8049 	bne.w	80002ae <strlen+0xae>
 800021c:	f04f 0400 	mov.w	r4, #0
 8000220:	f06f 0007 	mvn.w	r0, #7
 8000224:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000228:	f891 f040 	pld	[r1, #64]	; 0x40
 800022c:	f100 0008 	add.w	r0, r0, #8
 8000230:	fa82 f24c 	uadd8	r2, r2, ip
 8000234:	faa4 f28c 	sel	r2, r4, ip
 8000238:	fa83 f34c 	uadd8	r3, r3, ip
 800023c:	faa2 f38c 	sel	r3, r2, ip
 8000240:	bb4b      	cbnz	r3, 8000296 <strlen+0x96>
 8000242:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000246:	fa82 f24c 	uadd8	r2, r2, ip
 800024a:	f100 0008 	add.w	r0, r0, #8
 800024e:	faa4 f28c 	sel	r2, r4, ip
 8000252:	fa83 f34c 	uadd8	r3, r3, ip
 8000256:	faa2 f38c 	sel	r3, r2, ip
 800025a:	b9e3      	cbnz	r3, 8000296 <strlen+0x96>
 800025c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000260:	fa82 f24c 	uadd8	r2, r2, ip
 8000264:	f100 0008 	add.w	r0, r0, #8
 8000268:	faa4 f28c 	sel	r2, r4, ip
 800026c:	fa83 f34c 	uadd8	r3, r3, ip
 8000270:	faa2 f38c 	sel	r3, r2, ip
 8000274:	b97b      	cbnz	r3, 8000296 <strlen+0x96>
 8000276:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800027a:	f101 0120 	add.w	r1, r1, #32
 800027e:	fa82 f24c 	uadd8	r2, r2, ip
 8000282:	f100 0008 	add.w	r0, r0, #8
 8000286:	faa4 f28c 	sel	r2, r4, ip
 800028a:	fa83 f34c 	uadd8	r3, r3, ip
 800028e:	faa2 f38c 	sel	r3, r2, ip
 8000292:	2b00      	cmp	r3, #0
 8000294:	d0c6      	beq.n	8000224 <strlen+0x24>
 8000296:	2a00      	cmp	r2, #0
 8000298:	bf04      	itt	eq
 800029a:	3004      	addeq	r0, #4
 800029c:	461a      	moveq	r2, r3
 800029e:	ba12      	rev	r2, r2
 80002a0:	fab2 f282 	clz	r2, r2
 80002a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80002a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80002ac:	4770      	bx	lr
 80002ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80002b2:	f004 0503 	and.w	r5, r4, #3
 80002b6:	f1c4 0000 	rsb	r0, r4, #0
 80002ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80002be:	f014 0f04 	tst.w	r4, #4
 80002c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80002c6:	fa0c f505 	lsl.w	r5, ip, r5
 80002ca:	ea62 0205 	orn	r2, r2, r5
 80002ce:	bf1c      	itt	ne
 80002d0:	ea63 0305 	ornne	r3, r3, r5
 80002d4:	4662      	movne	r2, ip
 80002d6:	f04f 0400 	mov.w	r4, #0
 80002da:	e7a9      	b.n	8000230 <strlen+0x30>

080002dc <__aeabi_uldivmod>:
 80002dc:	b953      	cbnz	r3, 80002f4 <__aeabi_uldivmod+0x18>
 80002de:	b94a      	cbnz	r2, 80002f4 <__aeabi_uldivmod+0x18>
 80002e0:	2900      	cmp	r1, #0
 80002e2:	bf08      	it	eq
 80002e4:	2800      	cmpeq	r0, #0
 80002e6:	bf1c      	itt	ne
 80002e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f0:	f000 b974 	b.w	80005dc <__aeabi_idiv0>
 80002f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002fc:	f000 f806 	bl	800030c <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4770      	bx	lr

0800030c <__udivmoddi4>:
 800030c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000310:	9e08      	ldr	r6, [sp, #32]
 8000312:	460d      	mov	r5, r1
 8000314:	4604      	mov	r4, r0
 8000316:	4688      	mov	r8, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14d      	bne.n	80003b8 <__udivmoddi4+0xac>
 800031c:	428a      	cmp	r2, r1
 800031e:	4694      	mov	ip, r2
 8000320:	d968      	bls.n	80003f4 <__udivmoddi4+0xe8>
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	b152      	cbz	r2, 800033e <__udivmoddi4+0x32>
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	f1c2 0120 	rsb	r1, r2, #32
 8000330:	fa20 f101 	lsr.w	r1, r0, r1
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	ea41 0803 	orr.w	r8, r1, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000342:	0c21      	lsrs	r1, r4, #16
 8000344:	fbb8 fef5 	udiv	lr, r8, r5
 8000348:	fa1f f78c 	uxth.w	r7, ip
 800034c:	fb05 831e 	mls	r3, r5, lr, r8
 8000350:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000354:	fb0e f107 	mul.w	r1, lr, r7
 8000358:	4299      	cmp	r1, r3
 800035a:	d90b      	bls.n	8000374 <__udivmoddi4+0x68>
 800035c:	eb1c 0303 	adds.w	r3, ip, r3
 8000360:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000364:	f080 811e 	bcs.w	80005a4 <__udivmoddi4+0x298>
 8000368:	4299      	cmp	r1, r3
 800036a:	f240 811b 	bls.w	80005a4 <__udivmoddi4+0x298>
 800036e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f5 	udiv	r0, r3, r5
 800037c:	fb05 3310 	mls	r3, r5, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x96>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 8108 	bcs.w	80005a8 <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8105 	bls.w	80005a8 <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	1be4      	subs	r4, r4, r7
 80003a4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	b11e      	cbz	r6, 80003b4 <__udivmoddi4+0xa8>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c6 4300 	strd	r4, r3, [r6]
 80003b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0xc2>
 80003bc:	2e00      	cmp	r6, #0
 80003be:	f000 80ee 	beq.w	800059e <__udivmoddi4+0x292>
 80003c2:	2100      	movs	r1, #0
 80003c4:	e9c6 0500 	strd	r0, r5, [r6]
 80003c8:	4608      	mov	r0, r1
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f183 	clz	r1, r3
 80003d2:	2900      	cmp	r1, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x160>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd4>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80f9 	bhi.w	80005d2 <__udivmoddi4+0x2c6>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb65 0303 	sbc.w	r3, r5, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e2      	beq.n	80003b4 <__udivmoddi4+0xa8>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7df      	b.n	80003b4 <__udivmoddi4+0xa8>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xec>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 8091 	bne.w	8000524 <__udivmoddi4+0x218>
 8000402:	eba1 050c 	sub.w	r5, r1, ip
 8000406:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040a:	fa1f fe8c 	uxth.w	lr, ip
 800040e:	2101      	movs	r1, #1
 8000410:	fbb5 f3f7 	udiv	r3, r5, r7
 8000414:	fb07 5013 	mls	r0, r7, r3, r5
 8000418:	0c25      	lsrs	r5, r4, #16
 800041a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041e:	fb0e f003 	mul.w	r0, lr, r3
 8000422:	42a8      	cmp	r0, r5
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x12c>
 8000426:	eb1c 0505 	adds.w	r5, ip, r5
 800042a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x12a>
 8000430:	42a8      	cmp	r0, r5
 8000432:	f200 80cb 	bhi.w	80005cc <__udivmoddi4+0x2c0>
 8000436:	4643      	mov	r3, r8
 8000438:	1a2d      	subs	r5, r5, r0
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb5 f0f7 	udiv	r0, r5, r7
 8000440:	fb07 5510 	mls	r5, r7, r0, r5
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb0e fe00 	mul.w	lr, lr, r0
 800044c:	45a6      	cmp	lr, r4
 800044e:	d908      	bls.n	8000462 <__udivmoddi4+0x156>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000458:	d202      	bcs.n	8000460 <__udivmoddi4+0x154>
 800045a:	45a6      	cmp	lr, r4
 800045c:	f200 80bb 	bhi.w	80005d6 <__udivmoddi4+0x2ca>
 8000460:	4628      	mov	r0, r5
 8000462:	eba4 040e 	sub.w	r4, r4, lr
 8000466:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046a:	e79e      	b.n	80003aa <__udivmoddi4+0x9e>
 800046c:	f1c1 0720 	rsb	r7, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 fc07 	lsr.w	ip, r2, r7
 8000476:	ea4c 0c03 	orr.w	ip, ip, r3
 800047a:	fa20 f407 	lsr.w	r4, r0, r7
 800047e:	fa05 f301 	lsl.w	r3, r5, r1
 8000482:	431c      	orrs	r4, r3
 8000484:	40fd      	lsrs	r5, r7
 8000486:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048a:	fa00 f301 	lsl.w	r3, r0, r1
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	0c20      	lsrs	r0, r4, #16
 8000494:	fa1f fe8c 	uxth.w	lr, ip
 8000498:	fb09 5518 	mls	r5, r9, r8, r5
 800049c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80004a0:	fb08 f00e 	mul.w	r0, r8, lr
 80004a4:	42a8      	cmp	r0, r5
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90b      	bls.n	80004c4 <__udivmoddi4+0x1b8>
 80004ac:	eb1c 0505 	adds.w	r5, ip, r5
 80004b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b4:	f080 8088 	bcs.w	80005c8 <__udivmoddi4+0x2bc>
 80004b8:	42a8      	cmp	r0, r5
 80004ba:	f240 8085 	bls.w	80005c8 <__udivmoddi4+0x2bc>
 80004be:	f1a8 0802 	sub.w	r8, r8, #2
 80004c2:	4465      	add	r5, ip
 80004c4:	1a2d      	subs	r5, r5, r0
 80004c6:	b2a4      	uxth	r4, r4
 80004c8:	fbb5 f0f9 	udiv	r0, r5, r9
 80004cc:	fb09 5510 	mls	r5, r9, r0, r5
 80004d0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d8:	45ae      	cmp	lr, r5
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1e2>
 80004dc:	eb1c 0505 	adds.w	r5, ip, r5
 80004e0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e4:	d26c      	bcs.n	80005c0 <__udivmoddi4+0x2b4>
 80004e6:	45ae      	cmp	lr, r5
 80004e8:	d96a      	bls.n	80005c0 <__udivmoddi4+0x2b4>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4465      	add	r5, ip
 80004ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f2:	fba0 9402 	umull	r9, r4, r0, r2
 80004f6:	eba5 050e 	sub.w	r5, r5, lr
 80004fa:	42a5      	cmp	r5, r4
 80004fc:	46c8      	mov	r8, r9
 80004fe:	46a6      	mov	lr, r4
 8000500:	d356      	bcc.n	80005b0 <__udivmoddi4+0x2a4>
 8000502:	d053      	beq.n	80005ac <__udivmoddi4+0x2a0>
 8000504:	b15e      	cbz	r6, 800051e <__udivmoddi4+0x212>
 8000506:	ebb3 0208 	subs.w	r2, r3, r8
 800050a:	eb65 050e 	sbc.w	r5, r5, lr
 800050e:	fa05 f707 	lsl.w	r7, r5, r7
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	40cd      	lsrs	r5, r1
 8000518:	431f      	orrs	r7, r3
 800051a:	e9c6 7500 	strd	r7, r5, [r6]
 800051e:	2100      	movs	r1, #0
 8000520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa25 f303 	lsr.w	r3, r5, r3
 8000534:	4095      	lsls	r5, r2
 8000536:	430d      	orrs	r5, r1
 8000538:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800053c:	fa1f fe8c 	uxth.w	lr, ip
 8000540:	fbb3 f1f7 	udiv	r1, r3, r7
 8000544:	fb07 3011 	mls	r0, r7, r1, r3
 8000548:	0c2b      	lsrs	r3, r5, #16
 800054a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800054e:	fb01 f00e 	mul.w	r0, r1, lr
 8000552:	4298      	cmp	r0, r3
 8000554:	fa04 f402 	lsl.w	r4, r4, r2
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x260>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000562:	d22f      	bcs.n	80005c4 <__udivmoddi4+0x2b8>
 8000564:	4298      	cmp	r0, r3
 8000566:	d92d      	bls.n	80005c4 <__udivmoddi4+0x2b8>
 8000568:	3902      	subs	r1, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a1b      	subs	r3, r3, r0
 800056e:	b2ad      	uxth	r5, r5
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3310 	mls	r3, r7, r0, r3
 8000578:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800057c:	fb00 f30e 	mul.w	r3, r0, lr
 8000580:	42ab      	cmp	r3, r5
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x28a>
 8000584:	eb1c 0505 	adds.w	r5, ip, r5
 8000588:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058c:	d216      	bcs.n	80005bc <__udivmoddi4+0x2b0>
 800058e:	42ab      	cmp	r3, r5
 8000590:	d914      	bls.n	80005bc <__udivmoddi4+0x2b0>
 8000592:	3802      	subs	r0, #2
 8000594:	4465      	add	r5, ip
 8000596:	1aed      	subs	r5, r5, r3
 8000598:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800059c:	e738      	b.n	8000410 <__udivmoddi4+0x104>
 800059e:	4631      	mov	r1, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e707      	b.n	80003b4 <__udivmoddi4+0xa8>
 80005a4:	4686      	mov	lr, r0
 80005a6:	e6e5      	b.n	8000374 <__udivmoddi4+0x68>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fa      	b.n	80003a2 <__udivmoddi4+0x96>
 80005ac:	454b      	cmp	r3, r9
 80005ae:	d2a9      	bcs.n	8000504 <__udivmoddi4+0x1f8>
 80005b0:	ebb9 0802 	subs.w	r8, r9, r2
 80005b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7a3      	b.n	8000504 <__udivmoddi4+0x1f8>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7ea      	b.n	8000596 <__udivmoddi4+0x28a>
 80005c0:	4620      	mov	r0, r4
 80005c2:	e794      	b.n	80004ee <__udivmoddi4+0x1e2>
 80005c4:	4641      	mov	r1, r8
 80005c6:	e7d1      	b.n	800056c <__udivmoddi4+0x260>
 80005c8:	46d0      	mov	r8, sl
 80005ca:	e77b      	b.n	80004c4 <__udivmoddi4+0x1b8>
 80005cc:	3b02      	subs	r3, #2
 80005ce:	4465      	add	r5, ip
 80005d0:	e732      	b.n	8000438 <__udivmoddi4+0x12c>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e709      	b.n	80003ea <__udivmoddi4+0xde>
 80005d6:	4464      	add	r4, ip
 80005d8:	3802      	subs	r0, #2
 80005da:	e742      	b.n	8000462 <__udivmoddi4+0x156>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <osEE_hal_save_ctx_and_restore_ctx>:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 * R2 parameter: 	OsEE_SCB * p_from_scb
	 */
	osEE_hal_save_vcontext_m R2
 80005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e4:	f3ef 8403 	mrs	r4, PSR
 80005e8:	b410      	push	{r4}
 80005ea:	4614      	mov	r4, r2
 80005ec:	6825      	ldr	r5, [r4, #0]
 80005ee:	b460      	push	{r5, r6}
 80005f0:	f3ef 8508 	mrs	r5, MSP
 80005f4:	6025      	str	r5, [r4, #0]
	B	osEE_hal_restore_ctx
 80005f6:	f000 b801 	b.w	80005fc <osEE_hal_restore_ctx>
 80005fa:	bf00      	nop

080005fc <osEE_hal_restore_ctx>:
osEE_hal_restore_ctx:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 */
	osEE_hal_restore_vcontext_m R1
 80005fc:	460c      	mov	r4, r1
 80005fe:	6825      	ldr	r5, [r4, #0]
 8000600:	f385 8808 	msr	MSP, r5
 8000604:	bc60      	pop	{r5, r6}
 8000606:	6025      	str	r5, [r4, #0]
 8000608:	bc10      	pop	{r4}
 800060a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800060e:	432c      	orrs	r4, r5
 8000610:	f384 8803 	msr	PSR, r4
 8000614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	B	osEE_scheduler_task_wrapper_restore
 8000618:	f002 b9d4 	b.w	80029c4 <osEE_scheduler_task_wrapper_restore>

0800061c <osEE_hal_ready2stacked>:
	MRS	R4, CONTROL
	LDR	R5, =CONTROL_FPCA_NEG
	ANDS	R4, R4, R5
	MSR	CONTROL, R4
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */
	LDR	R2, [R1]
 800061c:	680a      	ldr	r2, [r1, #0]
	/* sp = R2 */
	MSR	MSP, R2
 800061e:	f382 8808 	msr	MSP, r2
	B	osEE_scheduler_task_wrapper_run
 8000622:	f002 b9d3 	b.w	80029cc <osEE_scheduler_task_wrapper_run>
 8000626:	bf00      	nop

08000628 <osEE_hal_save_ctx_and_ready2stacked>:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 * R2 parameter:	OsEE_SCB * p_from_scb
	*/
	osEE_hal_save_vcontext_m R2
 8000628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800062c:	f3ef 8403 	mrs	r4, PSR
 8000630:	b410      	push	{r4}
 8000632:	4614      	mov	r4, r2
 8000634:	6825      	ldr	r5, [r4, #0]
 8000636:	b460      	push	{r5, r6}
 8000638:	f3ef 8508 	mrs	r5, MSP
 800063c:	6025      	str	r5, [r4, #0]
	B	osEE_hal_ready2stacked
 800063e:	f7ff bfed 	b.w	800061c <osEE_hal_ready2stacked>
 8000642:	bf00      	nop

08000644 <osEE_hal_terminate_ctx>:
	MRS	R4, CONTROL
	LDR	R5, =CONTROL_FPCA_NEG
	ANDS	R4, R4, R5
	MSR	CONTROL, R4
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */
	LDR	R2, [R0]
 8000644:	6802      	ldr	r2, [r0, #0]
	/* Unwind SP */
	MSR	MSP, R2
 8000646:	f382 8808 	msr	MSP, r2
	/*  Jump to kern_callback (that schedule) */
	BX	R1
 800064a:	4708      	bx	r1

0800064c <osEE_cortex_m_restore_ctx>:
osEE_cortex_m_restore_ctx:
	/*
	 * R0 parameter:	OsEE_TDB * p_to_tdb
	 * R1 parameter:	OsEE_SCB * p_to_scb
	 */
	osEE_hal_restore_vcontext_m R1
 800064c:	460c      	mov	r4, r1
 800064e:	6825      	ldr	r5, [r4, #0]
 8000650:	f385 8808 	msr	MSP, r5
 8000654:	bc60      	pop	{r5, r6}
 8000656:	6025      	str	r5, [r4, #0]
 8000658:	bc10      	pop	{r4}
 800065a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800065e:	432c      	orrs	r4, r5
 8000660:	f384 8803 	msr	PSR, r4
 8000664:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BX	LR
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <osEE_set_switch_context_pri>:
	.global	osEE_set_switch_context_pri
	.type	osEE_set_switch_context_pri, #function
osEE_set_switch_context_pri:

	/* Set PendSV priority to the minumum one */
	LDR	R0, =NVIC_SHPR3
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <NMI_Handler+0x8>)
	LDR	R1, =NVIC_PENDSV_PRI
 800066e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
	LDR	R2, [R0]
 8000672:	6802      	ldr	r2, [r0, #0]
	ORRS	R2, R2, R1
 8000674:	430a      	orrs	r2, r1
	STR	R2, [R0]
 8000676:	6002      	str	r2, [r0, #0]

	/* SVCall priority to the maximum one */
	LDR	R0, =NVIC_SHPR2
 8000678:	4813      	ldr	r0, [pc, #76]	; (80006c8 <NMI_Handler+0xc>)
	LDR	R1, =NVIC_SVCALL_PRI
 800067a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
	LDR	R2, [R0]
 800067e:	6802      	ldr	r2, [r0, #0]
	ANDS	R2, R2, R1
 8000680:	400a      	ands	r2, r1
	STR	R2, [R0]
 8000682:	6002      	str	r2, [r0, #0]

	BX	LR
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <osEE_cortex_m_trigger_pend_sv>:
osEE_cortex_m_trigger_pend_sv:

	/* 
	 * Trigger the PendSV exception (causes context switch)
	 */
	LDR	R0, =NVIC_INT_CTRL
 8000688:	4810      	ldr	r0, [pc, #64]	; (80006cc <NMI_Handler+0x10>)
	LDR	R1, =NVIC_PENDSVSET
 800068a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
	STR	R1, [R0]
 800068e:	6001      	str	r1, [r0, #0]

	BX	LR
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <PendSV_Handler>:
	.global	PendSV_Handler
	.type	PendSV_Handler, %function
PendSV_Handler:

	/* Disable interrupts (set PRIMASK) */
	CPSID	I
 8000694:	b672      	cpsid	i

	/* Clear the PendSV exception (preventing 2nd triggering) */
	LDR	R2, =NVIC_INT_CTRL
 8000696:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <NMI_Handler+0x10>)
	LDR	R1, =NVIC_PENDSVCLR
 8000698:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
	STR	R1, [R2]
 800069c:	6011      	str	r1, [r2, #0]
	 * EE_std_change_context(EE_TID) at the
	 * end of PendSV_Handler.
	 */

	/* R3 = 0x01000000 (xPSR) */
	LDR	R3, =EPSR_T_BIT_VAL
 800069e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

	/* R2 = osEE_cortex_m_change_context_from_task_end (PC) */
	LDR	R2, =osEE_cortex_m_change_context_from_task_end
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <NMI_Handler+0x14>)

	/* R1 = osEE_cortex_m_thread_end (LR) */
	LDR	R1, =osEE_cortex_m_thread_end
 80006a4:	490b      	ldr	r1, [pc, #44]	; (80006d4 <NMI_Handler+0x18>)
	 * |xPSR|-> xPSR AND 0xFFFFFE0
	 * | PC |-> osEE_cortex_m_change_context_from_task_end
	 * | LR |-> osEE_cortex_m_thread_end
	 * | R12|
	 */
	PUSH	{R0-R3}
 80006a6:	b40f      	push	{r0, r1, r2, r3}
	 * | R3 |
	 * | R2 |
	 * | R1 |
	 * | R0 |
	 */
	PUSH	{R0-R3}
 80006a8:	b40f      	push	{r0, r1, r2, r3}
	/*
	 * R0 = EXC_RETURN -> Return to Thread mode.
	 *		   -> Exception return gets state from MSP.
	 *		   -> Execution uses MSP after return.
	 */
	LDR	LR, =EXC_RETURN
 80006aa:	f06f 0e06 	mvn.w	lr, #6

	BX	LR		/* EXC_RETURN. */
 80006ae:	4770      	bx	lr

080006b0 <osEE_cortex_m_thread_end>:
	.global	osEE_cortex_m_thread_end
	.type	osEE_cortex_m_thread_end, %function
osEE_cortex_m_thread_end:

	/* trigger NMI to return to preempted task... */
	LDR	R0, =0xE000ED04	/* Interrupt Control and State Register */
 80006b0:	4806      	ldr	r0, [pc, #24]	; (80006cc <NMI_Handler+0x10>)
	MOVS	R1, #1
 80006b2:	2101      	movs	r1, #1
	LSLS	R1, R1, #31	/* R0 := (1 << 31) (NMI bit) */
 80006b4:	07c9      	lsls	r1, r1, #31
	STR	R1,[r0]		/* ICSR[31] := 1 (pend NMI) */
 80006b6:	6001      	str	r1, [r0, #0]
	B	.		/* wait for preemption by NMI */
 80006b8:	e7fe      	b.n	80006b8 <osEE_cortex_m_thread_end+0x8>
 80006ba:	bf00      	nop

080006bc <NMI_Handler>:
	.global	NMI_Handler
	.type	NMI_Handler, %function
NMI_Handler:

	/* Remove SVCall Stack-Frame. */
	ADD	SP, SP, #(8*4)
 80006bc:	b008      	add	sp, #32
	/* Retrieves original Link Register. */
	POP	{R0, LR}
#endif	/* defined(OS_EE_ARCH_CORTEX_M_M7F_FPU) */

	/* Enable interrupts (clear PRIMASK) */
	CPSIE	I
 80006be:	b662      	cpsie	i

	BX	LR		/* EXC_RETURN. */
 80006c0:	4770      	bx	lr
 80006c2:	0000      	.short	0x0000
	LDR	R0, =NVIC_SHPR3
 80006c4:	e000ed20 	.word	0xe000ed20
	LDR	R0, =NVIC_SHPR2
 80006c8:	e000ed1c 	.word	0xe000ed1c
	LDR	R0, =NVIC_INT_CTRL
 80006cc:	e000ed04 	.word	0xe000ed04
	LDR	R2, =osEE_cortex_m_change_context_from_task_end
 80006d0:	08002cc1 	.word	0x08002cc1
	LDR	R1, =osEE_cortex_m_thread_end
 80006d4:	080006b1 	.word	0x080006b1

080006d8 <MX_DMA_Init>:
#include "../../Core/Inc/dma.h"

/* DMA handles*/

void MX_DMA_Init(void)
{
 80006d8:	b500      	push	{lr}
 80006da:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006dc:	2100      	movs	r1, #0
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_DMA_Init+0x30>)
 80006e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006e4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80006e8:	631a      	str	r2, [r3, #48]	; 0x30
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006f0:	9301      	str	r3, [sp, #4]
 80006f2:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80006f4:	460a      	mov	r2, r1
 80006f6:	200d      	movs	r0, #13
 80006f8:	f000 fe5a 	bl	80013b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80006fc:	200d      	movs	r0, #13
 80006fe:	f000 fe8f 	bl	8001420 <HAL_NVIC_EnableIRQ>

}
 8000702:	b003      	add	sp, #12
 8000704:	f85d fb04 	ldr.w	pc, [sp], #4
 8000708:	40023800 	.word	0x40023800

0800070c <Error_Handler>:
		}									\
	}										\
} while ( 0 ) 								\

void Error_Handler(void)
{
 800070c:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	4802      	ldr	r0, [pc, #8]	; (800071c <Error_Handler+0x10>)
 8000714:	f001 f8f6 	bl	8001904 <HAL_GPIO_TogglePin>
	while (1){;}
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0xc>
 800071a:	bf00      	nop
 800071c:	40020c00 	.word	0x40020c00

08000720 <SerialISR>:
		my_printf("TIM2 ISR\r\n");
	}
}

void SerialISR(void)
{
 8000720:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&husart2);
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <SerialISR+0xc>)
 8000724:	f002 f822 	bl	800276c <HAL_UART_IRQHandler>
}
 8000728:	bd08      	pop	{r3, pc}
 800072a:	bf00      	nop
 800072c:	200021f8 	.word	0x200021f8

08000730 <MX_GPIO_Init>:
	HAL_DMA_IRQHandler(&hdma_tim3_up);

}

void MX_GPIO_Init(void)
{
 8000730:	b500      	push	{lr}
 8000732:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	2300      	movs	r3, #0
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	9303      	str	r3, [sp, #12]
 800073c:	9304      	str	r3, [sp, #16]
 800073e:	9305      	str	r3, [sp, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_GPIO_Init+0x44>)
 8000744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000746:	f042 0208 	orr.w	r2, r2, #8
 800074a:	631a      	str	r2, [r3, #48]	; 0x30
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	9b00      	ldr	r3, [sp, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000756:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800075a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	2302      	movs	r3, #2
 8000762:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000764:	a901      	add	r1, sp, #4
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_GPIO_Init+0x48>)
 8000768:	f000 ffe2 	bl	8001730 <HAL_GPIO_Init>
}
 800076c:	b007      	add	sp, #28
 800076e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40020c00 	.word	0x40020c00

0800077c <StartupHook>:

void StartupHook(void)
{
	//DemoHAL_SerialInit();
	//MX_USART2_UART_Init();
}
 800077c:	4770      	bx	lr
	...

08000780 <idle_hook>:

void idle_hook(void)
{
 8000780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000784:	b093      	sub	sp, #76	; 0x4c
	osEE_CheckStackIntegrity();
 8000786:	4b53      	ldr	r3, [pc, #332]	; (80008d4 <idle_hook+0x154>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b9c3      	cbnz	r3, 80007be <idle_hook+0x3e>
 800078c:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <idle_hook+0x158>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	b193      	cbz	r3, 80007b8 <idle_hook+0x38>
OSEE_STATIC_INLINE FUNC(OsEE_addr, OS_CODE) OSEE_ALWAYS_INLINE
osEE_get_SP (
void
) {
  VAR(OsEE_addr, AUTOMATIC) temp;
  OSEE_GET_SP(temp);
 8000792:	466b      	mov	r3, sp
 8000794:	4a50      	ldr	r2, [pc, #320]	; (80008d8 <idle_hook+0x158>)
 8000796:	6812      	ldr	r2, [r2, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	d010      	beq.n	80007be <idle_hook+0x3e>
 800079c:	4b4d      	ldr	r3, [pc, #308]	; (80008d4 <idle_hook+0x154>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
 80007a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a6:	484d      	ldr	r0, [pc, #308]	; (80008dc <idle_hook+0x15c>)
 80007a8:	f001 f8ac 	bl	8001904 <HAL_GPIO_TogglePin>
 80007ac:	f002 f882 	bl	80028b4 <DisableAllInterrupts>
 80007b0:	484b      	ldr	r0, [pc, #300]	; (80008e0 <idle_hook+0x160>)
 80007b2:	f000 f9e5 	bl	8000b80 <my_printf>
 80007b6:	e7fe      	b.n	80007b6 <idle_hook+0x36>
 80007b8:	466a      	mov	r2, sp
 80007ba:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <idle_hook+0x158>)
 80007bc:	601a      	str	r2, [r3, #0]

	++idle_cnt;
 80007be:	4b49      	ldr	r3, [pc, #292]	; (80008e4 <idle_hook+0x164>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	3201      	adds	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
	if (idle_cnt >= IDLE_CNT_MAX) {
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <idle_hook+0x168>)
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d802      	bhi.n	80007d4 <idle_hook+0x54>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
	}

	//DemoHAL_MainFunction();
}
 80007ce:	b013      	add	sp, #76	; 0x4c
 80007d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		idle_cnt = 0;
 80007d4:	4b43      	ldr	r3, [pc, #268]	; (80008e4 <idle_hook+0x164>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
		comp_true();
 80007da:	f000 fc47 	bl	800106c <comp_true>
		comp_false();
 80007de:	f000 fc46 	bl	800106e <comp_false>
		if_else_true();
 80007e2:	f000 fc45 	bl	8001070 <if_else_true>
		if_else_false();
 80007e6:	f000 fc44 	bl	8001072 <if_else_false>
		access_near();
 80007ea:	f000 fc43 	bl	8001074 <access_near>
		access_far();
 80007ee:	f000 fc4b 	bl	8001088 <access_far>
		DEFINE_VICTIM(s_comp_true, comp_true);
 80007f2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80008ec <idle_hook+0x16c>
 80007f6:	f8cd 9000 	str.w	r9, [sp]
 80007fa:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <idle_hook+0x170>)
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	4648      	mov	r0, r9
 8000800:	f000 fb94 	bl	8000f2c <measure_time>
 8000804:	9002      	str	r0, [sp, #8]
		accurate_trace_time(&s_comp_true);
 8000806:	4668      	mov	r0, sp
 8000808:	f000 fbf8 	bl	8000ffc <accurate_trace_time>
		DEFINE_VICTIM(s_comp_false, comp_false);
 800080c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80008f4 <idle_hook+0x174>
 8000810:	f8cd 800c 	str.w	r8, [sp, #12]
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <idle_hook+0x178>)
 8000816:	9304      	str	r3, [sp, #16]
 8000818:	4640      	mov	r0, r8
 800081a:	f000 fb87 	bl	8000f2c <measure_time>
 800081e:	9005      	str	r0, [sp, #20]
		accurate_trace_time(&s_comp_false);
 8000820:	a803      	add	r0, sp, #12
 8000822:	f000 fbeb 	bl	8000ffc <accurate_trace_time>
		DEFINE_VICTIM(s_if_else_true, if_else_true);
 8000826:	4f35      	ldr	r7, [pc, #212]	; (80008fc <idle_hook+0x17c>)
 8000828:	9706      	str	r7, [sp, #24]
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <idle_hook+0x180>)
 800082c:	9307      	str	r3, [sp, #28]
 800082e:	4638      	mov	r0, r7
 8000830:	f000 fb7c 	bl	8000f2c <measure_time>
 8000834:	9008      	str	r0, [sp, #32]
		accurate_trace_time(&s_if_else_true);
 8000836:	a806      	add	r0, sp, #24
 8000838:	f000 fbe0 	bl	8000ffc <accurate_trace_time>
		DEFINE_VICTIM(s_if_else_false, if_else_false);
 800083c:	4e31      	ldr	r6, [pc, #196]	; (8000904 <idle_hook+0x184>)
 800083e:	9609      	str	r6, [sp, #36]	; 0x24
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <idle_hook+0x188>)
 8000842:	930a      	str	r3, [sp, #40]	; 0x28
 8000844:	4630      	mov	r0, r6
 8000846:	f000 fb71 	bl	8000f2c <measure_time>
 800084a:	900b      	str	r0, [sp, #44]	; 0x2c
		accurate_trace_time(&s_if_else_false);
 800084c:	a809      	add	r0, sp, #36	; 0x24
 800084e:	f000 fbd5 	bl	8000ffc <accurate_trace_time>
		DEFINE_VICTIM(s_access_near, access_near);
 8000852:	4d2e      	ldr	r5, [pc, #184]	; (800090c <idle_hook+0x18c>)
 8000854:	950c      	str	r5, [sp, #48]	; 0x30
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <idle_hook+0x190>)
 8000858:	930d      	str	r3, [sp, #52]	; 0x34
 800085a:	4628      	mov	r0, r5
 800085c:	f000 fb66 	bl	8000f2c <measure_time>
 8000860:	900e      	str	r0, [sp, #56]	; 0x38
		accurate_trace_time(&s_access_near);
 8000862:	a80c      	add	r0, sp, #48	; 0x30
 8000864:	f000 fbca 	bl	8000ffc <accurate_trace_time>
		DEFINE_VICTIM(s_access_far, access_far);
 8000868:	4c2a      	ldr	r4, [pc, #168]	; (8000914 <idle_hook+0x194>)
 800086a:	940f      	str	r4, [sp, #60]	; 0x3c
 800086c:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <idle_hook+0x198>)
 800086e:	9310      	str	r3, [sp, #64]	; 0x40
 8000870:	4620      	mov	r0, r4
 8000872:	f000 fb5b 	bl	8000f2c <measure_time>
 8000876:	9011      	str	r0, [sp, #68]	; 0x44
		accurate_trace_time(&s_access_far);
 8000878:	a80f      	add	r0, sp, #60	; 0x3c
 800087a:	f000 fbbf 	bl	8000ffc <accurate_trace_time>
		my_printf("Time func comp t : %d \r\n", measure_time(comp_true));
 800087e:	4648      	mov	r0, r9
 8000880:	f000 fb54 	bl	8000f2c <measure_time>
 8000884:	4601      	mov	r1, r0
 8000886:	4825      	ldr	r0, [pc, #148]	; (800091c <idle_hook+0x19c>)
 8000888:	f000 f97a 	bl	8000b80 <my_printf>
		my_printf("Time func comp f : %d \r\n", measure_time(comp_false));
 800088c:	4640      	mov	r0, r8
 800088e:	f000 fb4d 	bl	8000f2c <measure_time>
 8000892:	4601      	mov	r1, r0
 8000894:	4822      	ldr	r0, [pc, #136]	; (8000920 <idle_hook+0x1a0>)
 8000896:	f000 f973 	bl	8000b80 <my_printf>
		my_printf("Time func if t   : %d \r\n", measure_time(if_else_true));
 800089a:	4638      	mov	r0, r7
 800089c:	f000 fb46 	bl	8000f2c <measure_time>
 80008a0:	4601      	mov	r1, r0
 80008a2:	4820      	ldr	r0, [pc, #128]	; (8000924 <idle_hook+0x1a4>)
 80008a4:	f000 f96c 	bl	8000b80 <my_printf>
		my_printf("Time func if f   : %d \r\n", measure_time(if_else_false));
 80008a8:	4630      	mov	r0, r6
 80008aa:	f000 fb3f 	bl	8000f2c <measure_time>
 80008ae:	4601      	mov	r1, r0
 80008b0:	481d      	ldr	r0, [pc, #116]	; (8000928 <idle_hook+0x1a8>)
 80008b2:	f000 f965 	bl	8000b80 <my_printf>
		my_printf("Time func near   : %d \r\n", measure_time(access_near));
 80008b6:	4628      	mov	r0, r5
 80008b8:	f000 fb38 	bl	8000f2c <measure_time>
 80008bc:	4601      	mov	r1, r0
 80008be:	481b      	ldr	r0, [pc, #108]	; (800092c <idle_hook+0x1ac>)
 80008c0:	f000 f95e 	bl	8000b80 <my_printf>
		my_printf("Time func far    : %d \r\n", measure_time(access_far));
 80008c4:	4620      	mov	r0, r4
 80008c6:	f000 fb31 	bl	8000f2c <measure_time>
 80008ca:	4601      	mov	r1, r0
 80008cc:	4818      	ldr	r0, [pc, #96]	; (8000930 <idle_hook+0x1b0>)
 80008ce:	f000 f957 	bl	8000b80 <my_printf>
		while(1){
 80008d2:	e7fe      	b.n	80008d2 <idle_hook+0x152>
 80008d4:	200004ac 	.word	0x200004ac
 80008d8:	200004a8 	.word	0x200004a8
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	080032f0 	.word	0x080032f0
 80008e4:	200004a4 	.word	0x200004a4
 80008e8:	000f423f 	.word	0x000f423f
 80008ec:	0800106d 	.word	0x0800106d
 80008f0:	0800330c 	.word	0x0800330c
 80008f4:	0800106f 	.word	0x0800106f
 80008f8:	08003318 	.word	0x08003318
 80008fc:	08001071 	.word	0x08001071
 8000900:	08003324 	.word	0x08003324
 8000904:	08001073 	.word	0x08001073
 8000908:	08003334 	.word	0x08003334
 800090c:	08001075 	.word	0x08001075
 8000910:	08003344 	.word	0x08003344
 8000914:	08001089 	.word	0x08001089
 8000918:	08003350 	.word	0x08003350
 800091c:	0800335c 	.word	0x0800335c
 8000920:	08003378 	.word	0x08003378
 8000924:	08003394 	.word	0x08003394
 8000928:	080033b0 	.word	0x080033b0
 800092c:	080033cc 	.word	0x080033cc
 8000930:	080033e8 	.word	0x080033e8

08000934 <main>:


int main(void)
{
 8000934:	b510      	push	{r4, lr}
	HAL_Init();
 8000936:	f000 fce7 	bl	8001308 <HAL_Init>

	SysTick->CTRL = 0; //Disable systick
 800093a:	2400      	movs	r4, #0
 800093c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000940:	611c      	str	r4, [r3, #16]

	SystemClock_Config();
 8000942:	f000 f931 	bl	8000ba8 <SystemClock_Config>

	MX_DMA_Init();
 8000946:	f7ff fec7 	bl	80006d8 <MX_DMA_Init>
	MX_TIM3_Init();
 800094a:	f000 fa3f 	bl	8000dcc <MX_TIM3_Init>
	MX_TIM7_Init();
 800094e:	f000 fa75 	bl	8000e3c <MX_TIM7_Init>

	//MX_TIM2_Init();
	MX_GPIO_Init();
 8000952:	f7ff feed 	bl	8000730 <MX_GPIO_Init>
	MX_USART2_Init();
 8000956:	f000 fba1 	bl	800109c <MX_USART2_Init>

	//HAL_TIM_Base_Start_IT(&htim2);

	StartOS(OSDEFAULTAPPMODE);
 800095a:	4620      	mov	r0, r4
 800095c:	f001 ffb2 	bl	80028c4 <StartOS>

	return 0;
}
 8000960:	4620      	mov	r0, r4
 8000962:	bd10      	pop	{r4, pc}

08000964 <my_utoa_dec>:
#include "../../Core/Inc/main.h"
#include <stdio.h>


static void my_utoa_dec(unsigned int value, char *buf)
{
 8000964:	b084      	sub	sp, #16
    char temp[10];
    unsigned int i = 0;

    if (value == 0) {
 8000966:	4602      	mov	r2, r0
 8000968:	b108      	cbz	r0, 800096e <my_utoa_dec+0xa>
    unsigned int i = 0;
 800096a:	2000      	movs	r0, #0
 800096c:	e015      	b.n	800099a <my_utoa_dec+0x36>
        buf[0] = '0';
 800096e:	2330      	movs	r3, #48	; 0x30
 8000970:	700b      	strb	r3, [r1, #0]
        buf[1] = '\0';
 8000972:	2300      	movs	r3, #0
 8000974:	704b      	strb	r3, [r1, #1]
        return;
 8000976:	e020      	b.n	80009ba <my_utoa_dec+0x56>
    }

    while (value && i < sizeof(temp)) {
        temp[i++] = '0' + (value % 10);
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <my_utoa_dec+0x5c>)
 800097a:	fba3 c302 	umull	ip, r3, r3, r2
 800097e:	08db      	lsrs	r3, r3, #3
 8000980:	469c      	mov	ip, r3
 8000982:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000986:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 800098a:	3330      	adds	r3, #48	; 0x30
 800098c:	f100 0210 	add.w	r2, r0, #16
 8000990:	446a      	add	r2, sp
 8000992:	f802 3c0c 	strb.w	r3, [r2, #-12]
        value /= 10;
 8000996:	4662      	mov	r2, ip
        temp[i++] = '0' + (value % 10);
 8000998:	3001      	adds	r0, #1
    while (value && i < sizeof(temp)) {
 800099a:	b152      	cbz	r2, 80009b2 <my_utoa_dec+0x4e>
 800099c:	2809      	cmp	r0, #9
 800099e:	d9eb      	bls.n	8000978 <my_utoa_dec+0x14>
 80009a0:	2200      	movs	r2, #0
 80009a2:	e006      	b.n	80009b2 <my_utoa_dec+0x4e>
    }

    for (unsigned int j = 0; j < i; ++j) {
        buf[j] = temp[i - j - 1];
 80009a4:	1a83      	subs	r3, r0, r2
 80009a6:	330f      	adds	r3, #15
 80009a8:	446b      	add	r3, sp
 80009aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80009ae:	548b      	strb	r3, [r1, r2]
    for (unsigned int j = 0; j < i; ++j) {
 80009b0:	3201      	adds	r2, #1
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d8f6      	bhi.n	80009a4 <my_utoa_dec+0x40>
    }

    buf[i] = '\0';
 80009b6:	2300      	movs	r3, #0
 80009b8:	540b      	strb	r3, [r1, r0]
}
 80009ba:	b004      	add	sp, #16
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	cccccccd 	.word	0xcccccccd

080009c4 <my_utoa_hex>:

static void my_utoa_hex(unsigned int value, char *buf)
{
 80009c4:	b410      	push	{r4}
 80009c6:	b083      	sub	sp, #12
    static const char hex_chars[] = "0123456789ABCDEF";
    char temp[8];
    unsigned int i = 0;

    if (value == 0) {
 80009c8:	4603      	mov	r3, r0
 80009ca:	b108      	cbz	r0, 80009d0 <my_utoa_hex+0xc>
    unsigned int i = 0;
 80009cc:	2000      	movs	r0, #0
 80009ce:	e010      	b.n	80009f2 <my_utoa_hex+0x2e>
        buf[0] = '0';
 80009d0:	2330      	movs	r3, #48	; 0x30
 80009d2:	700b      	strb	r3, [r1, #0]
        buf[1] = '\0';
 80009d4:	2300      	movs	r3, #0
 80009d6:	704b      	strb	r3, [r1, #1]
        return;
 80009d8:	e01b      	b.n	8000a12 <my_utoa_hex+0x4e>
    }

    while (value && i < sizeof(temp)) {
        temp[i++] = hex_chars[value & 0xF];
 80009da:	f003 020f 	and.w	r2, r3, #15
 80009de:	4c0e      	ldr	r4, [pc, #56]	; (8000a18 <my_utoa_hex+0x54>)
 80009e0:	f814 c002 	ldrb.w	ip, [r4, r2]
 80009e4:	f100 0208 	add.w	r2, r0, #8
 80009e8:	446a      	add	r2, sp
 80009ea:	f802 cc08 	strb.w	ip, [r2, #-8]
        value >>= 4;
 80009ee:	091b      	lsrs	r3, r3, #4
        temp[i++] = hex_chars[value & 0xF];
 80009f0:	3001      	adds	r0, #1
    while (value && i < sizeof(temp)) {
 80009f2:	b153      	cbz	r3, 8000a0a <my_utoa_hex+0x46>
 80009f4:	2807      	cmp	r0, #7
 80009f6:	d9f0      	bls.n	80009da <my_utoa_hex+0x16>
 80009f8:	2300      	movs	r3, #0
 80009fa:	e006      	b.n	8000a0a <my_utoa_hex+0x46>
    }

    for (unsigned int j = 0; j < i; ++j) {
        buf[j] = temp[i - j - 1];
 80009fc:	1ac2      	subs	r2, r0, r3
 80009fe:	3207      	adds	r2, #7
 8000a00:	446a      	add	r2, sp
 8000a02:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000a06:	54ca      	strb	r2, [r1, r3]
    for (unsigned int j = 0; j < i; ++j) {
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4298      	cmp	r0, r3
 8000a0c:	d8f6      	bhi.n	80009fc <my_utoa_hex+0x38>
    }

    buf[i] = '\0';
 8000a0e:	2300      	movs	r3, #0
 8000a10:	540b      	strb	r3, [r1, r0]
}
 8000a12:	b003      	add	sp, #12
 8000a14:	bc10      	pop	{r4}
 8000a16:	4770      	bx	lr
 8000a18:	08003404 	.word	0x08003404

08000a1c <my_format>:
static int my_format(char *out_buf, size_t max_len, const char *fmt, __builtin_va_list args)
{
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	4607      	mov	r7, r0
 8000a24:	4688      	mov	r8, r1
 8000a26:	4615      	mov	r5, r2
 8000a28:	9301      	str	r3, [sp, #4]
    const char *p = fmt;
    char *out = out_buf;
 8000a2a:	4604      	mov	r4, r0
    char num_buf[16];

    while (*p && (size_t)(out - out_buf) < max_len - 1) {
 8000a2c:	e086      	b.n	8000b3c <my_format+0x120>
        if (*p == '%') {
            p++;

            int width = 0;
            while (*p >= '0' && *p <= '9') {
            	width = width * 10 + (*p - '0');
 8000a2e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8000a32:	3b30      	subs	r3, #48	; 0x30
 8000a34:	eb03 0949 	add.w	r9, r3, r9, lsl #1
            	p++;
 8000a38:	3501      	adds	r5, #1
            while (*p >= '0' && *p <= '9') {
 8000a3a:	782b      	ldrb	r3, [r5, #0]
 8000a3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	2a09      	cmp	r2, #9
 8000a44:	d9f3      	bls.n	8000a2e <my_format+0x12>
            }

            switch (*p) {
 8000a46:	3b63      	subs	r3, #99	; 0x63
 8000a48:	2b15      	cmp	r3, #21
 8000a4a:	d86c      	bhi.n	8000b26 <my_format+0x10a>
 8000a4c:	e8df f003 	tbb	[pc, r3]
 8000a50:	6b6b0b64 	.word	0x6b6b0b64
 8000a54:	6b6b6b6b 	.word	0x6b6b6b6b
 8000a58:	6b6b6b6b 	.word	0x6b6b6b6b
 8000a5c:	6b6b6b6b 	.word	0x6b6b6b6b
 8000a60:	6b6b6b56 	.word	0x6b6b6b56
 8000a64:	446b      	.short	0x446b
            case 'd': {
            	int val = __builtin_va_arg(args, int);
 8000a66:	9b01      	ldr	r3, [sp, #4]
 8000a68:	1d1a      	adds	r2, r3, #4
 8000a6a:	9201      	str	r2, [sp, #4]
 8000a6c:	f8d3 a000 	ldr.w	sl, [r3]
            	int is_negative = val < 0;
            	if (is_negative) val = -val;
 8000a70:	f1ba 0f00 	cmp.w	sl, #0
 8000a74:	db0c      	blt.n	8000a90 <my_format+0x74>
            	int val = __builtin_va_arg(args, int);
 8000a76:	4650      	mov	r0, sl

            	my_utoa_dec((unsigned int)val, num_buf);
 8000a78:	a902      	add	r1, sp, #8
 8000a7a:	f7ff ff73 	bl	8000964 <my_utoa_dec>
            	size_t len = strlen(num_buf) + (is_negative ? 1 : 0);
 8000a7e:	a802      	add	r0, sp, #8
 8000a80:	f7ff fbbe 	bl	8000200 <strlen>
 8000a84:	f1ba 0f00 	cmp.w	sl, #0
 8000a88:	db05      	blt.n	8000a96 <my_format+0x7a>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	4403      	add	r3, r0

				while ((int)len < width && (size_t)(out - out_buf) < max_len - 1) {
 8000a8e:	e008      	b.n	8000aa2 <my_format+0x86>
            	if (is_negative) val = -val;
 8000a90:	f1ca 0000 	rsb	r0, sl, #0
 8000a94:	e7f0      	b.n	8000a78 <my_format+0x5c>
            	size_t len = strlen(num_buf) + (is_negative ? 1 : 0);
 8000a96:	2301      	movs	r3, #1
 8000a98:	e7f8      	b.n	8000a8c <my_format+0x70>
					*out++ = ' ';
 8000a9a:	2220      	movs	r2, #32
 8000a9c:	f804 2b01 	strb.w	r2, [r4], #1
					len++;
 8000aa0:	3301      	adds	r3, #1
				while ((int)len < width && (size_t)(out - out_buf) < max_len - 1) {
 8000aa2:	454b      	cmp	r3, r9
 8000aa4:	da02      	bge.n	8000aac <my_format+0x90>
 8000aa6:	1be2      	subs	r2, r4, r7
 8000aa8:	42b2      	cmp	r2, r6
 8000aaa:	d3f6      	bcc.n	8000a9a <my_format+0x7e>
				}

				if (is_negative && (size_t)(out - out_buf) < max_len - 1) {
 8000aac:	f1ba 0f00 	cmp.w	sl, #0
 8000ab0:	db01      	blt.n	8000ab6 <my_format+0x9a>
					*out++ = '-';
 8000ab2:	ab02      	add	r3, sp, #8
 8000ab4:	e009      	b.n	8000aca <my_format+0xae>
				if (is_negative && (size_t)(out - out_buf) < max_len - 1) {
 8000ab6:	1be3      	subs	r3, r4, r7
 8000ab8:	42b3      	cmp	r3, r6
 8000aba:	d2fa      	bcs.n	8000ab2 <my_format+0x96>
					*out++ = '-';
 8000abc:	232d      	movs	r3, #45	; 0x2d
 8000abe:	f804 3b01 	strb.w	r3, [r4], #1
 8000ac2:	e7f6      	b.n	8000ab2 <my_format+0x96>
				}

				for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
					*out++ = *n;
 8000ac4:	f804 2b01 	strb.w	r2, [r4], #1
				for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 8000ac8:	3301      	adds	r3, #1
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d034      	beq.n	8000b3a <my_format+0x11e>
 8000ad0:	1be1      	subs	r1, r4, r7
 8000ad2:	42b1      	cmp	r1, r6
 8000ad4:	d3f6      	bcc.n	8000ac4 <my_format+0xa8>
 8000ad6:	e030      	b.n	8000b3a <my_format+0x11e>

				break;
            }
                case 'x': {
                    unsigned int val = __builtin_va_arg(args, unsigned int);
 8000ad8:	9b01      	ldr	r3, [sp, #4]
 8000ada:	1d1a      	adds	r2, r3, #4
 8000adc:	9201      	str	r2, [sp, #4]
                    my_utoa_hex(val, num_buf);
 8000ade:	a902      	add	r1, sp, #8
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f7ff ff6f 	bl	80009c4 <my_utoa_hex>
                    for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 8000ae6:	ab02      	add	r3, sp, #8
 8000ae8:	e002      	b.n	8000af0 <my_format+0xd4>
                        *out++ = *n;
 8000aea:	f804 2b01 	strb.w	r2, [r4], #1
                    for (char *n = num_buf; *n && (size_t)(out - out_buf) < max_len - 1; ++n)
 8000aee:	3301      	adds	r3, #1
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	b312      	cbz	r2, 8000b3a <my_format+0x11e>
 8000af4:	1be1      	subs	r1, r4, r7
 8000af6:	42b1      	cmp	r1, r6
 8000af8:	d3f7      	bcc.n	8000aea <my_format+0xce>
 8000afa:	e01e      	b.n	8000b3a <my_format+0x11e>
                    break;
                }
                case 's': {
                    char *str = __builtin_va_arg(args, char*);
 8000afc:	9b01      	ldr	r3, [sp, #4]
 8000afe:	1d1a      	adds	r2, r3, #4
 8000b00:	9201      	str	r2, [sp, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
                    while (*str && (size_t)(out - out_buf) < max_len - 1)
 8000b04:	e002      	b.n	8000b0c <my_format+0xf0>
                        *out++ = *str++;
 8000b06:	3301      	adds	r3, #1
 8000b08:	f804 2b01 	strb.w	r2, [r4], #1
                    while (*str && (size_t)(out - out_buf) < max_len - 1)
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	b1a2      	cbz	r2, 8000b3a <my_format+0x11e>
 8000b10:	1be1      	subs	r1, r4, r7
 8000b12:	42b1      	cmp	r1, r6
 8000b14:	d3f7      	bcc.n	8000b06 <my_format+0xea>
 8000b16:	e010      	b.n	8000b3a <my_format+0x11e>
                    break;
                }
                case 'c': {
                    char ch = (char)__builtin_va_arg(args, int);
 8000b18:	9b01      	ldr	r3, [sp, #4]
 8000b1a:	1d1a      	adds	r2, r3, #4
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
                    *out++ = ch;
 8000b20:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
 8000b24:	e009      	b.n	8000b3a <my_format+0x11e>
                }
                default:
                    *out++ = '%';
 8000b26:	4623      	mov	r3, r4
 8000b28:	2225      	movs	r2, #37	; 0x25
 8000b2a:	f803 2b02 	strb.w	r2, [r3], #2
                    *out++ = *p;
 8000b2e:	782a      	ldrb	r2, [r5, #0]
 8000b30:	7062      	strb	r2, [r4, #1]
 8000b32:	461c      	mov	r4, r3
 8000b34:	e001      	b.n	8000b3a <my_format+0x11e>
            }
        } else {
            *out++ = *p;
 8000b36:	f804 2b01 	strb.w	r2, [r4], #1
        }
        p++;
 8000b3a:	3501      	adds	r5, #1
    while (*p && (size_t)(out - out_buf) < max_len - 1) {
 8000b3c:	782a      	ldrb	r2, [r5, #0]
 8000b3e:	b152      	cbz	r2, 8000b56 <my_format+0x13a>
 8000b40:	1be3      	subs	r3, r4, r7
 8000b42:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8000b46:	42b3      	cmp	r3, r6
 8000b48:	d205      	bcs.n	8000b56 <my_format+0x13a>
        if (*p == '%') {
 8000b4a:	2a25      	cmp	r2, #37	; 0x25
 8000b4c:	d1f3      	bne.n	8000b36 <my_format+0x11a>
            p++;
 8000b4e:	3501      	adds	r5, #1
            int width = 0;
 8000b50:	f04f 0900 	mov.w	r9, #0
            while (*p >= '0' && *p <= '9') {
 8000b54:	e771      	b.n	8000a3a <my_format+0x1e>
    }

    *out = '\0';
 8000b56:	2300      	movs	r3, #0
 8000b58:	7023      	strb	r3, [r4, #0]
    return (int)(out - out_buf);
}
 8000b5a:	1be0      	subs	r0, r4, r7
 8000b5c:	b006      	add	sp, #24
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08000b64 <serial_print>:



void serial_print(char const * msg)
{
 8000b64:	b510      	push	{r4, lr}
 8000b66:	4604      	mov	r4, r0
//	SuspendAllInterrupts();
//	HAL_UART_Transmit_IT(&husart2, (uint8_t *)msg, strlen(msg));
//	ResumeAllInterrupts();

	// Uart polling
	HAL_UART_Transmit(&husart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b68:	f7ff fb4a 	bl	8000200 <strlen>
 8000b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b70:	b282      	uxth	r2, r0
 8000b72:	4621      	mov	r1, r4
 8000b74:	4801      	ldr	r0, [pc, #4]	; (8000b7c <serial_print+0x18>)
 8000b76:	f001 fd2a 	bl	80025ce <HAL_UART_Transmit>
}
 8000b7a:	bd10      	pop	{r4, pc}
 8000b7c:	200021f8 	.word	0x200021f8

08000b80 <my_printf>:


void my_printf(const char *fmt, ...)
{
 8000b80:	b40f      	push	{r0, r1, r2, r3}
 8000b82:	b500      	push	{lr}
 8000b84:	b0a3      	sub	sp, #140	; 0x8c
 8000b86:	ab24      	add	r3, sp, #144	; 0x90
 8000b88:	f853 2b04 	ldr.w	r2, [r3], #4
    char buf[128];

    __builtin_va_list args;
    __builtin_va_start(args, fmt);
 8000b8c:	9301      	str	r3, [sp, #4]
    my_format(buf, sizeof(buf), fmt, args);
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	a802      	add	r0, sp, #8
 8000b92:	f7ff ff43 	bl	8000a1c <my_format>
    __builtin_va_end(args);

    serial_print(buf);
 8000b96:	a802      	add	r0, sp, #8
 8000b98:	f7ff ffe4 	bl	8000b64 <serial_print>
}
 8000b9c:	b023      	add	sp, #140	; 0x8c
 8000b9e:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ba2:	b004      	add	sp, #16
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SystemClock_Config>:
//    Error_Handler();
//  }
//}

void SystemClock_Config(void)
{
 8000ba8:	b530      	push	{r4, r5, lr}
 8000baa:	b095      	sub	sp, #84	; 0x54
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2400      	movs	r4, #0
 8000bae:	9401      	str	r4, [sp, #4]
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <SystemClock_Config+0x94>)
 8000bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	9b01      	ldr	r3, [sp, #4]

	/* The voltage scaling allows optimizing the power consumption when the device is
       clocked below the maximum system frequency, to update the voltage scaling value
       regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	9402      	str	r4, [sp, #8]
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <SystemClock_Config+0x98>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	9302      	str	r3, [sp, #8]
 8000bd8:	9b02      	ldr	r3, [sp, #8]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	9303      	str	r3, [sp, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be2:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	2502      	movs	r5, #2
 8000be6:	9509      	str	r5, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bec:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000bf2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bf6:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	950d      	str	r5, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	930e      	str	r3, [sp, #56]	; 0x38
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000bfe:	a803      	add	r0, sp, #12
 8000c00:	f000 fe8a 	bl	8001918 <HAL_RCC_OscConfig>

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000c04:	230f      	movs	r3, #15
 8000c06:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	9510      	str	r5, [sp, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0a:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c10:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	9313      	str	r3, [sp, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000c18:	2105      	movs	r1, #5
 8000c1a:	a80f      	add	r0, sp, #60	; 0x3c
 8000c1c:	f001 f8dc 	bl	8001dd8 <HAL_RCC_ClockConfig>

	/* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
	if (HAL_GetREVID() == 0x1001)
 8000c20:	f000 fbae 	bl	8001380 <HAL_GetREVID>
 8000c24:	f241 0301 	movw	r3, #4097	; 0x1001
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x88>
	{
		/* Enable the Flash prefetch */
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
	}
}
 8000c2c:	b015      	add	sp, #84	; 0x54
 8000c2e:	bd30      	pop	{r4, r5, pc}
		__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <SystemClock_Config+0x9c>)
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	e7f7      	b.n	8000c2c <SystemClock_Config+0x84>
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000
 8000c44:	40023c00 	.word	0x40023c00

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b500      	push	{lr}
 8000c4a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	9100      	str	r1, [sp, #0]
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x3c>)
 8000c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c58:	645a      	str	r2, [r3, #68]	; 0x44
 8000c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c5c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c60:	9200      	str	r2, [sp, #0]
 8000c62:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c64:	9101      	str	r1, [sp, #4]
 8000c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c78:	2007      	movs	r0, #7
 8000c7a:	f000 fb87 	bl	800138c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	b003      	add	sp, #12
 8000c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c84:	40023800 	.word	0x40023800

08000c88 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <HardFault_Handler>

08000c8a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <MemManage_Handler>

08000c8c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <BusFault_Handler>

08000c8e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <UsageFault_Handler>

08000c90 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	4770      	bx	lr

08000c92 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c92:	4770      	bx	lr

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 fb4d 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bd08      	pop	{r3, pc}

08000c9c <FuncTask1>:
	}										\
} while ( 0 ) 								\


TASK(Task1)
{
 8000c9c:	b510      	push	{r4, lr}
	static OsEE_bool volatile stk_wrong = OSEE_FALSE;
	static OsEE_addr volatile old_sp = 0;

	static uint16_t volatile Task1_count;

	my_printf("Task1: %d\r\n", Task1_count);
 8000c9e:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <FuncTask1+0x98>)
 8000ca0:	8819      	ldrh	r1, [r3, #0]
 8000ca2:	b289      	uxth	r1, r1
 8000ca4:	4824      	ldr	r0, [pc, #144]	; (8000d38 <FuncTask1+0x9c>)
 8000ca6:	f7ff ff6b 	bl	8000b80 <my_printf>

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000caa:	4c24      	ldr	r4, [pc, #144]	; (8000d3c <FuncTask1+0xa0>)
 8000cac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f000 fe27 	bl	8001904 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000cb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f000 fe22 	bl	8001904 <HAL_GPIO_TogglePin>


	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f000 fe16 	bl	80018f8 <HAL_GPIO_WritePin>

	HAL_Delay(HAL_DELAY_MS);
 8000ccc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd0:	f000 fb42 	bl	8001358 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f000 fe0c 	bl	80018f8 <HAL_GPIO_WritePin>

	HAL_Delay(HAL_DELAY_MS);
 8000ce0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce4:	f000 fb38 	bl	8001358 <HAL_Delay>

	osEE_CheckStackIntegrity();
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <FuncTask1+0xa4>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b9c3      	cbnz	r3, 8000d20 <FuncTask1+0x84>
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <FuncTask1+0xa8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	b193      	cbz	r3, 8000d1a <FuncTask1+0x7e>
 8000cf4:	466b      	mov	r3, sp
 8000cf6:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <FuncTask1+0xa8>)
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d010      	beq.n	8000d20 <FuncTask1+0x84>
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <FuncTask1+0xa4>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <FuncTask1+0xa0>)
 8000d0a:	f000 fdfb 	bl	8001904 <HAL_GPIO_TogglePin>
 8000d0e:	f001 fdd1 	bl	80028b4 <DisableAllInterrupts>
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <FuncTask1+0xac>)
 8000d14:	f7ff ff34 	bl	8000b80 <my_printf>
 8000d18:	e7fe      	b.n	8000d18 <FuncTask1+0x7c>
 8000d1a:	466a      	mov	r2, sp
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <FuncTask1+0xa8>)
 8000d1e:	601a      	str	r2, [r3, #0]

	++Task1_count;
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <FuncTask1+0x98>)
 8000d22:	8813      	ldrh	r3, [r2, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	8013      	strh	r3, [r2, #0]

	TerminateTask();
 8000d2c:	f001 fe06 	bl	800293c <TerminateTask>
}
 8000d30:	bd10      	pop	{r4, pc}
 8000d32:	bf00      	nop
 8000d34:	200004ae 	.word	0x200004ae
 8000d38:	08003418 	.word	0x08003418
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	200004bd 	.word	0x200004bd
 8000d44:	200004b8 	.word	0x200004b8
 8000d48:	08003424 	.word	0x08003424

08000d4c <FuncTask2>:

TASK(Task2)
{
 8000d4c:	b508      	push	{r3, lr}
	static OsEE_bool volatile stk_wrong = OSEE_FALSE;
	static OsEE_addr volatile old_sp = 0;

	static uint16_t volatile Task2_count;

	my_printf("Task2: %d\r\n", Task2_count);
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <FuncTask2+0x68>)
 8000d50:	8819      	ldrh	r1, [r3, #0]
 8000d52:	b289      	uxth	r1, r1
 8000d54:	4818      	ldr	r0, [pc, #96]	; (8000db8 <FuncTask2+0x6c>)
 8000d56:	f7ff ff13 	bl	8000b80 <my_printf>

	HAL_Delay(HAL_DELAY_MS);
 8000d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5e:	f000 fafb 	bl	8001358 <HAL_Delay>

	HAL_Delay(HAL_DELAY_MS);
 8000d62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d66:	f000 faf7 	bl	8001358 <HAL_Delay>

	osEE_CheckStackIntegrity();
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <FuncTask2+0x70>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b9c3      	cbnz	r3, 8000da2 <FuncTask2+0x56>
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <FuncTask2+0x74>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	b193      	cbz	r3, 8000d9c <FuncTask2+0x50>
 8000d76:	466b      	mov	r3, sp
 8000d78:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <FuncTask2+0x74>)
 8000d7a:	6812      	ldr	r2, [r2, #0]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d010      	beq.n	8000da2 <FuncTask2+0x56>
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <FuncTask2+0x70>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <FuncTask2+0x78>)
 8000d8c:	f000 fdba 	bl	8001904 <HAL_GPIO_TogglePin>
 8000d90:	f001 fd90 	bl	80028b4 <DisableAllInterrupts>
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <FuncTask2+0x7c>)
 8000d96:	f7ff fef3 	bl	8000b80 <my_printf>
 8000d9a:	e7fe      	b.n	8000d9a <FuncTask2+0x4e>
 8000d9c:	466a      	mov	r2, sp
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <FuncTask2+0x74>)
 8000da0:	601a      	str	r2, [r3, #0]

	++Task2_count;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <FuncTask2+0x68>)
 8000da4:	8813      	ldrh	r3, [r2, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	8013      	strh	r3, [r2, #0]

	TerminateTask();
 8000dae:	f001 fdc5 	bl	800293c <TerminateTask>
}
 8000db2:	bd08      	pop	{r3, pc}
 8000db4:	200004b0 	.word	0x200004b0
 8000db8:	08003440 	.word	0x08003440
 8000dbc:	200004bc 	.word	0x200004bc
 8000dc0:	200004b4 	.word	0x200004b4
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	0800344c 	.word	0x0800344c

08000dcc <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim3_up;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dcc:	b500      	push	{lr}
 8000dce:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9302      	str	r3, [sp, #8]
 8000dd4:	9303      	str	r3, [sp, #12]
 8000dd6:	9304      	str	r3, [sp, #16]
 8000dd8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dde:	4815      	ldr	r0, [pc, #84]	; (8000e34 <MX_TIM3_Init+0x68>)
 8000de0:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <MX_TIM3_Init+0x6c>)
 8000de2:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8000de4:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8000de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dec:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df4:	f001 f980 	bl	80020f8 <HAL_TIM_Base_Init>
 8000df8:	b990      	cbnz	r0, 8000e20 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e00:	a902      	add	r1, sp, #8
 8000e02:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_TIM3_Init+0x68>)
 8000e04:	f001 f99e 	bl	8002144 <HAL_TIM_ConfigClockSource>
 8000e08:	b968      	cbnz	r0, 8000e26 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e10:	4669      	mov	r1, sp
 8000e12:	4808      	ldr	r0, [pc, #32]	; (8000e34 <MX_TIM3_Init+0x68>)
 8000e14:	f001 fa04 	bl	8002220 <HAL_TIMEx_MasterConfigSynchronization>
 8000e18:	b940      	cbnz	r0, 8000e2c <MX_TIM3_Init+0x60>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e1a:	b007      	add	sp, #28
 8000e1c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e20:	f7ff fc74 	bl	800070c <Error_Handler>
 8000e24:	e7e9      	b.n	8000dfa <MX_TIM3_Init+0x2e>
    Error_Handler();
 8000e26:	f7ff fc71 	bl	800070c <Error_Handler>
 8000e2a:	e7ee      	b.n	8000e0a <MX_TIM3_Init+0x3e>
    Error_Handler();
 8000e2c:	f7ff fc6e 	bl	800070c <Error_Handler>
}
 8000e30:	e7f3      	b.n	8000e1a <MX_TIM3_Init+0x4e>
 8000e32:	bf00      	nop
 8000e34:	20000520 	.word	0x20000520
 8000e38:	40000400 	.word	0x40000400

08000e3c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000e3c:	b500      	push	{lr}
 8000e3e:	b083      	sub	sp, #12

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	2300      	movs	r3, #0
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e46:	480f      	ldr	r0, [pc, #60]	; (8000e84 <MX_TIM7_Init+0x48>)
 8000e48:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <MX_TIM7_Init+0x4c>)
 8000e4a:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 0;
 8000e4c:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 65535;
 8000e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e54:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e5a:	f001 f94d 	bl	80020f8 <HAL_TIM_Base_Init>
 8000e5e:	b950      	cbnz	r0, 8000e76 <MX_TIM7_Init+0x3a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e66:	4669      	mov	r1, sp
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_TIM7_Init+0x48>)
 8000e6a:	f001 f9d9 	bl	8002220 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	b928      	cbnz	r0, 8000e7c <MX_TIM7_Init+0x40>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e70:	b003      	add	sp, #12
 8000e72:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e76:	f7ff fc49 	bl	800070c <Error_Handler>
 8000e7a:	e7f1      	b.n	8000e60 <MX_TIM7_Init+0x24>
    Error_Handler();
 8000e7c:	f7ff fc46 	bl	800070c <Error_Handler>
}
 8000e80:	e7f6      	b.n	8000e70 <MX_TIM7_Init+0x34>
 8000e82:	bf00      	nop
 8000e84:	20000560 	.word	0x20000560
 8000e88:	40001400 	.word	0x40001400

08000e8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e8c:	b510      	push	{r4, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	4604      	mov	r4, r0

  if(tim_baseHandle->Instance==TIM3)
 8000e92:	6803      	ldr	r3, [r0, #0]
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_TIM_Base_MspInit+0x8c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d004      	beq.n	8000ea4 <HAL_TIM_Base_MspInit+0x18>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM7)
 8000e9a:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <HAL_TIM_Base_MspInit+0x90>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d02e      	beq.n	8000efe <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8000eac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000eae:	f041 0102 	orr.w	r1, r1, #2
 8000eb2:	6411      	str	r1, [r2, #64]	; 0x40
 8000eb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000eb6:	f002 0202 	and.w	r2, r2, #2
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	9a00      	ldr	r2, [sp, #0]
    hdma_tim3_up.Instance = DMA1_Stream2;
 8000ebe:	4818      	ldr	r0, [pc, #96]	; (8000f20 <HAL_TIM_Base_MspInit+0x94>)
 8000ec0:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <HAL_TIM_Base_MspInit+0x98>)
 8000ec2:	6002      	str	r2, [r0, #0]
    hdma_tim3_up.Init.Channel = DMA_CHANNEL_5;
 8000ec4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000ec8:	6042      	str	r2, [r0, #4]
    hdma_tim3_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eca:	6083      	str	r3, [r0, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	60c3      	str	r3, [r0, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed2:	6102      	str	r2, [r0, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed8:	6142      	str	r2, [r0, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ede:	6182      	str	r2, [r0, #24]
    hdma_tim3_up.Init.Mode = DMA_NORMAL;
 8000ee0:	61c3      	str	r3, [r0, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ee2:	6203      	str	r3, [r0, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ee4:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8000ee6:	f000 fb3b 	bl	8001560 <HAL_DMA_Init>
 8000eea:	b928      	cbnz	r0, 8000ef8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_up);
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_TIM_Base_MspInit+0x94>)
 8000eee:	6323      	str	r3, [r4, #48]	; 0x30
 8000ef0:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8000ef2:	6223      	str	r3, [r4, #32]
 8000ef4:	639c      	str	r4, [r3, #56]	; 0x38
 8000ef6:	e7d3      	b.n	8000ea0 <HAL_TIM_Base_MspInit+0x14>
      Error_Handler();
 8000ef8:	f7ff fc08 	bl	800070c <Error_Handler>
 8000efc:	e7f6      	b.n	8000eec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_TIM_Base_MspInit+0x9c>)
 8000f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f06:	f042 0220 	orr.w	r2, r2, #32
 8000f0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9b01      	ldr	r3, [sp, #4]
}
 8000f16:	e7c3      	b.n	8000ea0 <HAL_TIM_Base_MspInit+0x14>
 8000f18:	40000400 	.word	0x40000400
 8000f1c:	40001400 	.word	0x40001400
 8000f20:	200004c0 	.word	0x200004c0
 8000f24:	40026040 	.word	0x40026040
 8000f28:	40023800 	.word	0x40023800

08000f2c <measure_time>:
  print_clock(clock_size_array);
  print_accurate_collision_w_instruction(clock_size_array);
  my_printf("\r\n");
}

__attribute__((optimize(0))) unsigned int measure_time(void (*victim)()){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	int time1, time2;

  HAL_TIM_Base_Start(&htim7);
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <measure_time+0x34>)
 8000f36:	f001 f852 	bl	8001fde <HAL_TIM_Base_Start>
  time1 = TIM7->CNT;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <measure_time+0x38>)
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3e:	60fb      	str	r3, [r7, #12]

  victim();
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4798      	blx	r3

  time2 = TIM7->CNT;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <measure_time+0x38>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	60bb      	str	r3, [r7, #8]

  HAL_TIM_Base_Stop(&htim7);
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <measure_time+0x34>)
 8000f4c:	f001 f859 	bl	8002002 <HAL_TIM_Base_Stop>

  return time2 - time1 - 8;
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	3b08      	subs	r3, #8
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000560 	.word	0x20000560
 8000f64:	40001400 	.word	0x40001400

08000f68 <print_clock>:
void print_clock(int *instructions){
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	4606      	mov	r6, r0
  my_printf("CLK\t|");
 8000f6c:	480a      	ldr	r0, [pc, #40]	; (8000f98 <print_clock+0x30>)
 8000f6e:	f7ff fe07 	bl	8000b80 <my_printf>
  int i = 0, instruction = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	4619      	mov	r1, r3
  while(instructions[instruction++] != END)
 8000f76:	e005      	b.n	8000f84 <print_clock+0x1c>
    my_printf("%3d\t|", i++);
 8000f78:	1c4d      	adds	r5, r1, #1
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <print_clock+0x34>)
 8000f7c:	f7ff fe00 	bl	8000b80 <my_printf>
  while(instructions[instruction++] != END)
 8000f80:	4623      	mov	r3, r4
    my_printf("%3d\t|", i++);
 8000f82:	4629      	mov	r1, r5
  while(instructions[instruction++] != END)
 8000f84:	1c5c      	adds	r4, r3, #1
 8000f86:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d1f4      	bne.n	8000f78 <print_clock+0x10>
  my_printf("\r\n");
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <print_clock+0x38>)
 8000f90:	f7ff fdf6 	bl	8000b80 <my_printf>
}
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	bf00      	nop
 8000f98:	080032b8 	.word	0x080032b8
 8000f9c:	080032c0 	.word	0x080032c0
 8000fa0:	080032c8 	.word	0x080032c8

08000fa4 <process_accurate_collision>:
  dma_accurate_collisions_latencies[collision_n] = (dst_covert[1]-dst_covert[0])&0xFF;
 8000fa4:	4a03      	ldr	r2, [pc, #12]	; (8000fb4 <process_accurate_collision+0x10>)
 8000fa6:	6853      	ldr	r3, [r2, #4]
 8000fa8:	6812      	ldr	r2, [r2, #0]
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	4a02      	ldr	r2, [pc, #8]	; (8000fb8 <process_accurate_collision+0x14>)
 8000fae:	5413      	strb	r3, [r2, r0]
}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200005a0 	.word	0x200005a0
 8000fb8:	20001640 	.word	0x20001640

08000fbc <print_accurate_collision_w_instruction>:
void print_accurate_collision_w_instruction(int *instructions){
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	4606      	mov	r6, r0
  my_printf("COL\t|");
 8000fc0:	480a      	ldr	r0, [pc, #40]	; (8000fec <print_accurate_collision_w_instruction+0x30>)
 8000fc2:	f7ff fddd 	bl	8000b80 <my_printf>
  int collision = 0, instruction = 0;
 8000fc6:	2400      	movs	r4, #0
 8000fc8:	4625      	mov	r5, r4
  while(instructions[instruction] != END){
 8000fca:	e006      	b.n	8000fda <print_accurate_collision_w_instruction+0x1e>
    my_printf(" %3d\t|", dma_accurate_collisions_latencies[collision] );
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <print_accurate_collision_w_instruction+0x34>)
 8000fce:	5d59      	ldrb	r1, [r3, r5]
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <print_accurate_collision_w_instruction+0x38>)
 8000fd2:	f7ff fdd5 	bl	8000b80 <my_printf>
    instruction++;
 8000fd6:	3401      	adds	r4, #1
    collision++;
 8000fd8:	3501      	adds	r5, #1
  while(instructions[instruction] != END){
 8000fda:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d1f4      	bne.n	8000fcc <print_accurate_collision_w_instruction+0x10>
  my_printf("\r\n");
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <print_accurate_collision_w_instruction+0x3c>)
 8000fe4:	f7ff fdcc 	bl	8000b80 <my_printf>
}
 8000fe8:	bd70      	pop	{r4, r5, r6, pc}
 8000fea:	bf00      	nop
 8000fec:	080032d4 	.word	0x080032d4
 8000ff0:	20001640 	.word	0x20001640
 8000ff4:	080032cc 	.word	0x080032cc
 8000ff8:	080032c8 	.word	0x080032c8

08000ffc <accurate_trace_time>:
void accurate_trace_time(sVictimFunc *s_vict){
 8000ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001000:	af00      	add	r7, sp, #0
 8001002:	4605      	mov	r5, r0
  int clock_size_array[s_vict->time];
 8001004:	6882      	ldr	r2, [r0, #8]
 8001006:	0093      	lsls	r3, r2, #2
 8001008:	3307      	adds	r3, #7
 800100a:	f023 0307 	bic.w	r3, r3, #7
 800100e:	ebad 0d03 	sub.w	sp, sp, r3
 8001012:	46e8      	mov	r8, sp
  clock_size_array[s_vict->time] = END;
 8001014:	2304      	movs	r3, #4
 8001016:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
  i = 0, instruction = 0;
 800101a:	2400      	movs	r4, #0
  while(i < s_vict->time){
 800101c:	e00a      	b.n	8001034 <accurate_trace_time+0x38>
    get_accurate_trace(auto_reload, i, n_collisions, s_vict->func);
 800101e:	682b      	ldr	r3, [r5, #0]
 8001020:	2202      	movs	r2, #2
 8001022:	4621      	mov	r1, r4
 8001024:	2001      	movs	r0, #1
 8001026:	f001 fe71 	bl	8002d0c <_etext>
    process_accurate_collision(i++);
 800102a:	1c66      	adds	r6, r4, #1
 800102c:	4620      	mov	r0, r4
 800102e:	f7ff ffb9 	bl	8000fa4 <process_accurate_collision>
 8001032:	4634      	mov	r4, r6
  while(i < s_vict->time){
 8001034:	68ab      	ldr	r3, [r5, #8]
 8001036:	42a3      	cmp	r3, r4
 8001038:	d8f1      	bhi.n	800101e <accurate_trace_time+0x22>
  my_printf("\r\n");
 800103a:	4e0b      	ldr	r6, [pc, #44]	; (8001068 <accurate_trace_time+0x6c>)
 800103c:	f106 0410 	add.w	r4, r6, #16
 8001040:	4620      	mov	r0, r4
 8001042:	f7ff fd9d 	bl	8000b80 <my_printf>
  my_printf("Trace %s  \r\n", s_vict->name);
 8001046:	6869      	ldr	r1, [r5, #4]
 8001048:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800104c:	f7ff fd98 	bl	8000b80 <my_printf>
  print_clock(clock_size_array);
 8001050:	4640      	mov	r0, r8
 8001052:	f7ff ff89 	bl	8000f68 <print_clock>
  print_accurate_collision_w_instruction(clock_size_array);
 8001056:	4640      	mov	r0, r8
 8001058:	f7ff ffb0 	bl	8000fbc <print_accurate_collision_w_instruction>
  my_printf("\r\n");
 800105c:	4620      	mov	r0, r4
 800105e:	f7ff fd8f 	bl	8000b80 <my_printf>
}
 8001062:	46bd      	mov	sp, r7
 8001064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001068:	080032b8 	.word	0x080032b8

0800106c <comp_true>:
  int num1 = 50, num2 = 20, max;
  if(num1 > num2)
      max = num1;
  else
      max = num2;
}
 800106c:	4770      	bx	lr

0800106e <comp_false>:
  int num1 = 20, num2 = 50, max;
  if(num1 > num2)
      max = num1;
  else
      max = num2;
}
 800106e:	4770      	bx	lr

08001070 <if_else_true>:
  int s = 0, b;
  if (s == 0)
    b = 1;
  else
    b = 0;
}
 8001070:	4770      	bx	lr

08001072 <if_else_false>:
  int s = 1, b;
  if (s == 0)
    b = 1;
  else
    b = 0;
}
 8001072:	4770      	bx	lr

08001074 <access_near>:
      x = (x / 3 * 4) + s;
}

char acc_buff[256];

void access_near(){
 8001074:	b082      	sub	sp, #8
  int s = 0;
  volatile char x;
  if (s == 0)
      x = acc_buff[7];
 8001076:	4b03      	ldr	r3, [pc, #12]	; (8001084 <access_near+0x10>)
 8001078:	79db      	ldrb	r3, [r3, #7]
 800107a:	f88d 3007 	strb.w	r3, [sp, #7]
  else
      x = acc_buff[255];
}
 800107e:	b002      	add	sp, #8
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20001540 	.word	0x20001540

08001088 <access_far>:

void access_far(){
 8001088:	b082      	sub	sp, #8
  int s = 1;
  volatile char x;
  if (s == 0)
      x = acc_buff[7];
  else
      x = acc_buff[255];
 800108a:	4b03      	ldr	r3, [pc, #12]	; (8001098 <access_far+0x10>)
 800108c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 8001090:	f88d 3007 	strb.w	r3, [sp, #7]
}
 8001094:	b002      	add	sp, #8
 8001096:	4770      	bx	lr
 8001098:	20001540 	.word	0x20001540

0800109c <MX_USART2_Init>:
//     HAL_UART_Transmit(&husart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
//     return ch;
// }

void MX_USART2_Init(void)
{
 800109c:	b508      	push	{r3, lr}
    husart2.Instance         = USART2;
 800109e:	480a      	ldr	r0, [pc, #40]	; (80010c8 <MX_USART2_Init+0x2c>)
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <MX_USART2_Init+0x30>)
 80010a2:	6003      	str	r3, [r0, #0]
    husart2.Init.BaudRate    = 115200;
 80010a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010a8:	6043      	str	r3, [r0, #4]
    husart2.Init.Mode        = UART_MODE_TX_RX;
 80010aa:	230c      	movs	r3, #12
 80010ac:	6143      	str	r3, [r0, #20]
    husart2.Init.WordLength  = UART_WORDLENGTH_8B;
 80010ae:	2300      	movs	r3, #0
 80010b0:	6083      	str	r3, [r0, #8]
    husart2.Init.StopBits    = UART_STOPBITS_1;
 80010b2:	60c3      	str	r3, [r0, #12]
    husart2.Init.Parity      = UART_PARITY_NONE;
 80010b4:	6103      	str	r3, [r0, #16]
    husart2.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 80010b6:	6183      	str	r3, [r0, #24]
    husart2.Init.OverSampling= UART_OVERSAMPLING_16;
 80010b8:	61c3      	str	r3, [r0, #28]

    if (HAL_UART_Init(&husart2) != HAL_OK)
 80010ba:	f001 fa59 	bl	8002570 <HAL_UART_Init>
 80010be:	b900      	cbnz	r0, 80010c2 <MX_USART2_Init+0x26>
    {
    	Error_Handler();
    }
}
 80010c0:	bd08      	pop	{r3, pc}
    	Error_Handler();
 80010c2:	f7ff fb23 	bl	800070c <Error_Handler>
}
 80010c6:	e7fb      	b.n	80010c0 <MX_USART2_Init+0x24>
 80010c8:	200021f8 	.word	0x200021f8
 80010cc:	40004400 	.word	0x40004400

080010d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d0:	b500      	push	{lr}
 80010d2:	b089      	sub	sp, #36	; 0x24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	2300      	movs	r3, #0
 80010d6:	9303      	str	r3, [sp, #12]
 80010d8:	9304      	str	r3, [sp, #16]
 80010da:	9305      	str	r3, [sp, #20]
 80010dc:	9306      	str	r3, [sp, #24]
 80010de:	9307      	str	r3, [sp, #28]

    if(uartHandle->Instance == USART2)
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_UART_MspInit+0x68>)
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d002      	beq.n	80010ee <HAL_UART_MspInit+0x1e>
        GPIO_InitStruct.Pull      = GPIO_NOPULL;
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
    }
}
 80010e8:	b009      	add	sp, #36	; 0x24
 80010ea:	f85d fb04 	ldr.w	pc, [sp], #4
        __HAL_RCC_USART2_CLK_ENABLE();
 80010ee:	2100      	movs	r1, #0
 80010f0:	9101      	str	r1, [sp, #4]
 80010f2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80010f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
 80010fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001100:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	9a01      	ldr	r2, [sp, #4]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	9102      	str	r1, [sp, #8]
 800110a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	631a      	str	r2, [r3, #48]	; 0x30
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pin       = GPIO_PIN_2 | GPIO_PIN_3;
 800111c:	230c      	movs	r3, #12
 800111e:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	9306      	str	r3, [sp, #24]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001128:	2307      	movs	r3, #7
 800112a:	9307      	str	r3, [sp, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	a903      	add	r1, sp, #12
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <HAL_UART_MspInit+0x6c>)
 8001130:	f000 fafe 	bl	8001730 <HAL_GPIO_Init>
}
 8001134:	e7d8      	b.n	80010e8 <HAL_UART_MspInit+0x18>
 8001136:	bf00      	nop
 8001138:	40004400 	.word	0x40004400
 800113c:	40020000 	.word	0x40020000

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001144:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001146:	e003      	b.n	8001150 <LoopCopyDataInit>

08001148 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800114a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800114c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800114e:	3104      	adds	r1, #4

08001150 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001154:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001156:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001158:	d3f6      	bcc.n	8001148 <CopyDataInit>
  ldr  r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800115c:	e002      	b.n	8001164 <LoopFillZerobss>

0800115e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800115e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001160:	f842 3b04 	str.w	r3, [r2], #4

08001164 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001166:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001168:	d3f9      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800116a:	f001 fb9b 	bl	80028a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f000 f811 	bl	8001194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fbdf 	bl	8000934 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001178:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800117c:	08003530 	.word	0x08003530
  ldr  r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001184:	20000488 	.word	0x20000488
  ldr  r2, =_sbss
 8001188:	20000488 	.word	0x20000488
  ldr  r3, = _ebss
 800118c:	20002654 	.word	0x20002654

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <__libc_init_array>:
 8001194:	b570      	push	{r4, r5, r6, lr}
 8001196:	4e0d      	ldr	r6, [pc, #52]	; (80011cc <__libc_init_array+0x38>)
 8001198:	4d0d      	ldr	r5, [pc, #52]	; (80011d0 <__libc_init_array+0x3c>)
 800119a:	1b76      	subs	r6, r6, r5
 800119c:	10b6      	asrs	r6, r6, #2
 800119e:	d006      	beq.n	80011ae <__libc_init_array+0x1a>
 80011a0:	2400      	movs	r4, #0
 80011a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80011a6:	3401      	adds	r4, #1
 80011a8:	4798      	blx	r3
 80011aa:	42a6      	cmp	r6, r4
 80011ac:	d1f9      	bne.n	80011a2 <__libc_init_array+0xe>
 80011ae:	4e09      	ldr	r6, [pc, #36]	; (80011d4 <__libc_init_array+0x40>)
 80011b0:	4d09      	ldr	r5, [pc, #36]	; (80011d8 <__libc_init_array+0x44>)
 80011b2:	1b76      	subs	r6, r6, r5
 80011b4:	f001 fd9e 	bl	8002cf4 <_init>
 80011b8:	10b6      	asrs	r6, r6, #2
 80011ba:	d006      	beq.n	80011ca <__libc_init_array+0x36>
 80011bc:	2400      	movs	r4, #0
 80011be:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c2:	3401      	adds	r4, #1
 80011c4:	4798      	blx	r3
 80011c6:	42a6      	cmp	r6, r4
 80011c8:	d1f9      	bne.n	80011be <__libc_init_array+0x2a>
 80011ca:	bd70      	pop	{r4, r5, r6, pc}
 80011cc:	08003524 	.word	0x08003524
 80011d0:	08003524 	.word	0x08003524
 80011d4:	0800352c 	.word	0x0800352c
 80011d8:	08003524 	.word	0x08003524

080011dc <register_fini>:
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <register_fini+0xc>)
 80011de:	b113      	cbz	r3, 80011e6 <register_fini+0xa>
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <register_fini+0x10>)
 80011e2:	f000 b805 	b.w	80011f0 <atexit>
 80011e6:	4770      	bx	lr
 80011e8:	00000000 	.word	0x00000000
 80011ec:	080011fd 	.word	0x080011fd

080011f0 <atexit>:
 80011f0:	2300      	movs	r3, #0
 80011f2:	4601      	mov	r1, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 b81a 	b.w	8001230 <__register_exitproc>

080011fc <__libc_fini_array>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <__libc_fini_array+0x24>)
 8001200:	4d08      	ldr	r5, [pc, #32]	; (8001224 <__libc_fini_array+0x28>)
 8001202:	1b5b      	subs	r3, r3, r5
 8001204:	109c      	asrs	r4, r3, #2
 8001206:	d007      	beq.n	8001218 <__libc_fini_array+0x1c>
 8001208:	3b04      	subs	r3, #4
 800120a:	441d      	add	r5, r3
 800120c:	3c01      	subs	r4, #1
 800120e:	f855 3904 	ldr.w	r3, [r5], #-4
 8001212:	4798      	blx	r3
 8001214:	2c00      	cmp	r4, #0
 8001216:	d1f9      	bne.n	800120c <__libc_fini_array+0x10>
 8001218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800121c:	f001 bd70 	b.w	8002d00 <_fini>
 8001220:	08003530 	.word	0x08003530
 8001224:	0800352c 	.word	0x0800352c

08001228 <__retarget_lock_acquire_recursive>:
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <__retarget_lock_release_recursive>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <__register_exitproc>:
 8001230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001234:	f8df a07c 	ldr.w	sl, [pc, #124]	; 80012b4 <__register_exitproc+0x84>
 8001238:	4606      	mov	r6, r0
 800123a:	f8da 0000 	ldr.w	r0, [sl]
 800123e:	4698      	mov	r8, r3
 8001240:	460f      	mov	r7, r1
 8001242:	4691      	mov	r9, r2
 8001244:	f7ff fff0 	bl	8001228 <__retarget_lock_acquire_recursive>
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <__register_exitproc+0x88>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8001250:	b324      	cbz	r4, 800129c <__register_exitproc+0x6c>
 8001252:	6865      	ldr	r5, [r4, #4]
 8001254:	2d1f      	cmp	r5, #31
 8001256:	dc26      	bgt.n	80012a6 <__register_exitproc+0x76>
 8001258:	b95e      	cbnz	r6, 8001272 <__register_exitproc+0x42>
 800125a:	1c6b      	adds	r3, r5, #1
 800125c:	3502      	adds	r5, #2
 800125e:	f8da 0000 	ldr.w	r0, [sl]
 8001262:	6063      	str	r3, [r4, #4]
 8001264:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8001268:	f7ff ffe0 	bl	800122c <__retarget_lock_release_recursive>
 800126c:	2000      	movs	r0, #0
 800126e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001272:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8001276:	2301      	movs	r3, #1
 8001278:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800127c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8001280:	40ab      	lsls	r3, r5
 8001282:	431a      	orrs	r2, r3
 8001284:	2e02      	cmp	r6, #2
 8001286:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800128a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800128e:	d1e4      	bne.n	800125a <__register_exitproc+0x2a>
 8001290:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8001294:	4313      	orrs	r3, r2
 8001296:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800129a:	e7de      	b.n	800125a <__register_exitproc+0x2a>
 800129c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80012a0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80012a4:	e7d5      	b.n	8001252 <__register_exitproc+0x22>
 80012a6:	f8da 0000 	ldr.w	r0, [sl]
 80012aa:	f7ff ffbf 	bl	800122c <__retarget_lock_release_recursive>
 80012ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b2:	e7dc      	b.n	800126e <__register_exitproc+0x3e>
 80012b4:	20000478 	.word	0x20000478
 80012b8:	080034f8 	.word	0x080034f8

080012bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012bc:	b510      	push	{r4, lr}
 80012be:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_InitTick+0x40>)
 80012c2:	7818      	ldrb	r0, [r3, #0]
 80012c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_InitTick+0x44>)
 80012ce:	6810      	ldr	r0, [r2, #0]
 80012d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80012d4:	f000 f8b2 	bl	800143c <HAL_SYSTICK_Config>
 80012d8:	b968      	cbnz	r0, 80012f6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	2c0f      	cmp	r4, #15
 80012dc:	d901      	bls.n	80012e2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80012de:	2001      	movs	r0, #1
 80012e0:	e00a      	b.n	80012f8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e2:	2200      	movs	r2, #0
 80012e4:	4621      	mov	r1, r4
 80012e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ea:	f000 f861 	bl	80013b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_InitTick+0x48>)
 80012f0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2000      	movs	r0, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
}
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	bf00      	nop
 80012fc:	2000047c 	.word	0x2000047c
 8001300:	20000484 	.word	0x20000484
 8001304:	20000480 	.word	0x20000480

08001308 <HAL_Init>:
{
 8001308:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_Init+0x28>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001312:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800131a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f835 	bl	800138c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	200f      	movs	r0, #15
 8001324:	f7ff ffca 	bl	80012bc <HAL_InitTick>
  HAL_MspInit();
 8001328:	f7ff fc8e 	bl	8000c48 <HAL_MspInit>
}
 800132c:	2000      	movs	r0, #0
 800132e:	bd08      	pop	{r3, pc}
 8001330:	40023c00 	.word	0x40023c00

08001334 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001334:	4a03      	ldr	r2, [pc, #12]	; (8001344 <HAL_IncTick+0x10>)
 8001336:	6811      	ldr	r1, [r2, #0]
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_IncTick+0x14>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	440b      	add	r3, r1
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20002650 	.word	0x20002650
 8001348:	2000047c 	.word	0x2000047c

0800134c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800134c:	4b01      	ldr	r3, [pc, #4]	; (8001354 <HAL_GetTick+0x8>)
 800134e:	6818      	ldr	r0, [r3, #0]
}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20002650 	.word	0x20002650

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800135c:	f7ff fff6 	bl	800134c <HAL_GetTick>
 8001360:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001366:	d002      	beq.n	800136e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <HAL_Delay+0x24>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800136e:	f7ff ffed 	bl	800134c <HAL_GetTick>
 8001372:	1b40      	subs	r0, r0, r5
 8001374:	42a0      	cmp	r0, r4
 8001376:	d3fa      	bcc.n	800136e <HAL_Delay+0x16>
  {
  }
}
 8001378:	bd38      	pop	{r3, r4, r5, pc}
 800137a:	bf00      	nop
 800137c:	2000047c 	.word	0x2000047c

08001380 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001380:	4b01      	ldr	r3, [pc, #4]	; (8001388 <HAL_GetREVID+0x8>)
 8001382:	6818      	ldr	r0, [r3, #0]
}
 8001384:	0c00      	lsrs	r0, r0, #16
 8001386:	4770      	bx	lr
 8001388:	e0042000 	.word	0xe0042000

0800138c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800138e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001390:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001394:	041b      	lsls	r3, r3, #16
 8001396:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	0200      	lsls	r0, r0, #8
 800139a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80013a8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_NVIC_SetPriority+0x68>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ba:	f1c3 0c07 	rsb	ip, r3, #7
 80013be:	f1bc 0f04 	cmp.w	ip, #4
 80013c2:	bf28      	it	cs
 80013c4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c8:	f103 0e04 	add.w	lr, r3, #4
 80013cc:	f1be 0f06 	cmp.w	lr, #6
 80013d0:	d918      	bls.n	8001404 <HAL_NVIC_SetPriority+0x54>
 80013d2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80013d8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80013dc:	ea21 010c 	bic.w	r1, r1, ip
 80013e0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e2:	fa0e f303 	lsl.w	r3, lr, r3
 80013e6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ea:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80013ec:	2800      	cmp	r0, #0
 80013ee:	db0b      	blt.n	8001408 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	0109      	lsls	r1, r1, #4
 80013f2:	b2c9      	uxtb	r1, r1
 80013f4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80013f8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80013fc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001400:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001404:	2300      	movs	r3, #0
 8001406:	e7e5      	b.n	80013d4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	f000 000f 	and.w	r0, r0, #15
 800140c:	0109      	lsls	r1, r1, #4
 800140e:	b2c9      	uxtb	r1, r1
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <HAL_NVIC_SetPriority+0x6c>)
 8001412:	5419      	strb	r1, [r3, r0]
 8001414:	e7f4      	b.n	8001400 <HAL_NVIC_SetPriority+0x50>
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	e000ed14 	.word	0xe000ed14

08001420 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001420:	2800      	cmp	r0, #0
 8001422:	db07      	blt.n	8001434 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001424:	f000 021f 	and.w	r2, r0, #31
 8001428:	0940      	lsrs	r0, r0, #5
 800142a:	2301      	movs	r3, #1
 800142c:	4093      	lsls	r3, r2
 800142e:	4a02      	ldr	r2, [pc, #8]	; (8001438 <HAL_NVIC_EnableIRQ+0x18>)
 8001430:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	3801      	subs	r0, #1
 800143e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001442:	d20b      	bcs.n	800145c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001444:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001448:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_SYSTICK_Config+0x24>)
 800144c:	21f0      	movs	r1, #240	; 0xf0
 800144e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001452:	2000      	movs	r0, #0
 8001454:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	2207      	movs	r2, #7
 8001458:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800145c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001464:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001466:	6805      	ldr	r5, [r0, #0]
 8001468:	682c      	ldr	r4, [r5, #0]
 800146a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800146e:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001470:	6804      	ldr	r4, [r0, #0]
 8001472:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001474:	6883      	ldr	r3, [r0, #8]
 8001476:	2b40      	cmp	r3, #64	; 0x40
 8001478:	d005      	beq.n	8001486 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800147a:	6803      	ldr	r3, [r0, #0]
 800147c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800147e:	6803      	ldr	r3, [r0, #0]
 8001480:	60da      	str	r2, [r3, #12]
  }
}
 8001482:	bc30      	pop	{r4, r5}
 8001484:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001486:	6803      	ldr	r3, [r0, #0]
 8001488:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800148a:	6803      	ldr	r3, [r0, #0]
 800148c:	60d9      	str	r1, [r3, #12]
 800148e:	e7f8      	b.n	8001482 <DMA_SetConfig+0x1e>

08001490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001490:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001492:	6803      	ldr	r3, [r0, #0]
 8001494:	b2d9      	uxtb	r1, r3
 8001496:	3910      	subs	r1, #16
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <DMA_CalcBaseAndBitshift+0x38>)
 800149a:	fba2 4201 	umull	r4, r2, r2, r1
 800149e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014a0:	4c0a      	ldr	r4, [pc, #40]	; (80014cc <DMA_CalcBaseAndBitshift+0x3c>)
 80014a2:	5ca2      	ldrb	r2, [r4, r2]
 80014a4:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014a6:	295f      	cmp	r1, #95	; 0x5f
 80014a8:	d908      	bls.n	80014bc <DMA_CalcBaseAndBitshift+0x2c>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	3304      	adds	r3, #4
 80014b4:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80014b6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80014b8:	bc10      	pop	{r4}
 80014ba:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014bc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014c0:	f023 0303 	bic.w	r3, r3, #3
 80014c4:	6583      	str	r3, [r0, #88]	; 0x58
 80014c6:	e7f6      	b.n	80014b6 <DMA_CalcBaseAndBitshift+0x26>
 80014c8:	aaaaaaab 	.word	0xaaaaaaab
 80014cc:	080034fc 	.word	0x080034fc

080014d0 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014d2:	6982      	ldr	r2, [r0, #24]
 80014d4:	b992      	cbnz	r2, 80014fc <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d00a      	beq.n	80014f0 <DMA_CheckFifoParam+0x20>
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d002      	beq.n	80014e4 <DMA_CheckFifoParam+0x14>
 80014de:	b10b      	cbz	r3, 80014e4 <DMA_CheckFifoParam+0x14>
 80014e0:	2000      	movs	r0, #0
 80014e2:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014e6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80014ea:	d128      	bne.n	800153e <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	2000      	movs	r0, #0
 80014ee:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014f6:	d024      	beq.n	8001542 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80014f8:	2000      	movs	r0, #0
 80014fa:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014fc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001500:	d009      	beq.n	8001516 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001502:	2b02      	cmp	r3, #2
 8001504:	d925      	bls.n	8001552 <DMA_CheckFifoParam+0x82>
 8001506:	2b03      	cmp	r3, #3
 8001508:	d125      	bne.n	8001556 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800150a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800150c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001510:	d123      	bne.n	800155a <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001512:	2000      	movs	r0, #0
 8001514:	4770      	bx	lr
    switch (tmp)
 8001516:	2b03      	cmp	r3, #3
 8001518:	d803      	bhi.n	8001522 <DMA_CheckFifoParam+0x52>
 800151a:	e8df f003 	tbb	[pc, r3]
 800151e:	0414      	.short	0x0414
 8001520:	0a14      	.short	0x0a14
 8001522:	2000      	movs	r0, #0
 8001524:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001526:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001528:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800152c:	d10d      	bne.n	800154a <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800152e:	2000      	movs	r0, #0
 8001530:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001532:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001538:	d009      	beq.n	800154e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2000      	movs	r0, #0
 800153c:	4770      	bx	lr
        status = HAL_ERROR;
 800153e:	2001      	movs	r0, #1
 8001540:	4770      	bx	lr
        status = HAL_ERROR;
 8001542:	2001      	movs	r0, #1
 8001544:	4770      	bx	lr
      status = HAL_ERROR;
 8001546:	2001      	movs	r0, #1
 8001548:	4770      	bx	lr
        status = HAL_ERROR;
 800154a:	2001      	movs	r0, #1
 800154c:	4770      	bx	lr
        status = HAL_ERROR;
 800154e:	2001      	movs	r0, #1
 8001550:	4770      	bx	lr
      status = HAL_ERROR;
 8001552:	2001      	movs	r0, #1
 8001554:	4770      	bx	lr
    switch (tmp)
 8001556:	2000      	movs	r0, #0
 8001558:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800155a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800155c:	4770      	bx	lr
	...

08001560 <HAL_DMA_Init>:
{
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff fef2 	bl	800134c <HAL_GetTick>
 8001568:	4605      	mov	r5, r0
  if(hdma == NULL)
 800156a:	2c00      	cmp	r4, #0
 800156c:	d05a      	beq.n	8001624 <HAL_DMA_Init+0xc4>
  __HAL_UNLOCK(hdma);
 800156e:	2300      	movs	r3, #0
 8001570:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001574:	2302      	movs	r3, #2
 8001576:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800157a:	6822      	ldr	r2, [r4, #0]
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	f023 0301 	bic.w	r3, r3, #1
 8001582:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001584:	6823      	ldr	r3, [r4, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f012 0f01 	tst.w	r2, #1
 800158c:	d00a      	beq.n	80015a4 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800158e:	f7ff fedd 	bl	800134c <HAL_GetTick>
 8001592:	1b43      	subs	r3, r0, r5
 8001594:	2b05      	cmp	r3, #5
 8001596:	d9f5      	bls.n	8001584 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001598:	2320      	movs	r3, #32
 800159a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159c:	2003      	movs	r0, #3
 800159e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80015a4:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015a6:	4820      	ldr	r0, [pc, #128]	; (8001628 <HAL_DMA_Init+0xc8>)
 80015a8:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015aa:	6861      	ldr	r1, [r4, #4]
 80015ac:	68a2      	ldr	r2, [r4, #8]
 80015ae:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b4:	6921      	ldr	r1, [r4, #16]
 80015b6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b8:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	69a1      	ldr	r1, [r4, #24]
 80015be:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c0:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c4:	6a21      	ldr	r1, [r4, #32]
 80015c6:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c8:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80015cc:	2904      	cmp	r1, #4
 80015ce:	d01e      	beq.n	800160e <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80015d0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80015d2:	6826      	ldr	r6, [r4, #0]
 80015d4:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015d6:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80015da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015dc:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d107      	bne.n	80015f2 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80015e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015e4:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015e8:	b11b      	cbz	r3, 80015f2 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff ff70 	bl	80014d0 <DMA_CheckFifoParam>
 80015f0:	b990      	cbnz	r0, 8001618 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80015f2:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff ff4b 	bl	8001490 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015fa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80015fc:	233f      	movs	r3, #63	; 0x3f
 80015fe:	4093      	lsls	r3, r2
 8001600:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001602:	2000      	movs	r0, #0
 8001604:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001606:	2301      	movs	r3, #1
 8001608:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800160c:	e7c9      	b.n	80015a2 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800160e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001610:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001612:	4301      	orrs	r1, r0
 8001614:	430a      	orrs	r2, r1
 8001616:	e7db      	b.n	80015d0 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001618:	2340      	movs	r3, #64	; 0x40
 800161a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800161c:	2001      	movs	r0, #1
 800161e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001622:	e7be      	b.n	80015a2 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001624:	2001      	movs	r0, #1
 8001626:	e7bc      	b.n	80015a2 <HAL_DMA_Init+0x42>
 8001628:	f010803f 	.word	0xf010803f

0800162c <HAL_DMA_Start>:
{
 800162c:	b538      	push	{r3, r4, r5, lr}
 800162e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001630:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8001634:	2801      	cmp	r0, #1
 8001636:	d01b      	beq.n	8001670 <HAL_DMA_Start+0x44>
 8001638:	2001      	movs	r0, #1
 800163a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800163e:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 8001642:	b2c0      	uxtb	r0, r0
 8001644:	2801      	cmp	r0, #1
 8001646:	d004      	beq.n	8001652 <HAL_DMA_Start+0x26>
    __HAL_UNLOCK(hdma);
 8001648:	2300      	movs	r3, #0
 800164a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 800164e:	2002      	movs	r0, #2
}
 8001650:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001652:	2002      	movs	r0, #2
 8001654:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001658:	2500      	movs	r5, #0
 800165a:	6565      	str	r5, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff ff01 	bl	8001464 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 8001662:	6822      	ldr	r2, [r4, #0]
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	4628      	mov	r0, r5
 800166e:	e7ef      	b.n	8001650 <HAL_DMA_Start+0x24>
  __HAL_LOCK(hdma);
 8001670:	2002      	movs	r0, #2
 8001672:	e7ed      	b.n	8001650 <HAL_DMA_Start+0x24>

08001674 <HAL_DMA_Abort>:
{
 8001674:	b570      	push	{r4, r5, r6, lr}
 8001676:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001678:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800167a:	f7ff fe67 	bl	800134c <HAL_GetTick>
 800167e:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001680:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d006      	beq.n	8001698 <HAL_DMA_Abort+0x24>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800168e:	2300      	movs	r3, #0
 8001690:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001694:	2001      	movs	r0, #1
}
 8001696:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001698:	6822      	ldr	r2, [r4, #0]
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f023 0316 	bic.w	r3, r3, #22
 80016a0:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a2:	6822      	ldr	r2, [r4, #0]
 80016a4:	6953      	ldr	r3, [r2, #20]
 80016a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016aa:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016ae:	b1e3      	cbz	r3, 80016ea <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b0:	6822      	ldr	r2, [r4, #0]
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	f023 0308 	bic.w	r3, r3, #8
 80016b8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80016ba:	6822      	ldr	r2, [r4, #0]
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f013 0f01 	tst.w	r3, #1
 80016cc:	d011      	beq.n	80016f2 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016ce:	f7ff fe3d 	bl	800134c <HAL_GetTick>
 80016d2:	1b43      	subs	r3, r0, r5
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d9f5      	bls.n	80016c4 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016d8:	2320      	movs	r3, #32
 80016da:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80016dc:	2300      	movs	r3, #0
 80016de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e2:	2003      	movs	r0, #3
 80016e4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80016e8:	e7d5      	b.n	8001696 <HAL_DMA_Abort+0x22>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1df      	bne.n	80016b0 <HAL_DMA_Abort+0x3c>
 80016f0:	e7e3      	b.n	80016ba <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80016f4:	233f      	movs	r3, #63	; 0x3f
 80016f6:	4093      	lsls	r3, r2
 80016f8:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001700:	2301      	movs	r3, #1
 8001702:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001706:	e7c6      	b.n	8001696 <HAL_DMA_Abort+0x22>

08001708 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001708:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d003      	beq.n	800171a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001716:	2001      	movs	r0, #1
 8001718:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800171a:	2305      	movs	r3, #5
 800171c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001720:	6802      	ldr	r2, [r0, #0]
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800172a:	2000      	movs	r0, #0
}
 800172c:	4770      	bx	lr
	...

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001732:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001734:	2300      	movs	r3, #0
 8001736:	e037      	b.n	80017a8 <HAL_GPIO_Init+0x78>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001738:	2207      	movs	r2, #7
 800173a:	e000      	b.n	800173e <HAL_GPIO_Init+0xe>
 800173c:	2200      	movs	r2, #0
 800173e:	40aa      	lsls	r2, r5
 8001740:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001742:	3402      	adds	r4, #2
 8001744:	4d68      	ldr	r5, [pc, #416]	; (80018e8 <HAL_GPIO_Init+0x1b8>)
 8001746:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174a:	4a68      	ldr	r2, [pc, #416]	; (80018ec <HAL_GPIO_Init+0x1bc>)
 800174c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800174e:	ea6f 020c 	mvn.w	r2, ip
 8001752:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001756:	684e      	ldr	r6, [r1, #4]
 8001758:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800175c:	d001      	beq.n	8001762 <HAL_GPIO_Init+0x32>
        {
          temp |= iocurrent;
 800175e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8001762:	4c62      	ldr	r4, [pc, #392]	; (80018ec <HAL_GPIO_Init+0x1bc>)
 8001764:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8001766:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001768:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800176c:	684e      	ldr	r6, [r1, #4]
 800176e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8001772:	d001      	beq.n	8001778 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8001774:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001778:	4c5c      	ldr	r4, [pc, #368]	; (80018ec <HAL_GPIO_Init+0x1bc>)
 800177a:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800177e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001782:	684e      	ldr	r6, [r1, #4]
 8001784:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8001788:	d001      	beq.n	800178e <HAL_GPIO_Init+0x5e>
        {
          temp |= iocurrent;
 800178a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 800178e:	4c57      	ldr	r4, [pc, #348]	; (80018ec <HAL_GPIO_Init+0x1bc>)
 8001790:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001792:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001794:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001796:	684d      	ldr	r5, [r1, #4]
 8001798:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 800179c:	d001      	beq.n	80017a2 <HAL_GPIO_Init+0x72>
        {
          temp |= iocurrent;
 800179e:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 80017a2:	4c52      	ldr	r4, [pc, #328]	; (80018ec <HAL_GPIO_Init+0x1bc>)
 80017a4:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	3301      	adds	r3, #1
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	f200 809a 	bhi.w	80018e2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80017ae:	2201      	movs	r2, #1
 80017b0:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b2:	680c      	ldr	r4, [r1, #0]
 80017b4:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80017b8:	ea32 0404 	bics.w	r4, r2, r4
 80017bc:	d1f3      	bne.n	80017a6 <HAL_GPIO_Init+0x76>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017be:	684c      	ldr	r4, [r1, #4]
 80017c0:	1e65      	subs	r5, r4, #1
 80017c2:	2d01      	cmp	r5, #1
 80017c4:	d903      	bls.n	80017ce <HAL_GPIO_Init+0x9e>
 80017c6:	2c11      	cmp	r4, #17
 80017c8:	d001      	beq.n	80017ce <HAL_GPIO_Init+0x9e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ca:	2c12      	cmp	r4, #18
 80017cc:	d112      	bne.n	80017f4 <HAL_GPIO_Init+0xc4>
        temp = GPIOx->OSPEEDR; 
 80017ce:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017d0:	005e      	lsls	r6, r3, #1
 80017d2:	2403      	movs	r4, #3
 80017d4:	40b4      	lsls	r4, r6
 80017d6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017da:	68cc      	ldr	r4, [r1, #12]
 80017dc:	40b4      	lsls	r4, r6
 80017de:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80017e0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80017e2:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017e8:	684c      	ldr	r4, [r1, #4]
 80017ea:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80017ee:	409a      	lsls	r2, r3
 80017f0:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80017f2:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80017f4:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80017fa:	2403      	movs	r4, #3
 80017fc:	fa04 f40e 	lsl.w	r4, r4, lr
 8001800:	43e2      	mvns	r2, r4
 8001802:	ea25 0504 	bic.w	r5, r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001806:	688c      	ldr	r4, [r1, #8]
 8001808:	fa04 f40e 	lsl.w	r4, r4, lr
 800180c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800180e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001810:	684c      	ldr	r4, [r1, #4]
 8001812:	2c02      	cmp	r4, #2
 8001814:	d001      	beq.n	800181a <HAL_GPIO_Init+0xea>
 8001816:	2c12      	cmp	r4, #18
 8001818:	d10f      	bne.n	800183a <HAL_GPIO_Init+0x10a>
        temp = GPIOx->AFR[position >> 3U];
 800181a:	08dd      	lsrs	r5, r3, #3
 800181c:	3508      	adds	r5, #8
 800181e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001822:	f003 0407 	and.w	r4, r3, #7
 8001826:	00a6      	lsls	r6, r4, #2
 8001828:	240f      	movs	r4, #15
 800182a:	40b4      	lsls	r4, r6
 800182c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001830:	690c      	ldr	r4, [r1, #16]
 8001832:	40b4      	lsls	r4, r6
 8001834:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001836:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 800183a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183c:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183e:	684a      	ldr	r2, [r1, #4]
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	fa02 f20e 	lsl.w	r2, r2, lr
 8001848:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800184a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184c:	684a      	ldr	r2, [r1, #4]
 800184e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001852:	d0a8      	beq.n	80017a6 <HAL_GPIO_Init+0x76>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001854:	2200      	movs	r2, #0
 8001856:	9201      	str	r2, [sp, #4]
 8001858:	4a25      	ldr	r2, [pc, #148]	; (80018f0 <HAL_GPIO_Init+0x1c0>)
 800185a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800185c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001860:	6454      	str	r4, [r2, #68]	; 0x44
 8001862:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001864:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001868:	9201      	str	r2, [sp, #4]
 800186a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800186c:	089c      	lsrs	r4, r3, #2
 800186e:	1ca5      	adds	r5, r4, #2
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <HAL_GPIO_Init+0x1b8>)
 8001872:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001876:	f003 0203 	and.w	r2, r3, #3
 800187a:	0095      	lsls	r5, r2, #2
 800187c:	220f      	movs	r2, #15
 800187e:	40aa      	lsls	r2, r5
 8001880:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <HAL_GPIO_Init+0x1c4>)
 8001886:	4290      	cmp	r0, r2
 8001888:	f43f af58 	beq.w	800173c <HAL_GPIO_Init+0xc>
 800188c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001890:	4290      	cmp	r0, r2
 8001892:	d01a      	beq.n	80018ca <HAL_GPIO_Init+0x19a>
 8001894:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001898:	4290      	cmp	r0, r2
 800189a:	d018      	beq.n	80018ce <HAL_GPIO_Init+0x19e>
 800189c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a0:	4290      	cmp	r0, r2
 80018a2:	d016      	beq.n	80018d2 <HAL_GPIO_Init+0x1a2>
 80018a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018a8:	4290      	cmp	r0, r2
 80018aa:	d014      	beq.n	80018d6 <HAL_GPIO_Init+0x1a6>
 80018ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018b0:	4290      	cmp	r0, r2
 80018b2:	d012      	beq.n	80018da <HAL_GPIO_Init+0x1aa>
 80018b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018b8:	4290      	cmp	r0, r2
 80018ba:	d010      	beq.n	80018de <HAL_GPIO_Init+0x1ae>
 80018bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018c0:	4290      	cmp	r0, r2
 80018c2:	f43f af39 	beq.w	8001738 <HAL_GPIO_Init+0x8>
 80018c6:	2208      	movs	r2, #8
 80018c8:	e739      	b.n	800173e <HAL_GPIO_Init+0xe>
 80018ca:	2201      	movs	r2, #1
 80018cc:	e737      	b.n	800173e <HAL_GPIO_Init+0xe>
 80018ce:	2202      	movs	r2, #2
 80018d0:	e735      	b.n	800173e <HAL_GPIO_Init+0xe>
 80018d2:	2203      	movs	r2, #3
 80018d4:	e733      	b.n	800173e <HAL_GPIO_Init+0xe>
 80018d6:	2204      	movs	r2, #4
 80018d8:	e731      	b.n	800173e <HAL_GPIO_Init+0xe>
 80018da:	2205      	movs	r2, #5
 80018dc:	e72f      	b.n	800173e <HAL_GPIO_Init+0xe>
 80018de:	2206      	movs	r2, #6
 80018e0:	e72d      	b.n	800173e <HAL_GPIO_Init+0xe>
      }
    }
  }
}
 80018e2:	b003      	add	sp, #12
 80018e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40013c00 	.word	0x40013c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f8:	b10a      	cbz	r2, 80018fe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fa:	6181      	str	r1, [r0, #24]
 80018fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018fe:	0409      	lsls	r1, r1, #16
 8001900:	6181      	str	r1, [r0, #24]
  }
}
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001904:	6943      	ldr	r3, [r0, #20]
 8001906:	ea31 0303 	bics.w	r3, r1, r3
 800190a:	d001      	beq.n	8001910 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800190c:	6181      	str	r1, [r0, #24]
  }
}
 800190e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001910:	0409      	lsls	r1, r1, #16
 8001912:	6181      	str	r1, [r0, #24]
 8001914:	4770      	bx	lr
	...

08001918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	b082      	sub	sp, #8
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800191c:	4604      	mov	r4, r0
 800191e:	2800      	cmp	r0, #0
 8001920:	f000 81d7 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x3ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001924:	6803      	ldr	r3, [r0, #0]
 8001926:	f013 0f01 	tst.w	r3, #1
 800192a:	d03b      	beq.n	80019a4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800192c:	4b9f      	ldr	r3, [pc, #636]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b04      	cmp	r3, #4
 8001936:	d02c      	beq.n	8001992 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001938:	4b9c      	ldr	r3, [pc, #624]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001940:	2b08      	cmp	r3, #8
 8001942:	d021      	beq.n	8001988 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001944:	6863      	ldr	r3, [r4, #4]
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194a:	d04f      	beq.n	80019ec <HAL_RCC_OscConfig+0xd4>
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001950:	d052      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe0>
 8001952:	4b96      	ldr	r3, [pc, #600]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001962:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001964:	6863      	ldr	r3, [r4, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d050      	beq.n	8001a0c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fcef 	bl	800134c <HAL_GetTick>
 800196e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001970:	4b8e      	ldr	r3, [pc, #568]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001978:	d114      	bne.n	80019a4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800197a:	f7ff fce7 	bl	800134c <HAL_GetTick>
 800197e:	1b40      	subs	r0, r0, r5
 8001980:	2864      	cmp	r0, #100	; 0x64
 8001982:	d9f5      	bls.n	8001970 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001984:	2003      	movs	r0, #3
 8001986:	e1a5      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001988:	4b88      	ldr	r3, [pc, #544]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001990:	d0d8      	beq.n	8001944 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	4b86      	ldr	r3, [pc, #536]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800199a:	d003      	beq.n	80019a4 <HAL_RCC_OscConfig+0x8c>
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 819a 	beq.w	8001cd8 <HAL_RCC_OscConfig+0x3c0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	f013 0f02 	tst.w	r3, #2
 80019aa:	d054      	beq.n	8001a56 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ac:	4b7f      	ldr	r3, [pc, #508]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f013 0f0c 	tst.w	r3, #12
 80019b4:	d03e      	beq.n	8001a34 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d033      	beq.n	8001a2a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c2:	68e3      	ldr	r3, [r4, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d068      	beq.n	8001a9a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b79      	ldr	r3, [pc, #484]	; (8001bb0 <HAL_RCC_OscConfig+0x298>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff fcbd 	bl	800134c <HAL_GetTick>
 80019d2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	4b75      	ldr	r3, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f013 0f02 	tst.w	r3, #2
 80019dc:	d154      	bne.n	8001a88 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff fcb5 	bl	800134c <HAL_GetTick>
 80019e2:	1b40      	subs	r0, r0, r5
 80019e4:	2802      	cmp	r0, #2
 80019e6:	d9f5      	bls.n	80019d4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80019e8:	2003      	movs	r0, #3
 80019ea:	e173      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ec:	4a6f      	ldr	r2, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e7b5      	b.n	8001964 <HAL_RCC_OscConfig+0x4c>
 80019f8:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	e7ab      	b.n	8001964 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fc9e 	bl	800134c <HAL_GetTick>
 8001a10:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a1a:	d0c3      	beq.n	80019a4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fc96 	bl	800134c <HAL_GetTick>
 8001a20:	1b40      	subs	r0, r0, r5
 8001a22:	2864      	cmp	r0, #100	; 0x64
 8001a24:	d9f5      	bls.n	8001a12 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8001a26:	2003      	movs	r0, #3
 8001a28:	e154      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b60      	ldr	r3, [pc, #384]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001a32:	d1c6      	bne.n	80019c2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a34:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f013 0f02 	tst.w	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_OscConfig+0x12e>
 8001a3e:	68e3      	ldr	r3, [r4, #12]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	f040 814b 	bne.w	8001cdc <HAL_RCC_OscConfig+0x3c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	4a59      	ldr	r2, [pc, #356]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001a48:	6813      	ldr	r3, [r2, #0]
 8001a4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a4e:	6921      	ldr	r1, [r4, #16]
 8001a50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a54:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	f013 0f08 	tst.w	r3, #8
 8001a5c:	d042      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a5e:	6963      	ldr	r3, [r4, #20]
 8001a60:	b36b      	cbz	r3, 8001abe <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a62:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_OscConfig+0x298>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fc6f 	bl	800134c <HAL_GetTick>
 8001a6e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a74:	f013 0f02 	tst.w	r3, #2
 8001a78:	d134      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fc67 	bl	800134c <HAL_GetTick>
 8001a7e:	1b40      	subs	r0, r0, r5
 8001a80:	2802      	cmp	r0, #2
 8001a82:	d9f5      	bls.n	8001a70 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001a84:	2003      	movs	r0, #3
 8001a86:	e125      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001a8a:	6813      	ldr	r3, [r2, #0]
 8001a8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a90:	6921      	ldr	r1, [r4, #16]
 8001a92:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e7dd      	b.n	8001a56 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8001a9a:	4b45      	ldr	r3, [pc, #276]	; (8001bb0 <HAL_RCC_OscConfig+0x298>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fc54 	bl	800134c <HAL_GetTick>
 8001aa4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f013 0f02 	tst.w	r3, #2
 8001aae:	d0d2      	beq.n	8001a56 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc4c 	bl	800134c <HAL_GetTick>
 8001ab4:	1b40      	subs	r0, r0, r5
 8001ab6:	2802      	cmp	r0, #2
 8001ab8:	d9f5      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001aba:	2003      	movs	r0, #3
 8001abc:	e10a      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abe:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_RCC_OscConfig+0x298>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fc41 	bl	800134c <HAL_GetTick>
 8001aca:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad0:	f013 0f02 	tst.w	r3, #2
 8001ad4:	d006      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fc39 	bl	800134c <HAL_GetTick>
 8001ada:	1b40      	subs	r0, r0, r5
 8001adc:	2802      	cmp	r0, #2
 8001ade:	d9f5      	bls.n	8001acc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	e0f7      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	f013 0f04 	tst.w	r3, #4
 8001aea:	d077      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aec:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001af4:	d133      	bne.n	8001b5e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b0e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b10:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <HAL_RCC_OscConfig+0x29c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b18:	d023      	beq.n	8001b62 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1a:	68a3      	ldr	r3, [r4, #8]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d034      	beq.n	8001b8a <HAL_RCC_OscConfig+0x272>
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d038      	beq.n	8001b96 <HAL_RCC_OscConfig+0x27e>
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	671a      	str	r2, [r3, #112]	; 0x70
 8001b2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b30:	f022 0204 	bic.w	r2, r2, #4
 8001b34:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b36:	68a3      	ldr	r3, [r4, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d03d      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fc06 	bl	800134c <HAL_GetTick>
 8001b40:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	f013 0f02 	tst.w	r3, #2
 8001b4a:	d146      	bne.n	8001bda <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fbfe 	bl	800134c <HAL_GetTick>
 8001b50:	1b80      	subs	r0, r0, r6
 8001b52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b56:	4298      	cmp	r0, r3
 8001b58:	d9f3      	bls.n	8001b42 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	e0ba      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2500      	movs	r5, #0
 8001b60:	e7d6      	b.n	8001b10 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_RCC_OscConfig+0x29c>)
 8001b64:	6813      	ldr	r3, [r2, #0]
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fbee 	bl	800134c <HAL_GetTick>
 8001b70:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <HAL_RCC_OscConfig+0x29c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b7a:	d1ce      	bne.n	8001b1a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7c:	f7ff fbe6 	bl	800134c <HAL_GetTick>
 8001b80:	1b80      	subs	r0, r0, r6
 8001b82:	2802      	cmp	r0, #2
 8001b84:	d9f5      	bls.n	8001b72 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8001b86:	2003      	movs	r0, #3
 8001b88:	e0a4      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8a:	4a08      	ldr	r2, [pc, #32]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001b8c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	e7cf      	b.n	8001b36 <HAL_RCC_OscConfig+0x21e>
 8001b96:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_OscConfig+0x294>)
 8001b98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b9a:	f042 0204 	orr.w	r2, r2, #4
 8001b9e:	671a      	str	r2, [r3, #112]	; 0x70
 8001ba0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	671a      	str	r2, [r3, #112]	; 0x70
 8001ba8:	e7c5      	b.n	8001b36 <HAL_RCC_OscConfig+0x21e>
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	42470000 	.word	0x42470000
 8001bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fbc8 	bl	800134c <HAL_GetTick>
 8001bbc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <HAL_RCC_OscConfig+0x3e4>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	f013 0f02 	tst.w	r3, #2
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fbc0 	bl	800134c <HAL_GetTick>
 8001bcc:	1b80      	subs	r0, r0, r6
 8001bce:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d9f3      	bls.n	8001bbe <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	e07c      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bda:	b9e5      	cbnz	r5, 8001c16 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bdc:	69a3      	ldr	r3, [r4, #24]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d07e      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001be2:	4a46      	ldr	r2, [pc, #280]	; (8001cfc <HAL_RCC_OscConfig+0x3e4>)
 8001be4:	6892      	ldr	r2, [r2, #8]
 8001be6:	f002 020c 	and.w	r2, r2, #12
 8001bea:	2a08      	cmp	r2, #8
 8001bec:	d051      	beq.n	8001c92 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d017      	beq.n	8001c22 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x3e8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fba8 	bl	800134c <HAL_GetTick>
 8001bfc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <HAL_RCC_OscConfig+0x3e4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c06:	d042      	beq.n	8001c8e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff fba0 	bl	800134c <HAL_GetTick>
 8001c0c:	1b00      	subs	r0, r0, r4
 8001c0e:	2802      	cmp	r0, #2
 8001c10:	d9f5      	bls.n	8001bfe <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001c12:	2003      	movs	r0, #3
 8001c14:	e05e      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c16:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <HAL_RCC_OscConfig+0x3e4>)
 8001c18:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c20:	e7dc      	b.n	8001bdc <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_RCC_OscConfig+0x3e8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c28:	f7ff fb90 	bl	800134c <HAL_GetTick>
 8001c2c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <HAL_RCC_OscConfig+0x3e4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c36:	d006      	beq.n	8001c46 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff fb88 	bl	800134c <HAL_GetTick>
 8001c3c:	1b40      	subs	r0, r0, r5
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	d9f5      	bls.n	8001c2e <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8001c42:	2003      	movs	r0, #3
 8001c44:	e046      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c46:	69e3      	ldr	r3, [r4, #28]
 8001c48:	6a22      	ldr	r2, [r4, #32]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c4e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001c52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001c54:	0852      	lsrs	r2, r2, #1
 8001c56:	3a01      	subs	r2, #1
 8001c58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001c5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c5e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c62:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <HAL_RCC_OscConfig+0x3e4>)
 8001c64:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_RCC_OscConfig+0x3e8>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fb6e 	bl	800134c <HAL_GetTick>
 8001c70:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_RCC_OscConfig+0x3e4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff fb66 	bl	800134c <HAL_GetTick>
 8001c80:	1b00      	subs	r0, r0, r4
 8001c82:	2802      	cmp	r0, #2
 8001c84:	d9f5      	bls.n	8001c72 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8001c86:	2003      	movs	r0, #3
 8001c88:	e024      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	e022      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e020      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d026      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x3cc>
        pll_config = RCC->PLLCFGR;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_OscConfig+0x3e4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001c9e:	69e2      	ldr	r2, [r4, #28]
 8001ca0:	4291      	cmp	r1, r2
 8001ca2:	d121      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ca4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ca8:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	428a      	cmp	r2, r1
 8001cac:	d11e      	bne.n	8001cec <HAL_RCC_OscConfig+0x3d4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cae:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	428a      	cmp	r2, r1
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	d117      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3dc>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001cc4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001cc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d114      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x3e0>
  return HAL_OK;
 8001cce:	2000      	movs	r0, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
    return HAL_ERROR;
 8001cd2:	2001      	movs	r0, #1
}
 8001cd4:	b002      	add	sp, #8
 8001cd6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001cd8:	2001      	movs	r0, #1
 8001cda:	e7fb      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
        return HAL_ERROR;
 8001cdc:	2001      	movs	r0, #1
 8001cde:	e7f9      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
  return HAL_OK;
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	e7f7      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
        return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	e7f5      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
          return HAL_ERROR;
 8001ce8:	2001      	movs	r0, #1
 8001cea:	e7f3      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
 8001cec:	2001      	movs	r0, #1
 8001cee:	e7f1      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e7ef      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	e7ed      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	e7eb      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3bc>
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	42470000 	.word	0x42470000

08001d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d057      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xbe>
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d157      	bne.n	8001dc6 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d16:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d24:	d02a      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001d2e:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001d32:	ebb1 000c 	subs.w	r0, r1, ip
 8001d36:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001d3a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001d3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d42:	0181      	lsls	r1, r0, #6
 8001d44:	1a09      	subs	r1, r1, r0
 8001d46:	eb63 030e 	sbc.w	r3, r3, lr
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d50:	00c9      	lsls	r1, r1, #3
 8001d52:	eb11 0c0c 	adds.w	ip, r1, ip
 8001d56:	f143 0300 	adc.w	r3, r3, #0
 8001d5a:	0259      	lsls	r1, r3, #9
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8001d62:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8001d66:	f7fe fab9 	bl	80002dc <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001d72:	3301      	adds	r3, #1
 8001d74:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001d76:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001d7a:	e025      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8001d84:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8001d88:	ebb1 000c 	subs.w	r0, r1, ip
 8001d8c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8001d90:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8001d94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d98:	0181      	lsls	r1, r0, #6
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	eb63 030e 	sbc.w	r3, r3, lr
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001da6:	00c9      	lsls	r1, r1, #3
 8001da8:	eb11 0c0c 	adds.w	ip, r1, ip
 8001dac:	f143 0300 	adc.w	r3, r3, #0
 8001db0:	0299      	lsls	r1, r3, #10
 8001db2:	2300      	movs	r3, #0
 8001db4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8001db8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8001dbc:	f7fe fa8e 	bl	80002dc <__aeabi_uldivmod>
 8001dc0:	e7d3      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc6:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001dc8:	bd08      	pop	{r3, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	00f42400 	.word	0x00f42400

08001dd8 <HAL_RCC_ClockConfig>:
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001ddc:	4604      	mov	r4, r0
 8001dde:	2800      	cmp	r0, #0
 8001de0:	f000 8098 	beq.w	8001f14 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <HAL_RCC_ClockConfig+0x14c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	428b      	cmp	r3, r1
 8001dee:	d208      	bcs.n	8001e02 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df0:	b2cb      	uxtb	r3, r1
 8001df2:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <HAL_RCC_ClockConfig+0x14c>)
 8001df4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	f040 808b 	bne.w	8001f18 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	f013 0f02 	tst.w	r3, #2
 8001e08:	d017      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e0a:	f013 0f04 	tst.w	r3, #4
 8001e0e:	d004      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4a45      	ldr	r2, [pc, #276]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e12:	6893      	ldr	r3, [r2, #8]
 8001e14:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e18:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	f013 0f08 	tst.w	r3, #8
 8001e20:	d004      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e22:	4a41      	ldr	r2, [pc, #260]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e24:	6893      	ldr	r3, [r2, #8]
 8001e26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e2a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4a3e      	ldr	r2, [pc, #248]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e2e:	6893      	ldr	r3, [r2, #8]
 8001e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e34:	68a1      	ldr	r1, [r4, #8]
 8001e36:	430b      	orrs	r3, r1
 8001e38:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	f013 0f01 	tst.w	r3, #1
 8001e40:	d032      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d021      	beq.n	8001e8c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e48:	1e9a      	subs	r2, r3, #2
 8001e4a:	2a01      	cmp	r2, #1
 8001e4c:	d925      	bls.n	8001e9a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4a36      	ldr	r2, [pc, #216]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	f012 0f02 	tst.w	r2, #2
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e58:	4933      	ldr	r1, [pc, #204]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e5a:	688a      	ldr	r2, [r1, #8]
 8001e5c:	f022 0203 	bic.w	r2, r2, #3
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001e64:	f7ff fa72 	bl	800134c <HAL_GetTick>
 8001e68:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	6862      	ldr	r2, [r4, #4]
 8001e74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e78:	d016      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e7a:	f7ff fa67 	bl	800134c <HAL_GetTick>
 8001e7e:	1b80      	subs	r0, r0, r6
 8001e80:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e84:	4298      	cmp	r0, r3
 8001e86:	d9f0      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8001e88:	2003      	movs	r0, #3
 8001e8a:	e042      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8c:	4a26      	ldr	r2, [pc, #152]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001e94:	d1e0      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001e96:	2001      	movs	r0, #1
 8001e98:	e03b      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ea2:	d1d9      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	e034      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <HAL_RCC_ClockConfig+0x14c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	42ab      	cmp	r3, r5
 8001eb2:	d907      	bls.n	8001ec4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb4:	b2ea      	uxtb	r2, r5
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_RCC_ClockConfig+0x14c>)
 8001eb8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	42ab      	cmp	r3, r5
 8001ec2:	d12d      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	f013 0f04 	tst.w	r3, #4
 8001eca:	d006      	beq.n	8001eda <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ecc:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001ece:	6893      	ldr	r3, [r2, #8]
 8001ed0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001ed4:	68e1      	ldr	r1, [r4, #12]
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	f013 0f08 	tst.w	r3, #8
 8001ee0:	d007      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001ee4:	6893      	ldr	r3, [r2, #8]
 8001ee6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001eea:	6921      	ldr	r1, [r4, #16]
 8001eec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ef0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ef2:	f7ff ff07 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_RCC_ClockConfig+0x150>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_RCC_ClockConfig+0x154>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
 8001f02:	40d8      	lsrs	r0, r3
 8001f04:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_ClockConfig+0x158>)
 8001f06:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_RCC_ClockConfig+0x15c>)
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	f7ff f9d6 	bl	80012bc <HAL_InitTick>
  return HAL_OK;
 8001f10:	2000      	movs	r0, #0
}
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
 8001f16:	e7fc      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001f18:	2001      	movs	r0, #1
 8001f1a:	e7fa      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	e7f8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8001f20:	2001      	movs	r0, #1
 8001f22:	e7f6      	b.n	8001f12 <HAL_RCC_ClockConfig+0x13a>
 8001f24:	40023c00 	.word	0x40023c00
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	08003504 	.word	0x08003504
 8001f30:	20000484 	.word	0x20000484
 8001f34:	20000480 	.word	0x20000480

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001f38:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x8>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000484 	.word	0x20000484

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f46:	f7ff fff7 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f4a:	4b04      	ldr	r3, [pc, #16]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001f52:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f56:	40d8      	lsrs	r0, r3
 8001f58:	bd08      	pop	{r3, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	08003514 	.word	0x08003514

08001f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f64:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f66:	f7ff ffe7 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001f72:	4a03      	ldr	r2, [pc, #12]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f74:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f76:	40d8      	lsrs	r0, r3
 8001f78:	bd08      	pop	{r3, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08003514 	.word	0x08003514

08001f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f84:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f86:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f88:	6a04      	ldr	r4, [r0, #32]
 8001f8a:	f024 0401 	bic.w	r4, r4, #1
 8001f8e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f90:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f92:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f96:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f9a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001f9e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fa0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fa2:	6203      	str	r3, [r0, #32]
}
 8001fa4:	bc10      	pop	{r4}
 8001fa6:	4770      	bx	lr

08001fa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fa8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001faa:	6a04      	ldr	r4, [r0, #32]
 8001fac:	f024 0410 	bic.w	r4, r4, #16
 8001fb0:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fb2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fb4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fb6:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fba:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fc2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fc6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fc8:	6203      	str	r3, [r0, #32]
}
 8001fca:	bc10      	pop	{r4}
 8001fcc:	4770      	bx	lr

08001fce <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fce:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fda:	6083      	str	r3, [r0, #8]
}
 8001fdc:	4770      	bx	lr

08001fde <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe4:	6802      	ldr	r2, [r0, #0]
 8001fe6:	6893      	ldr	r3, [r2, #8]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fec:	2b06      	cmp	r3, #6
 8001fee:	d003      	beq.n	8001ff8 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8001ff0:	6813      	ldr	r3, [r2, #0]
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001ffe:	2000      	movs	r0, #0
 8002000:	4770      	bx	lr

08002002 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8002008:	6803      	ldr	r3, [r0, #0]
 800200a:	6a19      	ldr	r1, [r3, #32]
 800200c:	f241 1211 	movw	r2, #4369	; 0x1111
 8002010:	4211      	tst	r1, r2
 8002012:	d108      	bne.n	8002026 <HAL_TIM_Base_Stop+0x24>
 8002014:	6a19      	ldr	r1, [r3, #32]
 8002016:	f240 4244 	movw	r2, #1092	; 0x444
 800201a:	4211      	tst	r1, r2
 800201c:	d103      	bne.n	8002026 <HAL_TIM_Base_Stop+0x24>
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002026:	2301      	movs	r3, #1
 8002028:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800202c:	2000      	movs	r0, #0
 800202e:	4770      	bx	lr

08002030 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002030:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002032:	4a30      	ldr	r2, [pc, #192]	; (80020f4 <TIM_Base_SetConfig+0xc4>)
 8002034:	4290      	cmp	r0, r2
 8002036:	d012      	beq.n	800205e <TIM_Base_SetConfig+0x2e>
 8002038:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800203c:	d00f      	beq.n	800205e <TIM_Base_SetConfig+0x2e>
 800203e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002042:	4290      	cmp	r0, r2
 8002044:	d00b      	beq.n	800205e <TIM_Base_SetConfig+0x2e>
 8002046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800204a:	4290      	cmp	r0, r2
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0x2e>
 800204e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002052:	4290      	cmp	r0, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0x2e>
 8002056:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800205a:	4290      	cmp	r0, r2
 800205c:	d103      	bne.n	8002066 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800205e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002062:	684a      	ldr	r2, [r1, #4]
 8002064:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	4a23      	ldr	r2, [pc, #140]	; (80020f4 <TIM_Base_SetConfig+0xc4>)
 8002068:	4290      	cmp	r0, r2
 800206a:	d02a      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 800206c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002070:	d027      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 8002072:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002076:	4290      	cmp	r0, r2
 8002078:	d023      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 800207a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800207e:	4290      	cmp	r0, r2
 8002080:	d01f      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 8002082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002086:	4290      	cmp	r0, r2
 8002088:	d01b      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 800208a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800208e:	4290      	cmp	r0, r2
 8002090:	d017      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 8002092:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002096:	4290      	cmp	r0, r2
 8002098:	d013      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 800209a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800209e:	4290      	cmp	r0, r2
 80020a0:	d00f      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 80020a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a6:	4290      	cmp	r0, r2
 80020a8:	d00b      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 80020aa:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80020ae:	4290      	cmp	r0, r2
 80020b0:	d007      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 80020b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d003      	beq.n	80020c2 <TIM_Base_SetConfig+0x92>
 80020ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020be:	4290      	cmp	r0, r2
 80020c0:	d103      	bne.n	80020ca <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020c6:	68ca      	ldr	r2, [r1, #12]
 80020c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ce:	694a      	ldr	r2, [r1, #20]
 80020d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80020d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d4:	688b      	ldr	r3, [r1, #8]
 80020d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80020d8:	680b      	ldr	r3, [r1, #0]
 80020da:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020dc:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <TIM_Base_SetConfig+0xc4>)
 80020de:	4298      	cmp	r0, r3
 80020e0:	d003      	beq.n	80020ea <TIM_Base_SetConfig+0xba>
 80020e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e6:	4298      	cmp	r0, r3
 80020e8:	d101      	bne.n	80020ee <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 80020ea:	690b      	ldr	r3, [r1, #16]
 80020ec:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80020ee:	2301      	movs	r3, #1
 80020f0:	6143      	str	r3, [r0, #20]
}
 80020f2:	4770      	bx	lr
 80020f4:	40010000 	.word	0x40010000

080020f8 <HAL_TIM_Base_Init>:
{
 80020f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020fa:	4604      	mov	r4, r0
 80020fc:	b1a0      	cbz	r0, 8002128 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002102:	b163      	cbz	r3, 800211e <HAL_TIM_Base_Init+0x26>
  htim->State = HAL_TIM_STATE_BUSY;
 8002104:	2302      	movs	r3, #2
 8002106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800210a:	4621      	mov	r1, r4
 800210c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002110:	f7ff ff8e 	bl	8002030 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002114:	2301      	movs	r3, #1
 8002116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800211a:	2000      	movs	r0, #0
}
 800211c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800211e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002122:	f7fe feb3 	bl	8000e8c <HAL_TIM_Base_MspInit>
 8002126:	e7ed      	b.n	8002104 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002128:	2001      	movs	r0, #1
 800212a:	e7f7      	b.n	800211c <HAL_TIM_Base_Init+0x24>

0800212c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800212c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800212e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002130:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002134:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002138:	430a      	orrs	r2, r1
 800213a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800213e:	6082      	str	r2, [r0, #8]
}
 8002140:	bc10      	pop	{r4}
 8002142:	4770      	bx	lr

08002144 <HAL_TIM_ConfigClockSource>:
{
 8002144:	b510      	push	{r4, lr}
 8002146:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002148:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d064      	beq.n	800221a <HAL_TIM_ConfigClockSource+0xd6>
 8002150:	2301      	movs	r3, #1
 8002152:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800215c:	6802      	ldr	r2, [r0, #0]
 800215e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002160:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002164:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002168:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800216a:	680b      	ldr	r3, [r1, #0]
 800216c:	2b60      	cmp	r3, #96	; 0x60
 800216e:	d040      	beq.n	80021f2 <HAL_TIM_ConfigClockSource+0xae>
 8002170:	d822      	bhi.n	80021b8 <HAL_TIM_ConfigClockSource+0x74>
 8002172:	2b40      	cmp	r3, #64	; 0x40
 8002174:	d047      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0xc2>
 8002176:	d90b      	bls.n	8002190 <HAL_TIM_ConfigClockSource+0x4c>
 8002178:	2b50      	cmp	r3, #80	; 0x50
 800217a:	d10e      	bne.n	800219a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800217c:	68ca      	ldr	r2, [r1, #12]
 800217e:	6849      	ldr	r1, [r1, #4]
 8002180:	6800      	ldr	r0, [r0, #0]
 8002182:	f7ff feff 	bl	8001f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002186:	2150      	movs	r1, #80	; 0x50
 8002188:	6820      	ldr	r0, [r4, #0]
 800218a:	f7ff ff20 	bl	8001fce <TIM_ITRx_SetConfig>
      break;
 800218e:	e004      	b.n	800219a <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8002190:	2b20      	cmp	r3, #32
 8002192:	d00c      	beq.n	80021ae <HAL_TIM_ConfigClockSource+0x6a>
 8002194:	d908      	bls.n	80021a8 <HAL_TIM_ConfigClockSource+0x64>
 8002196:	2b30      	cmp	r3, #48	; 0x30
 8002198:	d009      	beq.n	80021ae <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 800219a:	2301      	movs	r3, #1
 800219c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80021a6:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80021a8:	b10b      	cbz	r3, 80021ae <HAL_TIM_ConfigClockSource+0x6a>
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d1f5      	bne.n	800219a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021ae:	4619      	mov	r1, r3
 80021b0:	6820      	ldr	r0, [r4, #0]
 80021b2:	f7ff ff0c 	bl	8001fce <TIM_ITRx_SetConfig>
      break;
 80021b6:	e7f0      	b.n	800219a <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80021b8:	2b70      	cmp	r3, #112	; 0x70
 80021ba:	d00e      	beq.n	80021da <HAL_TIM_ConfigClockSource+0x96>
 80021bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021c0:	d1eb      	bne.n	800219a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 80021c2:	68cb      	ldr	r3, [r1, #12]
 80021c4:	684a      	ldr	r2, [r1, #4]
 80021c6:	6889      	ldr	r1, [r1, #8]
 80021c8:	6800      	ldr	r0, [r0, #0]
 80021ca:	f7ff ffaf 	bl	800212c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021ce:	6822      	ldr	r2, [r4, #0]
 80021d0:	6893      	ldr	r3, [r2, #8]
 80021d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d6:	6093      	str	r3, [r2, #8]
      break;
 80021d8:	e7df      	b.n	800219a <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 80021da:	68cb      	ldr	r3, [r1, #12]
 80021dc:	684a      	ldr	r2, [r1, #4]
 80021de:	6889      	ldr	r1, [r1, #8]
 80021e0:	6800      	ldr	r0, [r0, #0]
 80021e2:	f7ff ffa3 	bl	800212c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80021ee:	6093      	str	r3, [r2, #8]
      break;
 80021f0:	e7d3      	b.n	800219a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021f2:	68ca      	ldr	r2, [r1, #12]
 80021f4:	6849      	ldr	r1, [r1, #4]
 80021f6:	6800      	ldr	r0, [r0, #0]
 80021f8:	f7ff fed6 	bl	8001fa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021fc:	2160      	movs	r1, #96	; 0x60
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	f7ff fee5 	bl	8001fce <TIM_ITRx_SetConfig>
      break;
 8002204:	e7c9      	b.n	800219a <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002206:	68ca      	ldr	r2, [r1, #12]
 8002208:	6849      	ldr	r1, [r1, #4]
 800220a:	6800      	ldr	r0, [r0, #0]
 800220c:	f7ff feba 	bl	8001f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	6820      	ldr	r0, [r4, #0]
 8002214:	f7ff fedb 	bl	8001fce <TIM_ITRx_SetConfig>
      break;
 8002218:	e7bf      	b.n	800219a <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800221a:	2002      	movs	r0, #2
 800221c:	e7c3      	b.n	80021a6 <HAL_TIM_ConfigClockSource+0x62>
	...

08002220 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002220:	b410      	push	{r4}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002222:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002226:	2b01      	cmp	r3, #1
 8002228:	d03b      	beq.n	80022a2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800222a:	2301      	movs	r3, #1
 800222c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	2302      	movs	r3, #2
 8002232:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002236:	6803      	ldr	r3, [r0, #0]
 8002238:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800223a:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800223c:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002240:	680a      	ldr	r2, [r1, #0]
 8002242:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002246:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002248:	6803      	ldr	r3, [r0, #0]
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d01a      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002254:	d017      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002256:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800225e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002262:	4293      	cmp	r3, r2
 8002264:	d00f      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002266:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800226e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002276:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800227e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002282:	4293      	cmp	r3, r2
 8002284:	d104      	bne.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002286:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800228a:	684a      	ldr	r2, [r1, #4]
 800228c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800228e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002290:	2301      	movs	r3, #1
 8002292:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002296:	2300      	movs	r3, #0
 8002298:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800229c:	4618      	mov	r0, r3
}
 800229e:	bc10      	pop	{r4}
 80022a0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80022a2:	2002      	movs	r0, #2
 80022a4:	e7fb      	b.n	800229e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80022a6:	bf00      	nop
 80022a8:	40010000 	.word	0x40010000

080022ac <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022ac:	6802      	ldr	r2, [r0, #0]
 80022ae:	68d3      	ldr	r3, [r2, #12]
 80022b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80022b4:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022b6:	6802      	ldr	r2, [r0, #0]
 80022b8:	6953      	ldr	r3, [r2, #20]
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	2320      	movs	r3, #32
 80022c2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80022c6:	4770      	bx	lr

080022c8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022c8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b21      	cmp	r3, #33	; 0x21
 80022d0:	d001      	beq.n	80022d6 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80022d2:	2002      	movs	r0, #2
  }
}
 80022d4:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022d6:	6883      	ldr	r3, [r0, #8]
 80022d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022dc:	d017      	beq.n	800230e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022de:	6a03      	ldr	r3, [r0, #32]
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	6202      	str	r2, [r0, #32]
 80022e4:	781a      	ldrb	r2, [r3, #0]
 80022e6:	6803      	ldr	r3, [r0, #0]
 80022e8:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80022ea:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	84c3      	strh	r3, [r0, #38]	; 0x26
 80022f4:	b94b      	cbnz	r3, 800230a <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022f6:	6802      	ldr	r2, [r0, #0]
 80022f8:	68d3      	ldr	r3, [r2, #12]
 80022fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022fe:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002300:	6802      	ldr	r2, [r0, #0]
 8002302:	68d3      	ldr	r3, [r2, #12]
 8002304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002308:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 800230a:	2000      	movs	r0, #0
 800230c:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800230e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	6802      	ldr	r2, [r0, #0]
 8002314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002318:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800231a:	6903      	ldr	r3, [r0, #16]
 800231c:	b91b      	cbnz	r3, 8002326 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 800231e:	6a03      	ldr	r3, [r0, #32]
 8002320:	3302      	adds	r3, #2
 8002322:	6203      	str	r3, [r0, #32]
 8002324:	e7e1      	b.n	80022ea <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8002326:	6a03      	ldr	r3, [r0, #32]
 8002328:	3301      	adds	r3, #1
 800232a:	6203      	str	r3, [r0, #32]
 800232c:	e7dd      	b.n	80022ea <UART_Transmit_IT+0x22>
	...

08002330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002330:	b538      	push	{r3, r4, r5, lr}
 8002332:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002334:	6802      	ldr	r2, [r0, #0]
 8002336:	6913      	ldr	r3, [r2, #16]
 8002338:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800233c:	68c1      	ldr	r1, [r0, #12]
 800233e:	430b      	orrs	r3, r1
 8002340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002342:	6883      	ldr	r3, [r0, #8]
 8002344:	6902      	ldr	r2, [r0, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	6942      	ldr	r2, [r0, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	69c2      	ldr	r2, [r0, #28]
 800234e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002350:	6801      	ldr	r1, [r0, #0]
 8002352:	68cb      	ldr	r3, [r1, #12]
 8002354:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002358:	f023 030c 	bic.w	r3, r3, #12
 800235c:	4313      	orrs	r3, r2
 800235e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002360:	6802      	ldr	r2, [r0, #0]
 8002362:	6953      	ldr	r3, [r2, #20]
 8002364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002368:	6981      	ldr	r1, [r0, #24]
 800236a:	430b      	orrs	r3, r1
 800236c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236e:	69c3      	ldr	r3, [r0, #28]
 8002370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002374:	d035      	beq.n	80023e2 <UART_SetConfig+0xb2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002376:	6803      	ldr	r3, [r0, #0]
 8002378:	4a60      	ldr	r2, [pc, #384]	; (80024fc <UART_SetConfig+0x1cc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	f000 8091 	beq.w	80024a2 <UART_SetConfig+0x172>
 8002380:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002384:	4293      	cmp	r3, r2
 8002386:	f000 808c 	beq.w	80024a2 <UART_SetConfig+0x172>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800238a:	f7ff fddb 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800238e:	2100      	movs	r1, #0
 8002390:	1803      	adds	r3, r0, r0
 8002392:	4149      	adcs	r1, r1
 8002394:	181b      	adds	r3, r3, r0
 8002396:	f141 0100 	adc.w	r1, r1, #0
 800239a:	00c9      	lsls	r1, r1, #3
 800239c:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	1818      	adds	r0, r3, r0
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80023aa:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80023ae:	f141 0100 	adc.w	r1, r1, #0
 80023b2:	f7fd ff93 	bl	80002dc <__aeabi_uldivmod>
 80023b6:	4d52      	ldr	r5, [pc, #328]	; (8002500 <UART_SetConfig+0x1d0>)
 80023b8:	fba5 3200 	umull	r3, r2, r5, r0
 80023bc:	0951      	lsrs	r1, r2, #5
 80023be:	2364      	movs	r3, #100	; 0x64
 80023c0:	fb03 0311 	mls	r3, r3, r1, r0
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	3332      	adds	r3, #50	; 0x32
 80023c8:	fba5 2303 	umull	r2, r3, r5, r3
 80023cc:	095b      	lsrs	r3, r3, #5
 80023ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023d2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	6821      	ldr	r1, [r4, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
    }
  }
}
 80023e0:	e08a      	b.n	80024f8 <UART_SetConfig+0x1c8>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023e2:	6803      	ldr	r3, [r0, #0]
 80023e4:	4a45      	ldr	r2, [pc, #276]	; (80024fc <UART_SetConfig+0x1cc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02f      	beq.n	800244a <UART_SetConfig+0x11a>
 80023ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d02b      	beq.n	800244a <UART_SetConfig+0x11a>
      pclk = HAL_RCC_GetPCLK1Freq();
 80023f2:	f7ff fda7 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023f6:	2300      	movs	r3, #0
 80023f8:	1802      	adds	r2, r0, r0
 80023fa:	eb43 0103 	adc.w	r1, r3, r3
 80023fe:	1812      	adds	r2, r2, r0
 8002400:	f141 0100 	adc.w	r1, r1, #0
 8002404:	00c9      	lsls	r1, r1, #3
 8002406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	1810      	adds	r0, r2, r0
 800240e:	f141 0100 	adc.w	r1, r1, #0
 8002412:	6862      	ldr	r2, [r4, #4]
 8002414:	1892      	adds	r2, r2, r2
 8002416:	415b      	adcs	r3, r3
 8002418:	f7fd ff60 	bl	80002dc <__aeabi_uldivmod>
 800241c:	4d38      	ldr	r5, [pc, #224]	; (8002500 <UART_SetConfig+0x1d0>)
 800241e:	fba5 3200 	umull	r3, r2, r5, r0
 8002422:	0951      	lsrs	r1, r2, #5
 8002424:	2364      	movs	r3, #100	; 0x64
 8002426:	fb03 0311 	mls	r3, r3, r1, r0
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	3332      	adds	r3, #50	; 0x32
 800242e:	fba5 2303 	umull	r2, r3, r5, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	005a      	lsls	r2, r3, #1
 8002436:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 800243a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	6821      	ldr	r1, [r4, #0]
 8002444:	4413      	add	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
 8002448:	e056      	b.n	80024f8 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 800244a:	f7ff fd8b 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800244e:	2300      	movs	r3, #0
 8002450:	1802      	adds	r2, r0, r0
 8002452:	eb43 0103 	adc.w	r1, r3, r3
 8002456:	1812      	adds	r2, r2, r0
 8002458:	f141 0100 	adc.w	r1, r1, #0
 800245c:	00c9      	lsls	r1, r1, #3
 800245e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002462:	00d2      	lsls	r2, r2, #3
 8002464:	1810      	adds	r0, r2, r0
 8002466:	f141 0100 	adc.w	r1, r1, #0
 800246a:	6862      	ldr	r2, [r4, #4]
 800246c:	1892      	adds	r2, r2, r2
 800246e:	415b      	adcs	r3, r3
 8002470:	f7fd ff34 	bl	80002dc <__aeabi_uldivmod>
 8002474:	4d22      	ldr	r5, [pc, #136]	; (8002500 <UART_SetConfig+0x1d0>)
 8002476:	fba5 3200 	umull	r3, r2, r5, r0
 800247a:	0951      	lsrs	r1, r2, #5
 800247c:	2364      	movs	r3, #100	; 0x64
 800247e:	fb03 0311 	mls	r3, r3, r1, r0
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	3332      	adds	r3, #50	; 0x32
 8002486:	fba5 2303 	umull	r2, r3, r5, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	005a      	lsls	r2, r3, #1
 800248e:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8002492:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	6821      	ldr	r1, [r4, #0]
 800249c:	4413      	add	r3, r2
 800249e:	608b      	str	r3, [r1, #8]
 80024a0:	e02a      	b.n	80024f8 <UART_SetConfig+0x1c8>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024a2:	f7ff fd5f 	bl	8001f64 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024a6:	2100      	movs	r1, #0
 80024a8:	1803      	adds	r3, r0, r0
 80024aa:	4149      	adcs	r1, r1
 80024ac:	181b      	adds	r3, r3, r0
 80024ae:	f141 0100 	adc.w	r1, r1, #0
 80024b2:	00c9      	lsls	r1, r1, #3
 80024b4:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	1818      	adds	r0, r3, r0
 80024bc:	6863      	ldr	r3, [r4, #4]
 80024be:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80024c2:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80024c6:	f141 0100 	adc.w	r1, r1, #0
 80024ca:	f7fd ff07 	bl	80002dc <__aeabi_uldivmod>
 80024ce:	4d0c      	ldr	r5, [pc, #48]	; (8002500 <UART_SetConfig+0x1d0>)
 80024d0:	fba5 3200 	umull	r3, r2, r5, r0
 80024d4:	0951      	lsrs	r1, r2, #5
 80024d6:	2364      	movs	r3, #100	; 0x64
 80024d8:	fb03 0311 	mls	r3, r3, r1, r0
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	3332      	adds	r3, #50	; 0x32
 80024e0:	fba5 2303 	umull	r2, r3, r5, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024ea:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	6821      	ldr	r1, [r4, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
}
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
 80024fa:	bf00      	nop
 80024fc:	40011000 	.word	0x40011000
 8002500:	51eb851f 	.word	0x51eb851f

08002504 <UART_WaitOnFlagUntilTimeout>:
{
 8002504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002508:	4605      	mov	r5, r0
 800250a:	460f      	mov	r7, r1
 800250c:	4616      	mov	r6, r2
 800250e:	4699      	mov	r9, r3
 8002510:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002514:	682c      	ldr	r4, [r5, #0]
 8002516:	6824      	ldr	r4, [r4, #0]
 8002518:	ea37 0304 	bics.w	r3, r7, r4
 800251c:	bf0c      	ite	eq
 800251e:	f04f 0c01 	moveq.w	ip, #1
 8002522:	f04f 0c00 	movne.w	ip, #0
 8002526:	45b4      	cmp	ip, r6
 8002528:	d11f      	bne.n	800256a <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 800252a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800252e:	d0f1      	beq.n	8002514 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002530:	f1b8 0f00 	cmp.w	r8, #0
 8002534:	d005      	beq.n	8002542 <UART_WaitOnFlagUntilTimeout+0x3e>
 8002536:	f7fe ff09 	bl	800134c <HAL_GetTick>
 800253a:	eba0 0009 	sub.w	r0, r0, r9
 800253e:	4540      	cmp	r0, r8
 8002540:	d9e8      	bls.n	8002514 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002542:	682a      	ldr	r2, [r5, #0]
 8002544:	68d3      	ldr	r3, [r2, #12]
 8002546:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800254a:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254c:	682a      	ldr	r2, [r5, #0]
 800254e:	6953      	ldr	r3, [r2, #20]
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002556:	2320      	movs	r3, #32
 8002558:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800255c:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002560:	2300      	movs	r3, #0
 8002562:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8002566:	2003      	movs	r0, #3
 8002568:	e000      	b.n	800256c <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 800256a:	2000      	movs	r0, #0
}
 800256c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002570 <HAL_UART_Init>:
{
 8002570:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002572:	4604      	mov	r4, r0
 8002574:	b348      	cbz	r0, 80025ca <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800257a:	b30b      	cbz	r3, 80025c0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800257c:	2324      	movs	r3, #36	; 0x24
 800257e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	68d3      	ldr	r3, [r2, #12]
 8002586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800258a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff fecf 	bl	8002330 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002592:	6822      	ldr	r2, [r4, #0]
 8002594:	6913      	ldr	r3, [r2, #16]
 8002596:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800259a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	6953      	ldr	r3, [r2, #20]
 80025a0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80025a4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	68d3      	ldr	r3, [r2, #12]
 80025aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025ae:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	2000      	movs	r0, #0
 80025b2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025b4:	2320      	movs	r3, #32
 80025b6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025ba:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80025be:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80025c0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80025c4:	f7fe fd84 	bl	80010d0 <HAL_UART_MspInit>
 80025c8:	e7d8      	b.n	800257c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
 80025cc:	e7f7      	b.n	80025be <HAL_UART_Init+0x4e>

080025ce <HAL_UART_Transmit>:
{
 80025ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025d2:	b083      	sub	sp, #12
 80025d4:	4604      	mov	r4, r0
 80025d6:	460d      	mov	r5, r1
 80025d8:	4690      	mov	r8, r2
 80025da:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80025dc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d153      	bne.n	800268e <HAL_UART_Transmit+0xc0>
    if ((pData == NULL) || (Size == 0U))
 80025e6:	2900      	cmp	r1, #0
 80025e8:	d055      	beq.n	8002696 <HAL_UART_Transmit+0xc8>
 80025ea:	2a00      	cmp	r2, #0
 80025ec:	d055      	beq.n	800269a <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80025ee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d053      	beq.n	800269e <HAL_UART_Transmit+0xd0>
 80025f6:	2301      	movs	r3, #1
 80025f8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fc:	f04f 0900 	mov.w	r9, #0
 8002600:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002604:	2321      	movs	r3, #33	; 0x21
 8002606:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800260a:	f7fe fe9f 	bl	800134c <HAL_GetTick>
 800260e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002610:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002614:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002618:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800261c:	e010      	b.n	8002640 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800261e:	9600      	str	r6, [sp, #0]
 8002620:	463b      	mov	r3, r7
 8002622:	2200      	movs	r2, #0
 8002624:	2180      	movs	r1, #128	; 0x80
 8002626:	4620      	mov	r0, r4
 8002628:	f7ff ff6c 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 800262c:	2800      	cmp	r0, #0
 800262e:	d138      	bne.n	80026a2 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002630:	882b      	ldrh	r3, [r5, #0]
 8002632:	6822      	ldr	r2, [r4, #0]
 8002634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002638:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800263a:	6923      	ldr	r3, [r4, #16]
 800263c:	b9cb      	cbnz	r3, 8002672 <HAL_UART_Transmit+0xa4>
          pData += 2U;
 800263e:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8002640:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002642:	b29b      	uxth	r3, r3
 8002644:	b1bb      	cbz	r3, 8002676 <HAL_UART_Transmit+0xa8>
      huart->TxXferCount--;
 8002646:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002648:	b292      	uxth	r2, r2
 800264a:	3a01      	subs	r2, #1
 800264c:	b292      	uxth	r2, r2
 800264e:	84e2      	strh	r2, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002650:	68a3      	ldr	r3, [r4, #8]
 8002652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002656:	d0e2      	beq.n	800261e <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002658:	9600      	str	r6, [sp, #0]
 800265a:	463b      	mov	r3, r7
 800265c:	2200      	movs	r2, #0
 800265e:	2180      	movs	r1, #128	; 0x80
 8002660:	4620      	mov	r0, r4
 8002662:	f7ff ff4f 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 8002666:	b9f0      	cbnz	r0, 80026a6 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002668:	f815 2b01 	ldrb.w	r2, [r5], #1
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	e7e6      	b.n	8002640 <HAL_UART_Transmit+0x72>
          pData += 1U;
 8002672:	3501      	adds	r5, #1
 8002674:	e7e4      	b.n	8002640 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002676:	9600      	str	r6, [sp, #0]
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	2140      	movs	r1, #64	; 0x40
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff ff40 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 8002684:	b988      	cbnz	r0, 80026aa <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8002686:	2320      	movs	r3, #32
 8002688:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800268c:	e000      	b.n	8002690 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800268e:	2002      	movs	r0, #2
}
 8002690:	b003      	add	sp, #12
 8002692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8002696:	2001      	movs	r0, #1
 8002698:	e7fa      	b.n	8002690 <HAL_UART_Transmit+0xc2>
 800269a:	2001      	movs	r0, #1
 800269c:	e7f8      	b.n	8002690 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 800269e:	2002      	movs	r0, #2
 80026a0:	e7f6      	b.n	8002690 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80026a2:	2003      	movs	r0, #3
 80026a4:	e7f4      	b.n	8002690 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 80026a6:	2003      	movs	r0, #3
 80026a8:	e7f2      	b.n	8002690 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 80026aa:	2003      	movs	r0, #3
 80026ac:	e7f0      	b.n	8002690 <HAL_UART_Transmit+0xc2>

080026ae <HAL_UART_TxCpltCallback>:
}
 80026ae:	4770      	bx	lr

080026b0 <UART_EndTransmit_IT>:
{
 80026b0:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026b2:	6801      	ldr	r1, [r0, #0]
 80026b4:	68ca      	ldr	r2, [r1, #12]
 80026b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ba:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026bc:	2220      	movs	r2, #32
 80026be:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80026c2:	f7ff fff4 	bl	80026ae <HAL_UART_TxCpltCallback>
}
 80026c6:	2000      	movs	r0, #0
 80026c8:	bd08      	pop	{r3, pc}

080026ca <HAL_UART_RxCpltCallback>:
}
 80026ca:	4770      	bx	lr

080026cc <UART_Receive_IT>:
{
 80026cc:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026ce:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b22      	cmp	r3, #34	; 0x22
 80026d6:	d146      	bne.n	8002766 <UART_Receive_IT+0x9a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026d8:	6883      	ldr	r3, [r0, #8]
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026de:	d00f      	beq.n	8002700 <UART_Receive_IT+0x34>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026e0:	6903      	ldr	r3, [r0, #16]
 80026e2:	bb0b      	cbnz	r3, 8002728 <UART_Receive_IT+0x5c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026e4:	6803      	ldr	r3, [r0, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026ea:	1c59      	adds	r1, r3, #1
 80026ec:	6281      	str	r1, [r0, #40]	; 0x28
 80026ee:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80026f0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80026fa:	b1f3      	cbz	r3, 800273a <UART_Receive_IT+0x6e>
    return HAL_OK;
 80026fc:	2000      	movs	r0, #0
}
 80026fe:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002700:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002702:	6903      	ldr	r3, [r0, #16]
 8002704:	b943      	cbnz	r3, 8002718 <UART_Receive_IT+0x4c>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002706:	6803      	ldr	r3, [r0, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8002710:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002712:	3302      	adds	r3, #2
 8002714:	6283      	str	r3, [r0, #40]	; 0x28
 8002716:	e7eb      	b.n	80026f0 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002718:	6803      	ldr	r3, [r0, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8002720:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002722:	3301      	adds	r3, #1
 8002724:	6283      	str	r3, [r0, #40]	; 0x28
 8002726:	e7e3      	b.n	80026f0 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002728:	6803      	ldr	r3, [r0, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800272e:	1c51      	adds	r1, r2, #1
 8002730:	6281      	str	r1, [r0, #40]	; 0x28
 8002732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002736:	7013      	strb	r3, [r2, #0]
 8002738:	e7da      	b.n	80026f0 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800273a:	6802      	ldr	r2, [r0, #0]
 800273c:	68d3      	ldr	r3, [r2, #12]
 800273e:	f023 0320 	bic.w	r3, r3, #32
 8002742:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002744:	6802      	ldr	r2, [r0, #0]
 8002746:	68d3      	ldr	r3, [r2, #12]
 8002748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800274c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800274e:	6802      	ldr	r2, [r0, #0]
 8002750:	6953      	ldr	r3, [r2, #20]
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002758:	2320      	movs	r3, #32
 800275a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800275e:	f7ff ffb4 	bl	80026ca <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002762:	2000      	movs	r0, #0
 8002764:	e7cb      	b.n	80026fe <UART_Receive_IT+0x32>
    return HAL_BUSY;
 8002766:	2002      	movs	r0, #2
 8002768:	e7c9      	b.n	80026fe <UART_Receive_IT+0x32>

0800276a <HAL_UART_ErrorCallback>:
}
 800276a:	4770      	bx	lr

0800276c <HAL_UART_IRQHandler>:
{
 800276c:	b510      	push	{r4, lr}
 800276e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002770:	6802      	ldr	r2, [r0, #0]
 8002772:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002774:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002776:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002778:	f013 000f 	ands.w	r0, r3, #15
 800277c:	d105      	bne.n	800278a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800277e:	f013 0f20 	tst.w	r3, #32
 8002782:	d002      	beq.n	800278a <HAL_UART_IRQHandler+0x1e>
 8002784:	f011 0f20 	tst.w	r1, #32
 8002788:	d113      	bne.n	80027b2 <HAL_UART_IRQHandler+0x46>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800278a:	b128      	cbz	r0, 8002798 <HAL_UART_IRQHandler+0x2c>
 800278c:	f012 0201 	ands.w	r2, r2, #1
 8002790:	d113      	bne.n	80027ba <HAL_UART_IRQHandler+0x4e>
 8002792:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002796:	d110      	bne.n	80027ba <HAL_UART_IRQHandler+0x4e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002798:	f013 0f80 	tst.w	r3, #128	; 0x80
 800279c:	d002      	beq.n	80027a4 <HAL_UART_IRQHandler+0x38>
 800279e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027a2:	d16c      	bne.n	800287e <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027a8:	d002      	beq.n	80027b0 <HAL_UART_IRQHandler+0x44>
 80027aa:	f011 0f40 	tst.w	r1, #64	; 0x40
 80027ae:	d16a      	bne.n	8002886 <HAL_UART_IRQHandler+0x11a>
}
 80027b0:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff ff8a 	bl	80026cc <UART_Receive_IT>
      return;
 80027b8:	e7fa      	b.n	80027b0 <HAL_UART_IRQHandler+0x44>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027ba:	f013 0f01 	tst.w	r3, #1
 80027be:	d006      	beq.n	80027ce <HAL_UART_IRQHandler+0x62>
 80027c0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80027c4:	d003      	beq.n	80027ce <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027c8:	f040 0001 	orr.w	r0, r0, #1
 80027cc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ce:	f013 0f04 	tst.w	r3, #4
 80027d2:	d004      	beq.n	80027de <HAL_UART_IRQHandler+0x72>
 80027d4:	b11a      	cbz	r2, 80027de <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027d8:	f040 0002 	orr.w	r0, r0, #2
 80027dc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027de:	f013 0f02 	tst.w	r3, #2
 80027e2:	d004      	beq.n	80027ee <HAL_UART_IRQHandler+0x82>
 80027e4:	b11a      	cbz	r2, 80027ee <HAL_UART_IRQHandler+0x82>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027e8:	f040 0004 	orr.w	r0, r0, #4
 80027ec:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80027ee:	f013 0f08 	tst.w	r3, #8
 80027f2:	d007      	beq.n	8002804 <HAL_UART_IRQHandler+0x98>
 80027f4:	f011 0f20 	tst.w	r1, #32
 80027f8:	d100      	bne.n	80027fc <HAL_UART_IRQHandler+0x90>
 80027fa:	b11a      	cbz	r2, 8002804 <HAL_UART_IRQHandler+0x98>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80027fe:	f042 0208 	orr.w	r2, r2, #8
 8002802:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002804:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002806:	2a00      	cmp	r2, #0
 8002808:	d0d2      	beq.n	80027b0 <HAL_UART_IRQHandler+0x44>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800280a:	f013 0f20 	tst.w	r3, #32
 800280e:	d002      	beq.n	8002816 <HAL_UART_IRQHandler+0xaa>
 8002810:	f011 0f20 	tst.w	r1, #32
 8002814:	d121      	bne.n	800285a <HAL_UART_IRQHandler+0xee>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800281e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002820:	f012 0f08 	tst.w	r2, #8
 8002824:	d100      	bne.n	8002828 <HAL_UART_IRQHandler+0xbc>
 8002826:	b323      	cbz	r3, 8002872 <HAL_UART_IRQHandler+0x106>
        UART_EndRxTransfer(huart);
 8002828:	4620      	mov	r0, r4
 800282a:	f7ff fd3f 	bl	80022ac <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002836:	d018      	beq.n	800286a <HAL_UART_IRQHandler+0xfe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002842:	b173      	cbz	r3, 8002862 <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002844:	4a12      	ldr	r2, [pc, #72]	; (8002890 <HAL_UART_IRQHandler+0x124>)
 8002846:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002848:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800284a:	f7fe ff5d 	bl	8001708 <HAL_DMA_Abort_IT>
 800284e:	2800      	cmp	r0, #0
 8002850:	d0ae      	beq.n	80027b0 <HAL_UART_IRQHandler+0x44>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002852:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002854:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002856:	4798      	blx	r3
 8002858:	e7aa      	b.n	80027b0 <HAL_UART_IRQHandler+0x44>
        UART_Receive_IT(huart);
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff ff36 	bl	80026cc <UART_Receive_IT>
 8002860:	e7d9      	b.n	8002816 <HAL_UART_IRQHandler+0xaa>
            HAL_UART_ErrorCallback(huart);
 8002862:	4620      	mov	r0, r4
 8002864:	f7ff ff81 	bl	800276a <HAL_UART_ErrorCallback>
 8002868:	e7a2      	b.n	80027b0 <HAL_UART_IRQHandler+0x44>
          HAL_UART_ErrorCallback(huart);
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff ff7d 	bl	800276a <HAL_UART_ErrorCallback>
 8002870:	e79e      	b.n	80027b0 <HAL_UART_IRQHandler+0x44>
        HAL_UART_ErrorCallback(huart);
 8002872:	4620      	mov	r0, r4
 8002874:	f7ff ff79 	bl	800276a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	2300      	movs	r3, #0
 800287a:	63e3      	str	r3, [r4, #60]	; 0x3c
    return;
 800287c:	e798      	b.n	80027b0 <HAL_UART_IRQHandler+0x44>
    UART_Transmit_IT(huart);
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff fd22 	bl	80022c8 <UART_Transmit_IT>
    return;
 8002884:	e794      	b.n	80027b0 <HAL_UART_IRQHandler+0x44>
    UART_EndTransmit_IT(huart);
 8002886:	4620      	mov	r0, r4
 8002888:	f7ff ff12 	bl	80026b0 <UART_EndTransmit_IT>
    return;
 800288c:	e790      	b.n	80027b0 <HAL_UART_IRQHandler+0x44>
 800288e:	bf00      	nop
 8002890:	08002895 	.word	0x08002895

08002894 <UART_DMAAbortOnError>:
{
 8002894:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002896:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002898:	2300      	movs	r3, #0
 800289a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800289c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800289e:	f7ff ff64 	bl	800276a <HAL_UART_ErrorCallback>
}
 80028a2:	bd08      	pop	{r3, pc}

080028a4 <SystemInit>:

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028a4:	4b02      	ldr	r3, [pc, #8]	; (80028b0 <SystemInit+0xc>)
 80028a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028aa:	609a      	str	r2, [r3, #8]
#endif
}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000ed00 	.word	0xe000ed00

080028b4 <DisableAllInterrupts>:
(
  void
)
{
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <DisableAllInterrupts+0xc>)
 80028b6:	681b      	ldr	r3, [r3, #0]

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE FUNC(void, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_disableIRQ( void )
{
  OSEE_CLI();
 80028b8:	b672      	cpsid	i
  osEE_hal_disableIRQ();

  osEE_stack_monitoring(p_cdb);

  osEE_orti_trace_service_entry(p_ccb, OSServiceId_DisableAllInterrupts);
  p_ccb->d_isr_all_cnt = 1U;
 80028ba:	2201      	movs	r2, #1
 80028bc:	779a      	strb	r2, [r3, #30]
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_DisableAllInterrupts);
  return;
}
 80028be:	4770      	bx	lr
 80028c0:	08003468 	.word	0x08003468

080028c4 <StartOS>:
FUNC(StatusType, OS_CODE)
  StartOS
(
  VAR(AppModeType, AUTOMATIC) Mode
)
{
 80028c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028c8:	4607      	mov	r7, r0
  CONST(CoreIdType, AUTOMATIC)           curr_core_id = osEE_get_curr_core_id();
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_CONST)  p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_KCB, AUTOMATIC, OS_APPL_DATA)   p_kcb = p_kdb->p_kcb;
#endif /* !OSEE_SINGLECORE */
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)   p_ccb = p_cdb->p_ccb;
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <StartOS+0x74>)
 80028cc:	681e      	ldr	r6, [r3, #0]
 * an IRQ and from within a task. */
OSEE_STATIC_INLINE FUNC(OsEE_reg, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_begin_nested_primitive( void )
{
  OsEE_reg flags = 0U;
  OSEE_GET_IPL(flags);
 80028ce:	f3ef 8511 	mrs	r5, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 80028d2:	092b      	lsrs	r3, r5, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 80028d4:	3b01      	subs	r3, #1
 80028d6:	2b07      	cmp	r3, #7
 80028d8:	d902      	bls.n	80028e0 <StartOS+0x1c>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	f383 8811 	msr	BASEPRI, r3
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_StartOS);
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  osEE_lock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */

  if (p_ccb->os_status != OSEE_KERNEL_INITIALIZED) {
 80028e0:	7c33      	ldrb	r3, [r6, #16]
 80028e2:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 80028e6:	b143      	cbz	r3, 80028fa <StartOS+0x36>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
    osEE_unlock_kernel();
#endif /* OSEE_ALLOW_TASK_MIGRATION */
    ev = E_OS_ACCESS;
 80028e8:	2401      	movs	r4, #1
      osEE_hal_enableIRQ();
    }
#endif /* OSEE_STARTOS_RETURN || OSEE_API_DYNAMIC */
  }

  if (ev != E_OK) {
 80028ea:	b11c      	cbz	r4, 80028f4 <StartOS+0x30>
OSEE_STATIC_INLINE FUNC(void, OS_CODE) OSEE_ALWAYS_INLINE
osEE_hal_end_nested_primitive(
  VAR(OsEE_reg, AUTOMATIC)	flag
)
{
  OSEE_SET_IPL(flag << OSEE_CORTEX_M_PRIO_SH_BITS);
 80028ec:	f025 050f 	bic.w	r5, r5, #15
 80028f0:	f385 8811 	msr	BASEPRI, r5
    osEE_orti_trace_service_exit(p_ccb, OSServiceId_StartOS);
    osEE_end_primitive(flags);
  }

  return ev;
}
 80028f4:	4620      	mov	r0, r4
 80028f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif	/* OS_EE_ARCH_CORTEX_M_M4F_FPU */
#endif	/* 0 - [GS]: T.B.C. */
#if	(defined(OSEE_HAS_ORTI)) || (defined(OSEE_HAS_STACK_MONITORING))
    osEE_cortex_m_stack_init();
#endif	/* OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING */
    osEE_cortex_m_system_init();
 80028fa:	f000 f91e 	bl	8002b3a <osEE_cortex_m_system_init>
      p_idle_tdb = p_cdb->p_idle_task;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <StartOS+0x74>)
 8002900:	f8d3 8008 	ldr.w	r8, [r3, #8]
    p_ccb->os_status                = OSEE_KERNEL_STARTING;
 8002904:	2301      	movs	r3, #1
 8002906:	7433      	strb	r3, [r6, #16]
    p_ccb->app_mode                 = real_mode;
 8002908:	7477      	strb	r7, [r6, #17]
  P2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb
)
{
/* Touch unused parameter */
  ((void)p_ccb);
  StartupHook();
 800290a:	f7fd ff37 	bl	800077c <StartupHook>
    if (p_ccb->os_status == OSEE_KERNEL_STARTING) {
 800290e:	7c33      	ldrb	r3, [r6, #16]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d00d      	beq.n	8002932 <StartOS+0x6e>
    if (p_ccb->os_status == OSEE_KERNEL_STARTED) {
 8002916:	7c33      	ldrb	r3, [r6, #16]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d1e5      	bne.n	80028ea <StartOS+0x26>
  osEE_idle_task_start
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_idle_tdb
)
{
  osEE_hal_save_ctx_and_ready2stacked(p_idle_tdb, p_idle_tdb->hdb.p_scb,
 800291e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8002922:	460a      	mov	r2, r1
 8002924:	4640      	mov	r0, r8
 8002926:	f7fd fe7f 	bl	8000628 <osEE_hal_save_ctx_and_ready2stacked>
      osEE_task_end(p_idle_tdb);
 800292a:	4640      	mov	r0, r8
 800292c:	f000 f87e 	bl	8002a2c <osEE_task_end>
 8002930:	e7db      	b.n	80028ea <StartOS+0x26>
      p_ccb->os_status = OSEE_KERNEL_STARTED;
 8002932:	2302      	movs	r3, #2
 8002934:	7433      	strb	r3, [r6, #16]
 8002936:	e7ee      	b.n	8002916 <StartOS+0x52>
 8002938:	08003468 	.word	0x08003468

0800293c <TerminateTask>:
FUNC(StatusType, OS_CODE)
  TerminateTask
(
  void
)
{
 800293c:	b508      	push	{r3, lr}
  CONSTP2CONST(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#else
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
#endif /* !OSEE_HAS_ORTI && !OSEE_HAS_ERRORHOOK &&
          OSEE_HAS_SERVICE_PROTECTION */
    p_ccb       = p_cdb->p_ccb;
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <TerminateTask+0x3c>)
 8002940:	681b      	ldr	r3, [r3, #0]
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_curr      = p_ccb->p_curr;
 8002942:	681a      	ldr	r2, [r3, #0]
#endif /* OSEE_HAS_CHECKS elif (OSEE_HAS_ORTI || OSEE_HAS_STACK_MONITORING) */
  {
    VAR(OsEE_reg, AUTOMATIC) flags;
#if (!defined(OSEE_HAS_SERVICE_PROTECTION))
      /* Silently reset ISR counters if service protection is not configured */
      if (p_ccb->s_isr_all_cnt > 0U) {
 8002944:	7f19      	ldrb	r1, [r3, #28]
 8002946:	b121      	cbz	r1, 8002952 <TerminateTask+0x16>
        p_ccb->s_isr_all_cnt = 0U;
 8002948:	2100      	movs	r1, #0
 800294a:	7719      	strb	r1, [r3, #28]
        osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
 800294c:	6959      	ldr	r1, [r3, #20]
  OSEE_SET_ISR(flags);
 800294e:	f381 8810 	msr	PRIMASK, r1
      }
      if (p_ccb->d_isr_all_cnt > 0U) {
 8002952:	7f99      	ldrb	r1, [r3, #30]
 8002954:	b111      	cbz	r1, 800295c <TerminateTask+0x20>
        p_ccb->d_isr_all_cnt = 0U;
 8002956:	2100      	movs	r1, #0
 8002958:	7799      	strb	r1, [r3, #30]
  OSEE_SEI();
 800295a:	b662      	cpsie	i
  OSEE_GET_IPL(flags);
 800295c:	f3ef 8311 	mrs	r3, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 8002960:	091b      	lsrs	r3, r3, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 8002962:	3b01      	subs	r3, #1
 8002964:	2b07      	cmp	r3, #7
 8002966:	d902      	bls.n	800296e <TerminateTask+0x32>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	f383 8811 	msr	BASEPRI, r3
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
 800296e:	4903      	ldr	r1, [pc, #12]	; (800297c <TerminateTask+0x40>)
 8002970:	6850      	ldr	r0, [r2, #4]
 8002972:	f7fd fe67 	bl	8000644 <osEE_hal_terminate_ctx>
 8002976:	bf00      	nop
 8002978:	08003468 	.word	0x08003468
 800297c:	08002b49 	.word	0x08002b49

08002980 <osEE_scheduler_task_not_terminated>:
static FUNC(void, OS_CODE)
  osEE_scheduler_task_not_terminated
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to_term
)
{
 8002980:	b508      	push	{r3, lr}
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_CONST)
    p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <osEE_scheduler_task_not_terminated+0x3c>)
 8002984:	681b      	ldr	r3, [r3, #0]

  /* Reset ISR Counters */
/* [SWS_Os_00239] If a task returns from the entry function without making a
    TerminateTask() or ChainTask() call and interrupts are still disabled,
    the Operating System module shall enable them. */
  p_ccb->s_isr_os_cnt  = 0U;
 8002986:	2200      	movs	r2, #0
 8002988:	775a      	strb	r2, [r3, #29]
  /* I won't re-enable OS Interrupts since I'm going to enter rescheduling
     critical section */
  if (p_ccb->s_isr_all_cnt > 0U) {
 800298a:	7f1a      	ldrb	r2, [r3, #28]
 800298c:	b122      	cbz	r2, 8002998 <osEE_scheduler_task_not_terminated+0x18>
    p_ccb->s_isr_all_cnt = 0U;
 800298e:	2200      	movs	r2, #0
 8002990:	771a      	strb	r2, [r3, #28]
    osEE_hal_resumeIRQ(p_ccb->prev_s_isr_all_status);
 8002992:	695a      	ldr	r2, [r3, #20]
  OSEE_SET_ISR(flags);
 8002994:	f382 8810 	msr	PRIMASK, r2
  }
  if (p_ccb->d_isr_all_cnt > 0U) {
 8002998:	7f9a      	ldrb	r2, [r3, #30]
 800299a:	b112      	cbz	r2, 80029a2 <osEE_scheduler_task_not_terminated+0x22>
    p_ccb->d_isr_all_cnt = 0U;
 800299c:	2200      	movs	r2, #0
 800299e:	779a      	strb	r2, [r3, #30]
  OSEE_SEI();
 80029a0:	b662      	cpsie	i
  OSEE_GET_IPL(flags);
 80029a2:	f3ef 8311 	mrs	r3, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 80029a6:	091b      	lsrs	r3, r3, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 80029a8:	3b01      	subs	r3, #1
 80029aa:	2b07      	cmp	r3, #7
 80029ac:	d902      	bls.n	80029b4 <osEE_scheduler_task_not_terminated+0x34>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	4902      	ldr	r1, [pc, #8]	; (80029c0 <osEE_scheduler_task_not_terminated+0x40>)
 80029b6:	6840      	ldr	r0, [r0, #4]
 80029b8:	f7fd fe44 	bl	8000644 <osEE_hal_terminate_ctx>
 80029bc:	08003468 	.word	0x08003468
 80029c0:	08002b49 	.word	0x08002b49

080029c4 <osEE_scheduler_task_wrapper_restore>:
  }

#endif /* OSEE_HAS_ORTI */

  /* Set the TASK status to RUNNING. Before calling PreTaskHook */
  p_tdb_to->p_tcb->status = OSEE_TASK_RUNNING;
 80029c4:	6883      	ldr	r3, [r0, #8]
 80029c6:	2204      	movs	r2, #4
 80029c8:	709a      	strb	r2, [r3, #2]
    }
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
 80029ca:	4770      	bx	lr

080029cc <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4604      	mov	r4, r0
  CONST(TaskPrio, AUTOMATIC) task_priority = p_tdb_to->p_tcb->current_prio;
 80029d0:	6883      	ldr	r3, [r0, #8]
 80029d2:	785d      	ldrb	r5, [r3, #1]
  osEE_scheduler_task_wrapper_restore(p_tdb_to);
 80029d4:	f7ff fff6 	bl	80029c4 <osEE_scheduler_task_wrapper_restore>

  if (task_priority < OSEE_ISR_ALL_PRIO) {
 80029d8:	2dff      	cmp	r5, #255	; 0xff
 80029da:	d006      	beq.n	80029ea <osEE_scheduler_task_wrapper_run+0x1e>
  if (virt_prio < OSEE_ISR2_PRIO_BIT) {
 80029dc:	f015 0f80 	tst.w	r5, #128	; 0x80
 80029e0:	d108      	bne.n	80029f4 <osEE_scheduler_task_wrapper_run+0x28>
    OSEE_SET_IPL(OSEE_ISR_UNMASKED << OSEE_CORTEX_M_PRIO_SH_BITS);
 80029e2:	2300      	movs	r3, #0
 80029e4:	f383 8811 	msr	BASEPRI, r3
  OSEE_SEI();
 80029e8:	b662      	cpsie	i
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_priority);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
 80029ea:	6963      	ldr	r3, [r4, #20]
 80029ec:	4798      	blx	r3

  /* Unexpected TASK Function return */
  osEE_scheduler_task_not_terminated(p_tdb_to);
 80029ee:	4620      	mov	r0, r4
 80029f0:	f7ff ffc6 	bl	8002980 <osEE_scheduler_task_not_terminated>
    OSEE_SET_IPL(
 80029f4:	f1c5 050f 	rsb	r5, r5, #15
 80029f8:	012d      	lsls	r5, r5, #4
 80029fa:	b2ed      	uxtb	r5, r5
 80029fc:	f385 8811 	msr	BASEPRI, r5
 8002a00:	e7f2      	b.n	80029e8 <osEE_scheduler_task_wrapper_run+0x1c>
	...

08002a04 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
 8002a04:	b508      	push	{r3, lr}
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <osEE_idle_hook_wrapper+0x24>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	7c1b      	ldrb	r3, [r3, #16]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d105      	bne.n	8002a1e <osEE_idle_hook_wrapper+0x1a>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
 8002a12:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <osEE_idle_hook_wrapper+0x24>)
 8002a14:	685b      	ldr	r3, [r3, #4]
    if (p_idle_hook != NULL) {
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f5      	beq.n	8002a06 <osEE_idle_hook_wrapper+0x2>
      p_idle_hook();
 8002a1a:	4798      	blx	r3
 8002a1c:	e7f3      	b.n	8002a06 <osEE_idle_hook_wrapper+0x2>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
 8002a1e:	4b02      	ldr	r3, [pc, #8]	; (8002a28 <osEE_idle_hook_wrapper+0x24>)
 8002a20:	6898      	ldr	r0, [r3, #8]
 8002a22:	f000 f87c 	bl	8002b1e <osEE_idle_task_terminate>
}
 8002a26:	bd08      	pop	{r3, pc}
 8002a28:	08003468 	.word	0x08003468

08002a2c <osEE_task_end>:
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  /* It has to be called already in Multi-Core critical section */
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
 8002a2c:	6882      	ldr	r2, [r0, #8]

  p_tcb->current_prio = p_tdb->ready_prio;
 8002a2e:	7e03      	ldrb	r3, [r0, #24]
 8002a30:	7053      	strb	r3, [r2, #1]

  --p_tcb->current_num_of_act;
 8002a32:	7813      	ldrb	r3, [r2, #0]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	7013      	strb	r3, [r2, #0]

  if (p_tcb->current_num_of_act == 0U) {
 8002a3a:	b90b      	cbnz	r3, 8002a40 <osEE_task_end+0x14>
    p_tcb->status = OSEE_TASK_SUSPENDED;
 8002a3c:	7093      	strb	r3, [r2, #2]
 8002a3e:	4770      	bx	lr
  } else {
    p_tcb->status = OSEE_TASK_READY;
 8002a40:	2301      	movs	r3, #1
 8002a42:	7093      	strb	r3, [r2, #2]
  }
}
 8002a44:	4770      	bx	lr
	...

08002a48 <osEE_scheduler_task_terminated>:
  osEE_scheduler_task_terminated
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
 8002a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <osEE_scheduler_task_terminated+0x74>)
 8002a4e:	681c      	ldr	r4, [r3, #0]
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
 8002a50:	6825      	ldr	r5, [r4, #0]
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
 8002a52:	68ae      	ldr	r6, [r5, #8]

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
 8002a54:	600d      	str	r5, [r1, #0]
    /* We are having a termination so the hook flag has to be
       unset */
    p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
 8002a56:	78b3      	ldrb	r3, [r6, #2]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d015      	beq.n	8002a88 <osEE_scheduler_task_terminated+0x40>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
 8002a5c:	68e1      	ldr	r1, [r4, #12]

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
 8002a5e:	680b      	ldr	r3, [r1, #0]
 8002a60:	60e3      	str	r3, [r4, #12]
#endif /* OSEE_HAS_POSTTASKHOOK */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
 8002a62:	7e2b      	ldrb	r3, [r5, #24]
 8002a64:	7073      	strb	r3, [r6, #1]
      p_tcb_term->status = OSEE_TASK_READY;
 8002a66:	2301      	movs	r3, #1
 8002a68:	70b3      	strb	r3, [r6, #2]
      if (p_tcb_term->current_num_of_act == 1U) {
        osEE_task_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
 8002a6a:	1d23      	adds	r3, r4, #4
 8002a6c:	462a      	mov	r2, r5
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 f8ef 	bl	8002c54 <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
 8002a76:	4629      	mov	r1, r5
 8002a78:	4810      	ldr	r0, [pc, #64]	; (8002abc <osEE_scheduler_task_terminated+0x74>)
 8002a7a:	f000 f8a3 	bl	8002bc4 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
 8002a7e:	b1c0      	cbz	r0, 8002ab2 <osEE_scheduler_task_terminated+0x6a>
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
          p_ccb->p_curr           = p_tdb_to;
        } else {
          p_tdb_to = p_ccb->p_curr;
 8002a80:	6827      	ldr	r7, [r4, #0]
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
 8002a82:	4638      	mov	r0, r7
 8002a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
 8002a88:	1d21      	adds	r1, r4, #4
 8002a8a:	480c      	ldr	r0, [pc, #48]	; (8002abc <osEE_scheduler_task_terminated+0x74>)
 8002a8c:	f000 f8e8 	bl	8002c60 <osEE_scheduler_core_pop_running>
 8002a90:	4680      	mov	r8, r0
      p_tdb_to = p_ccb->p_curr;
 8002a92:	6827      	ldr	r7, [r4, #0]
      if (p_tdb_term != p_tdb_to) {
 8002a94:	42bd      	cmp	r5, r7
 8002a96:	d008      	beq.n	8002aaa <osEE_scheduler_task_terminated+0x62>
        osEE_task_end(p_tdb_term);
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f7ff ffc7 	bl	8002a2c <osEE_task_end>
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
 8002a9e:	68a3      	ldr	r3, [r4, #8]
 8002aa0:	f8c8 3000 	str.w	r3, [r8]
  (*pp_first)       = p_to_free;
 8002aa4:	f8c4 8008 	str.w	r8, [r4, #8]
}
 8002aa8:	e7eb      	b.n	8002a82 <osEE_scheduler_task_terminated+0x3a>
        --p_tcb_term->current_num_of_act;
 8002aaa:	7833      	ldrb	r3, [r6, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	7033      	strb	r3, [r6, #0]
 8002ab0:	e7f5      	b.n	8002a9e <osEE_scheduler_task_terminated+0x56>
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
 8002ab2:	68e3      	ldr	r3, [r4, #12]
 8002ab4:	685f      	ldr	r7, [r3, #4]
          p_ccb->p_curr           = p_tdb_to;
 8002ab6:	6027      	str	r7, [r4, #0]
 8002ab8:	e7e3      	b.n	8002a82 <osEE_scheduler_task_terminated+0x3a>
 8002aba:	bf00      	nop
 8002abc:	08003468 	.word	0x08003468

08002ac0 <osEE_scheduler_task_preemption_point>:
FUNC(OsEE_bool, OS_CODE)
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb
)
{
 8002ac0:	b510      	push	{r4, lr}
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 8002ac2:	4806      	ldr	r0, [pc, #24]	; (8002adc <osEE_scheduler_task_preemption_point+0x1c>)
 8002ac4:	6804      	ldr	r4, [r0, #0]
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
 8002ac6:	1d21      	adds	r1, r4, #4
 8002ac8:	f000 f87c 	bl	8002bc4 <osEE_scheduler_core_rq_preempt_stk>

  /* Unlock the Scheduler (critical section terminated) */
  osEE_unlock_core(p_cdb);

  if (p_prev != NULL) {
 8002acc:	b120      	cbz	r0, 8002ad8 <osEE_scheduler_task_preemption_point+0x18>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_change_context_from_running(p_prev, p_curr);
 8002ace:	6821      	ldr	r1, [r4, #0]
 8002ad0:	f000 f806 	bl	8002ae0 <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
 8002ad4:	2001      	movs	r0, #1
  } else {
    is_preemption = OSEE_FALSE;
  }

  return is_preemption;
}
 8002ad6:	bd10      	pop	{r4, pc}
    is_preemption = OSEE_FALSE;
 8002ad8:	2000      	movs	r0, #0
 8002ada:	e7fc      	b.n	8002ad6 <osEE_scheduler_task_preemption_point+0x16>
 8002adc:	08003468 	.word	0x08003468

08002ae0 <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
 8002ae0:	b508      	push	{r3, lr}
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4608      	mov	r0, r1
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
 8002ae6:	688a      	ldr	r2, [r1, #8]

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
 8002ae8:	7892      	ldrb	r2, [r2, #2]
 8002aea:	2a02      	cmp	r2, #2
 8002aec:	d004      	beq.n	8002af8 <osEE_change_context_from_running+0x18>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	6849      	ldr	r1, [r1, #4]
 8002af2:	f7fd fd99 	bl	8000628 <osEE_hal_save_ctx_and_ready2stacked>
      p_from->hdb.p_scb);
  }
}
 8002af6:	bd08      	pop	{r3, pc}
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	6849      	ldr	r1, [r1, #4]
 8002afc:	f7fd fd70 	bl	80005e0 <osEE_hal_save_ctx_and_restore_ctx>
 8002b00:	e7f9      	b.n	8002af6 <osEE_change_context_from_running+0x16>

08002b02 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
 8002b02:	b508      	push	{r3, lr}
 8002b04:	4608      	mov	r0, r1
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
 8002b06:	688b      	ldr	r3, [r1, #8]

  if (p_to_tcb->status == OSEE_TASK_READY_STACKED) {
 8002b08:	789b      	ldrb	r3, [r3, #2]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <osEE_change_context_from_task_end+0x14>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
 8002b0e:	6849      	ldr	r1, [r1, #4]
 8002b10:	f7fd fd84 	bl	800061c <osEE_hal_ready2stacked>
  }
  /* STD Implementation do not use p_from here, but I cannot assure
     that any implementation won't do that */
  (void)p_from;
}
 8002b14:	bd08      	pop	{r3, pc}
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
 8002b16:	6849      	ldr	r1, [r1, #4]
 8002b18:	f7fd fd70 	bl	80005fc <osEE_hal_restore_ctx>
 8002b1c:	e7fa      	b.n	8002b14 <osEE_change_context_from_task_end+0x12>

08002b1e <osEE_idle_task_terminate>:
FUNC(void, OS_CODE)
  osEE_idle_task_terminate
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_idle_tdb
)
{
 8002b1e:	b510      	push	{r4, lr}
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
 8002b20:	6803      	ldr	r3, [r0, #0]
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
 8002b22:	6841      	ldr	r1, [r0, #4]
  CONSTP2CONST(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos     = p_sdb->p_bos;
 8002b24:	681c      	ldr	r4, [r3, #0]
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
 8002b26:	680b      	ldr	r3, [r1, #0]

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
 8002b28:	461a      	mov	r2, r3
 8002b2a:	681b      	ldr	r3, [r3, #0]
  } while ((p_tos != NULL) && (p_tos != p_bos));
 8002b2c:	b10b      	cbz	r3, 8002b32 <osEE_idle_task_terminate+0x14>
 8002b2e:	429c      	cmp	r4, r3
 8002b30:	d1fa      	bne.n	8002b28 <osEE_idle_task_terminate+0xa>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
 8002b32:	600a      	str	r2, [r1, #0]

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
 8002b34:	f7fd fd62 	bl	80005fc <osEE_hal_restore_ctx>
}
 8002b38:	bd10      	pop	{r4, pc}

08002b3a <osEE_cortex_m_system_init>:

/*
 * System Initialization.
 */
FUNC(void, OS_CODE) osEE_cortex_m_system_init(void)
{
 8002b3a:	b508      	push	{r3, lr}
	/* 
	 * Set the priority of PendSV to the minimum one
	 * PendSV is the software interrupt used for context switch
	 */
	osEE_set_switch_context_pri();
 8002b3c:	f7fd fd96 	bl	800066c <osEE_set_switch_context_pri>
#endif	/* OSEE_CORTEX_M_SYSTICK_ISR */

	/* 
	 * MCU System Initialization.
	 */
	osEE_cortex_m_mcu_system_init();
 8002b40:	f000 f8a0 	bl	8002c84 <osEE_cortex_m_mcu_system_init>

}	/* osEE_cortex_m_system_init() */
 8002b44:	bd08      	pop	{r3, pc}
	...

08002b48 <osEE_cortex_m_scheduler_task_end>:
 *  \date   2016
 */
#include "ee_internal.h"

FUNC(void, OS_CODE) osEE_cortex_m_scheduler_task_end(void)
{
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	b082      	sub	sp, #8

  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)  p_ccb = p_cdb->p_ccb;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <osEE_cortex_m_scheduler_task_end+0x58>)
 8002b4e:	681c      	ldr	r4, [r3, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)   p_term_sn = p_ccb->p_stk_sn;
 8002b50:	68e5      	ldr	r5, [r4, #12]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_orig_task_sn = p_term_sn->p_next;
 8002b52:	682b      	ldr	r3, [r5, #0]
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_orig_tdb;

  /* p_orig_task_sn == NULL means I preempted idle task */
  if (p_orig_task_sn != NULL) {
 8002b54:	b173      	cbz	r3, 8002b74 <osEE_cortex_m_scheduler_task_end+0x2c>
    p_orig_tdb = p_orig_task_sn->p_tdb;
 8002b56:	685e      	ldr	r6, [r3, #4]
    /* Set PendSV */
    osEE_cortex_m_trigger_pend_sv();
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
  }
#else
  if (p_ccb->p_curr->task_type != OSEE_TASK_TYPE_ISR2) {
 8002b58:	6822      	ldr	r2, [r4, #0]
 8002b5a:	7c12      	ldrb	r2, [r2, #16]
 8002b5c:	2a02      	cmp	r2, #2
 8002b5e:	d00c      	beq.n	8002b7a <osEE_cortex_m_scheduler_task_end+0x32>
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)            p_from;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)       p_to =
      osEE_scheduler_task_terminated(osEE_get_kernel(), &p_from);
 8002b60:	a901      	add	r1, sp, #4
 8002b62:	4810      	ldr	r0, [pc, #64]	; (8002ba4 <osEE_cortex_m_scheduler_task_end+0x5c>)
 8002b64:	f7ff ff70 	bl	8002a48 <osEE_scheduler_task_terminated>
 8002b68:	4601      	mov	r1, r0

    osEE_change_context_from_task_end(p_from, p_to);
 8002b6a:	9801      	ldr	r0, [sp, #4]
 8002b6c:	f7ff ffc9 	bl	8002b02 <osEE_change_context_from_task_end>
       (osEE_cortex_m_isr2_stub) after osEE_activate_isr2(t) call */
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
  }
#endif

}
 8002b70:	b002      	add	sp, #8
 8002b72:	bd70      	pop	{r4, r5, r6, pc}
    p_orig_tdb = p_cdb->p_idle_task;
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <osEE_cortex_m_scheduler_task_end+0x58>)
 8002b76:	6896      	ldr	r6, [r2, #8]
 8002b78:	e7ee      	b.n	8002b58 <osEE_cortex_m_scheduler_task_end+0x10>
    p_ccb->p_stk_sn = p_orig_task_sn;
 8002b7a:	60e3      	str	r3, [r4, #12]
    osEE_task_end(p_term_sn->p_tdb);
 8002b7c:	6868      	ldr	r0, [r5, #4]
 8002b7e:	f7ff ff55 	bl	8002a2c <osEE_task_end>
    p_ccb->p_curr = p_orig_tdb;
 8002b82:	6026      	str	r6, [r4, #0]
    p_orig_tdb->p_tcb->status = OSEE_TASK_RUNNING;
 8002b84:	68b3      	ldr	r3, [r6, #8]
 8002b86:	2204      	movs	r2, #4
 8002b88:	709a      	strb	r2, [r3, #2]
  p_to_free->p_next = (*pp_first);
 8002b8a:	68a3      	ldr	r3, [r4, #8]
 8002b8c:	602b      	str	r3, [r5, #0]
  (*pp_first)       = p_to_free;
 8002b8e:	60a5      	str	r5, [r4, #8]
    osEE_cortex_m_trigger_pend_sv();
 8002b90:	f7fd fd7a 	bl	8000688 <osEE_cortex_m_trigger_pend_sv>
    osEE_hal_restore_ctx(p_orig_tdb, p_orig_tdb->hdb.p_scb);
 8002b94:	6871      	ldr	r1, [r6, #4]
 8002b96:	4630      	mov	r0, r6
 8002b98:	f7fd fd30 	bl	80005fc <osEE_hal_restore_ctx>
}
 8002b9c:	e7e8      	b.n	8002b70 <osEE_cortex_m_scheduler_task_end+0x28>
 8002b9e:	bf00      	nop
 8002ba0:	08003468 	.word	0x08003468
 8002ba4:	08003474 	.word	0x08003474

08002ba8 <osEE_scheduler_stk_next>:
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
 8002ba8:	684b      	ldr	r3, [r1, #4]
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
 8002baa:	689a      	ldr	r2, [r3, #8]
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
 8002bac:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8002bb0:	f8c1 c000 	str.w	ip, [r1]
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
 8002bb4:	60c1      	str	r1, [r0, #12]
  p_ccb->p_curr                 = p_tdb;
 8002bb6:	6003      	str	r3, [r0, #0]

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
 8002bb8:	7e5b      	ldrb	r3, [r3, #25]
    if (p_tcb->current_prio < dispatch_prio) {
 8002bba:	7851      	ldrb	r1, [r2, #1]
 8002bbc:	4299      	cmp	r1, r3
 8002bbe:	d200      	bcs.n	8002bc2 <osEE_scheduler_stk_next+0x1a>
      p_tcb->current_prio = dispatch_prio;
 8002bc0:	7053      	strb	r3, [r2, #1]
    }
  }
}
 8002bc2:	4770      	bx	lr

08002bc4 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
 8002bca:	6800      	ldr	r0, [r0, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
 8002bcc:	6809      	ldr	r1, [r1, #0]
  P2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)     p_ret_sn = p_ccb->p_stk_sn;
 8002bce:	68c4      	ldr	r4, [r0, #12]

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
 8002bd0:	b194      	cbz	r4, 8002bf8 <osEE_scheduler_core_rq_preempt_stk+0x34>
    p_ret_tdb = p_ret_sn->p_tdb;
 8002bd2:	6864      	ldr	r4, [r4, #4]
    if (p_rq_sn != NULL) {
 8002bd4:	b1b1      	cbz	r1, 8002c04 <osEE_scheduler_core_rq_preempt_stk+0x40>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
 8002bd6:	68a2      	ldr	r2, [r4, #8]
      if (p_ret_tcb->current_prio <
 8002bd8:	f892 e001 	ldrb.w	lr, [r2, #1]
        p_rq_sn->p_tdb->p_tcb->current_prio)
 8002bdc:	684d      	ldr	r5, [r1, #4]
 8002bde:	68ad      	ldr	r5, [r5, #8]
 8002be0:	f895 c001 	ldrb.w	ip, [r5, #1]
      if (p_ret_tcb->current_prio <
 8002be4:	45e6      	cmp	lr, ip
 8002be6:	d20f      	bcs.n	8002c08 <osEE_scheduler_core_rq_preempt_stk+0x44>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
 8002be8:	2502      	movs	r5, #2
 8002bea:	7095      	strb	r5, [r2, #2]
    p_ret_tdb = NULL;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
 8002bec:	680a      	ldr	r2, [r1, #0]
 8002bee:	601a      	str	r2, [r3, #0]

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
 8002bf0:	f7ff ffda 	bl	8002ba8 <osEE_scheduler_stk_next>
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}
  } else if (p_rq_sn != NULL) {
 8002bf8:	b141      	cbz	r1, 8002c0c <osEE_scheduler_core_rq_preempt_stk+0x48>
    p_ret_tdb                 = p_cdb->p_idle_task;
 8002bfa:	6894      	ldr	r4, [r2, #8]
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
 8002bfc:	68a2      	ldr	r2, [r4, #8]
 8002bfe:	2502      	movs	r5, #2
 8002c00:	7095      	strb	r5, [r2, #2]
  if (is_rq_preemption) {
 8002c02:	e7f3      	b.n	8002bec <osEE_scheduler_core_rq_preempt_stk+0x28>
    p_ret_tdb = NULL;
 8002c04:	460c      	mov	r4, r1
 8002c06:	e7f5      	b.n	8002bf4 <osEE_scheduler_core_rq_preempt_stk+0x30>
 8002c08:	2400      	movs	r4, #0
 8002c0a:	e7f3      	b.n	8002bf4 <osEE_scheduler_core_rq_preempt_stk+0x30>
 8002c0c:	460c      	mov	r4, r1
  return p_ret_tdb;
 8002c0e:	e7f1      	b.n	8002bf4 <osEE_scheduler_core_rq_preempt_stk+0x30>

08002c10 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   as_ready
)
{
 8002c10:	b470      	push	{r4, r5, r6}
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST)  p_tdb_new = p_sn_new->p_tdb;
 8002c12:	684b      	ldr	r3, [r1, #4]
  CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
 8002c14:	689c      	ldr	r4, [r3, #8]
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
 8002c16:	4616      	mov	r6, r2
 8002c18:	b122      	cbz	r2, 8002c24 <osEE_sn_priority_insert+0x14>
 8002c1a:	f893 c018 	ldrb.w	ip, [r3, #24]
    (as_ready)?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
 8002c1e:	6803      	ldr	r3, [r0, #0]
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
 8002c20:	2500      	movs	r5, #0
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
 8002c22:	e007      	b.n	8002c34 <osEE_sn_priority_insert+0x24>
  CONST(TaskPrio, AUTOMATIC)                  new_task_prio =
 8002c24:	f894 c001 	ldrb.w	ip, [r4, #1]
 8002c28:	e7f9      	b.n	8002c1e <osEE_sn_priority_insert+0xe>
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (as_ready) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
 8002c2a:	7862      	ldrb	r2, [r4, #1]
    }

    if (new_task_prio <= prio_to_check)
 8002c2c:	4562      	cmp	r2, ip
 8002c2e:	d308      	bcc.n	8002c42 <osEE_sn_priority_insert+0x32>
    {
      p_prev = p_curr;
 8002c30:	461d      	mov	r5, r3
      p_curr = p_curr->p_next;
 8002c32:	681b      	ldr	r3, [r3, #0]
  while (p_curr != NULL) {
 8002c34:	b12b      	cbz	r3, 8002c42 <osEE_sn_priority_insert+0x32>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
 8002c36:	685a      	ldr	r2, [r3, #4]
    CONSTP2CONST(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
 8002c38:	6894      	ldr	r4, [r2, #8]
    if (as_ready) {
 8002c3a:	2e00      	cmp	r6, #0
 8002c3c:	d0f5      	beq.n	8002c2a <osEE_sn_priority_insert+0x1a>
      prio_to_check = p_cur_tdb->ready_prio;
 8002c3e:	7e12      	ldrb	r2, [r2, #24]
 8002c40:	e7f4      	b.n	8002c2c <osEE_sn_priority_insert+0x1c>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
 8002c42:	b125      	cbz	r5, 8002c4e <osEE_sn_priority_insert+0x3e>
    p_prev->p_next = p_sn_new;
 8002c44:	6029      	str	r1, [r5, #0]
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
 8002c46:	2000      	movs	r0, #0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
 8002c48:	600b      	str	r3, [r1, #0]

  return head_changed;
}
 8002c4a:	bc70      	pop	{r4, r5, r6}
 8002c4c:	4770      	bx	lr
    (*pp_first)   = p_sn_new;
 8002c4e:	6001      	str	r1, [r0, #0]
    head_changed  = OSEE_TRUE;
 8002c50:	2001      	movs	r0, #1
 8002c52:	e7f9      	b.n	8002c48 <osEE_sn_priority_insert+0x38>

08002c54 <osEE_scheduler_rq_insert>:
{
 8002c54:	b508      	push	{r3, lr}
  p_sn_new->p_tdb = p_tdb_new;
 8002c56:	604a      	str	r2, [r1, #4]
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f7ff ffd9 	bl	8002c10 <osEE_sn_priority_insert>
}
 8002c5e:	bd08      	pop	{r3, pc}

08002c60 <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	4605      	mov	r5, r0
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
 8002c64:	6804      	ldr	r4, [r0, #0]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
 8002c66:	68e6      	ldr	r6, [r4, #12]
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;
 8002c68:	6833      	ldr	r3, [r6, #0]

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
 8002c6a:	60e3      	str	r3, [r4, #12]
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
 8002c6c:	f7ff ffaa 	bl	8002bc4 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2CONST(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
 8002c70:	68e3      	ldr	r3, [r4, #12]

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
 8002c72:	b108      	cbz	r0, 8002c78 <osEE_scheduler_core_pop_running+0x18>
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
 8002c74:	4630      	mov	r0, r6
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
      if (p_curr_stk_sn != NULL) {
 8002c78:	b113      	cbz	r3, 8002c80 <osEE_scheduler_core_pop_running+0x20>
        p_tdb_stk = p_curr_stk_sn->p_tdb;
 8002c7a:	685b      	ldr	r3, [r3, #4]
      p_ccb->p_curr            = p_tdb_stk;
 8002c7c:	6023      	str	r3, [r4, #0]
  return p_prev_stk_sn;
 8002c7e:	e7f9      	b.n	8002c74 <osEE_scheduler_core_pop_running+0x14>
        p_tdb_stk = p_cdb->p_idle_task;
 8002c80:	68ab      	ldr	r3, [r5, #8]
 8002c82:	e7fb      	b.n	8002c7c <osEE_scheduler_core_pop_running+0x1c>

08002c84 <osEE_cortex_m_mcu_system_init>:
)
#define	OSEE_CORTEX_M_USART2_NUM		(			\
	OSEE_CORTEX_M_USART2_ISR_ID - OSEE_CORTEX_M_OVERALL_EXC_NUM	\
)
#ifdef	OSEE_CORTEX_M_USART2_ISR_PRI
	OSEE_CORTEX_M_NVIC_SET_PRI(
 8002c84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002c88:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 8002c8c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c90:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8002c94:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 8002c98:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8002c9c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		OSEE_CORTEX_M_USART2_NUM, OSEE_CORTEX_M_USART2_ISR_PRI
	);
#endif	/* OSEE_CORTEX_M_USART2_ISR_PRI */
	OSEE_CORTEX_M_NVIC_INT_ENABLE(OSEE_CORTEX_M_USART2_NUM);
 8002ca0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002ca4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	);
#endif	/* OSEE_CORTEX_M_DMA2D_ISR_PRI */
	OSEE_CORTEX_M_NVIC_INT_ENABLE(OSEE_CORTEX_M_DMA2D_NUM);
#endif	/* OSEE_CORTEX_M_DMA2D_ISR */
#endif	/* OS_EE_ARCH_CORTEX_M_STM32F429xx */
}	/* osEE_cortex_m_mcu_system_init() */
 8002cac:	4770      	bx	lr
	...

08002cb0 <USART2_IRQHandler>:
 * USART2 global interrupt
 */
#if (defined(OSEE_CORTEX_M_USART2_ISR_TID)) && (OSEE_CORTEX_M_USART2_ISR_CAT == 2)
OSEE_CORTEX_M_ISR2_DEFINITION(USART2_IRQHandler, OSEE_CORTEX_M_USART2_ISR_TID)
#elif (defined(OSEE_CORTEX_M_USART2_ISR)) && (OSEE_CORTEX_M_USART2_ISR_CAT == 1)
OSEE_CORTEX_M_ISR1_DEFINITION(USART2_IRQHandler, OSEE_CORTEX_M_USART2_ISR)
 8002cb0:	b508      	push	{r3, lr}
 8002cb2:	4802      	ldr	r0, [pc, #8]	; (8002cbc <USART2_IRQHandler+0xc>)
 8002cb4:	f000 f81a 	bl	8002cec <osEE_cortex_m_isr1_stub>
 8002cb8:	bd08      	pop	{r3, pc}
 8002cba:	bf00      	nop
 8002cbc:	08000721 	.word	0x08000721

08002cc0 <osEE_cortex_m_change_context_from_task_end>:
#include "ee_internal.h"

FUNC(void, OS_CODE) osEE_cortex_m_change_context_from_task_end(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_orig_tdb
)
{
 8002cc0:	b510      	push	{r4, lr}
  OSEE_GET_IPL(flags);
 8002cc2:	f3ef 8411 	mrs	r4, BASEPRI
  flags >>= OSEE_CORTEX_M_PRIO_SH_BITS;
 8002cc6:	0923      	lsrs	r3, r4, #4
  if ( (flags == 0x00U) || (flags > OSEE_ISR2_MAX_HW_PRIO) ) {
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	2b07      	cmp	r3, #7
 8002ccc:	d902      	bls.n	8002cd4 <osEE_cortex_m_change_context_from_task_end+0x14>
    OSEE_SET_IPL(OSEE_ISR2_MAX_HW_PRIO << OSEE_CORTEX_M_PRIO_SH_BITS);
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	f383 8811 	msr	BASEPRI, r3
  OSEE_SEI();
 8002cd4:	b662      	cpsie	i
  OsEE_reg f = osEE_hal_begin_nested_primitive();

  osEE_hal_enableIRQ();

  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel());
 8002cd6:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <osEE_cortex_m_change_context_from_task_end+0x28>)
 8002cd8:	f7ff fef2 	bl	8002ac0 <osEE_scheduler_task_preemption_point>
  OSEE_CLI();
 8002cdc:	b672      	cpsid	i
  OSEE_SET_IPL(flag << OSEE_CORTEX_M_PRIO_SH_BITS);
 8002cde:	f024 040f 	bic.w	r4, r4, #15
 8002ce2:	f384 8811 	msr	BASEPRI, r4

  osEE_hal_disableIRQ();

  osEE_hal_end_nested_primitive(f);
}
 8002ce6:	bd10      	pop	{r4, pc}
 8002ce8:	08003474 	.word	0x08003474

08002cec <osEE_cortex_m_isr1_stub>:
 */
FUNC(void, OS_CODE) OSEE_COMPILER_KEEP
osEE_cortex_m_isr1_stub(
  VAR(OsEE_void_cb, AUTOMATIC)	f
)
{
 8002cec:	b508      	push	{r3, lr}

  /* Call The ISR User Handler */
  f();
 8002cee:	4780      	blx	r0

}	/* osEE_cortex_m_isr1_stub() */
 8002cf0:	bd08      	pop	{r3, pc}
	...

08002cf4 <_init>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr

08002d00 <_fini>:
 8002d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d02:	bf00      	nop
 8002d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d06:	bc08      	pop	{r3}
 8002d08:	469e      	mov	lr, r3
 8002d0a:	4770      	bx	lr

Disassembly of section .cacheable_text:

08002d0c <get_accurate_trace>:
                                                                                    void (*victim)()){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  START_ACCURATE_TRACE();
 8002d1a:	4a83      	ldr	r2, [pc, #524]	; (8002f28 <get_accurate_trace+0x21c>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e5a      	subs	r2, r3, #1
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	4b7f      	ldr	r3, [pc, #508]	; (8002f28 <get_accurate_trace+0x21c>)
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d2c:	4b7e      	ldr	r3, [pc, #504]	; (8002f28 <get_accurate_trace+0x21c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	4b7d      	ldr	r3, [pc, #500]	; (8002f28 <get_accurate_trace+0x21c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	60da      	str	r2, [r3, #12]
 8002d38:	487c      	ldr	r0, [pc, #496]	; (8002f2c <get_accurate_trace+0x220>)
 8002d3a:	f7ff f950 	bl	8001fde <HAL_TIM_Base_Start>
 8002d3e:	4b7c      	ldr	r3, [pc, #496]	; (8002f30 <get_accurate_trace+0x224>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4619      	mov	r1, r3
 8002d44:	4a7b      	ldr	r2, [pc, #492]	; (8002f34 <get_accurate_trace+0x228>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	487b      	ldr	r0, [pc, #492]	; (8002f38 <get_accurate_trace+0x22c>)
 8002d4a:	f7fe fc6f 	bl	800162c <HAL_DMA_Start>
 8002d4e:	4b7a      	ldr	r3, [pc, #488]	; (8002f38 <get_accurate_trace+0x22c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b78      	ldr	r3, [pc, #480]	; (8002f38 <get_accurate_trace+0x22c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	4b72      	ldr	r3, [pc, #456]	; (8002f28 <get_accurate_trace+0x21c>)
 8002d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	4b75      	ldr	r3, [pc, #468]	; (8002f3c <get_accurate_trace+0x230>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b73      	ldr	r3, [pc, #460]	; (8002f3c <get_accurate_trace+0x230>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46c0      	nop			; (mov r8, r8)
  victim();
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4798      	blx	r3
  END_ACCURATE_TRACE();
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46c0      	nop			; (mov r8, r8)
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46c0      	nop			; (mov r8, r8)
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	46c0      	nop			; (mov r8, r8)
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46c0      	nop			; (mov r8, r8)
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46c0      	nop			; (mov r8, r8)
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46c0      	nop			; (mov r8, r8)
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46c0      	nop			; (mov r8, r8)
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	e00c      	b.n	8002f40 <get_accurate_trace+0x234>
 8002f26:	bf00      	nop
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	20000560 	.word	0x20000560
 8002f30:	20000000 	.word	0x20000000
 8002f34:	200005a0 	.word	0x200005a0
 8002f38:	200004c0 	.word	0x200004c0
 8002f3c:	20000520 	.word	0x20000520
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46c0      	nop			; (mov r8, r8)
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46c0      	nop			; (mov r8, r8)
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46c0      	nop			; (mov r8, r8)
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46c0      	nop			; (mov r8, r8)
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46c0      	nop			; (mov r8, r8)
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	46c0      	nop			; (mov r8, r8)
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	46c0      	nop			; (mov r8, r8)
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46c0      	nop			; (mov r8, r8)
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	46c0      	nop			; (mov r8, r8)
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46c0      	nop			; (mov r8, r8)
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	46c0      	nop			; (mov r8, r8)
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46c0      	nop			; (mov r8, r8)
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46c0      	nop			; (mov r8, r8)
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46c0      	nop			; (mov r8, r8)
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	46c0      	nop			; (mov r8, r8)
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	46c0      	nop			; (mov r8, r8)
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46c0      	nop			; (mov r8, r8)
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46c0      	nop			; (mov r8, r8)
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <get_accurate_trace+0x59c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	f241 1311 	movw	r3, #4369	; 0x1111
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <get_accurate_trace+0x580>
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <get_accurate_trace+0x59c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	f240 4344 	movw	r3, #1092	; 0x444
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <get_accurate_trace+0x580>
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <get_accurate_trace+0x59c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <get_accurate_trace+0x59c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	4807      	ldr	r0, [pc, #28]	; (80032ac <get_accurate_trace+0x5a0>)
 800328e:	f7fe f9f1 	bl	8001674 <HAL_DMA_Abort>
 8003292:	4807      	ldr	r0, [pc, #28]	; (80032b0 <get_accurate_trace+0x5a4>)
 8003294:	f7fe feb5 	bl	8002002 <HAL_TIM_Base_Stop>
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <get_accurate_trace+0x5a8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000520 	.word	0x20000520
 80032ac:	200004c0 	.word	0x200004c0
 80032b0:	20000560 	.word	0x20000560
 80032b4:	20000000 	.word	0x20000000
