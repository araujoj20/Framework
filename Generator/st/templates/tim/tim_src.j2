#include "tim.h"

/* --- TIM Handle declarations --- */
{%- for t in timers_simple %}
TIM_HandleTypeDef h{{ t.name.lower() }};
{%- endfor %}
{%- for t in base_with_overwrites %}
TIM_HandleTypeDef h{{ t.name.lower() }};
uint8_t {{ t.name }}_OW = 0;
{%- endfor %}

/* --- DMA Handle declarations --- */
{%- for t in timers if t.has_dma %}
DMA_HandleTypeDef hdma_{{ t.name.lower() }}_up;
{%- endfor %}

{%- for t in base_with_overwrites if t.has_dma_overwrite %}
DMA_HandleTypeDef hdma_{{ t.name.lower() }}_up;
{%- endfor %}


/* --- MX_TIMERS Init functions --- */
{%- for t in timers_simple %}
void MX_{{ t.name }}_Init(void)
{
  {%- for ow in base_with_overwrites if ow.name == t.name %}
  {{ t.name }}_OW = 0;
  HAL_TIM_Base_DeInit(&h{{ t.name.lower() }});
  {%- endfor %}

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  h{{ t.name.lower() }}.Instance = {{ t.name }};
  h{{ t.name.lower() }}.Init.Prescaler = 0;
  h{{ t.name.lower() }}.Init.CounterMode = TIM_COUNTERMODE_UP;
  h{{ t.name.lower() }}.Init.Period = {{ t.period }};
  h{{ t.name.lower() }}.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  h{{ t.name.lower() }}.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&h{{ t.name.lower() }}) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&h{{ t.name.lower() }}, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&h{{ t.name.lower() }}, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
}
{%- endfor %}

{%- for t in base_with_overwrites %}
  {%- for ow in t.overwrites %}
void MX_{{ t.name }}_Init_OW_{{ ow.suffix }}(void)
{
  {{ t.name }}_OW = {{ ow.suffix }};
  HAL_TIM_Base_DeInit(&h{{ t.name.lower() }});

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  h{{ t.name.lower() }}.Instance = {{ t.name }};
  h{{ t.name.lower() }}.Init.Prescaler = 0;
  h{{ t.name.lower() }}.Init.CounterMode = TIM_COUNTERMODE_UP;
  h{{ t.name.lower() }}.Init.Period = {{ ow.period }};
  h{{ t.name.lower() }}.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  h{{ t.name.lower() }}.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&h{{ t.name.lower() }}) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&h{{ t.name.lower() }}, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&h{{ t.name.lower() }}, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
}
  {%- endfor %}
{%- endfor %}

/* --- HAL_TIM_Base_MspInit --- */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
{%- for t in timers_simple if t.name not in base_with_overwrites | map(attribute='name') | list %}
  if(tim_baseHandle->Instance == {{ t.name }})
  {
    __HAL_RCC_{{ t.name }}_CLK_ENABLE();
    {%- if t.has_dma %}
    hdma_{{ t.name.lower() }}_up.Instance = {{ t.dma.name }}_{{ t.dma.stream }};
    hdma_{{ t.name.lower() }}_up.Init.Request = DMA_REQUEST_{{ t.name }}_UP;
    hdma_{{ t.name.lower() }}_up.Init.Direction = DMA_{{ t.dma.direction }};
    hdma_{{ t.name.lower() }}_up.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_{{ t.name.lower() }}_up.Init.MemInc = DMA_MINC_ENABLE;
    hdma_{{ t.name.lower() }}_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_{{ t.name.lower() }}_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_{{ t.name.lower() }}_up.Init.Mode = DMA_NORMAL;
    hdma_{{ t.name.lower() }}_up.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_{{ t.name.lower() }}_up) != HAL_OK)
    {
      Error_Handler();
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_{{ t.name.lower() }}_up, DMA_CHANNEL_NPRIV) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(tim_baseHandle, hdma[TIM_DMA_ID_UPDATE], hdma_{{ t.name.lower() }}_up);
    {%- endif %}
  }
{%- endfor %}

{%- for t in base_with_overwrites %}
  if(tim_baseHandle->Instance == {{ t.name }})
  {
    __HAL_RCC_{{ t.name }}_CLK_ENABLE();
    {%- for ow in t.overwrites %}
    if ({{ t.name }}_OW == {{ ow.suffix }})
    {
      {%- if ow.has_dma %}
      hdma_{{ t.name.lower() }}_up.Instance = {{ ow.dma.name }}_{{ ow.dma.stream }};
      hdma_{{ t.name.lower() }}_up.Init.Request = DMA_REQUEST_{{ t.name }}_UP;
      hdma_{{ t.name.lower() }}_up.Init.Direction = DMA_{{ ow.dma.direction }};
      hdma_{{ t.name.lower() }}_up.Init.PeriphInc = DMA_PINC_DISABLE;
      hdma_{{ t.name.lower() }}_up.Init.MemInc = DMA_MINC_ENABLE;
      hdma_{{ t.name.lower() }}_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
      hdma_{{ t.name.lower() }}_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
      hdma_{{ t.name.lower() }}_up.Init.Mode = DMA_NORMAL;
      hdma_{{ t.name.lower() }}_up.Init.Priority = DMA_PRIORITY_LOW;
      if (HAL_DMA_Init(&hdma_{{ t.name.lower() }}_up) != HAL_OK)
      {
        Error_Handler();
      }

      if (HAL_DMA_ConfigChannelAttributes(&hdma_{{ t.name.lower() }}_up, DMA_CHANNEL_NPRIV) != HAL_OK)
      {
        Error_Handler();
      }

      __HAL_LINKDMA(tim_baseHandle, hdma[TIM_DMA_ID_UPDATE], hdma_{{ t.name.lower() }}_up);
      {%- endif %}
    }
    {%- endfor %}
  }
{%- endfor %}
}
