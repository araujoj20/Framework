#include "tim.h"

/* --- TIM Handle declarations --- */
{% for t in timers | map(attribute='name') | unique %}
TIM_HandleTypeDef h{{ t.lower() }};
{%- endfor %}

/* --- OW Variables --- */
{%- for t in timers | selectattr('has_ow') | map(attribute='name') | unique %}
uint8_t {{ t }}_OW = 0;
{%- endfor %}

/* --- DMA Handle declarations --- */
{%- for t in timers | selectattr('has_dma') | map(attribute='request') | unique %}
DMA_HandleTypeDef hdma_{{ t.lower() }};
{%- endfor %}

/* --- MX_TIMERS Init functions --- */
{% for t in timers %}
void MX_{{ t.name }}{% if t.ow_id > 0 %}_OW_{{ t.ow_id }}{% endif %}_Init(void)
{
  {%- if t.has_ow %}
  {{ t.name }}_OW = {{ t.ow_id }};

  if (__HAL_RCC_{{ t.name }}_IS_CLK_ENABLED()) {
    HAL_TIM_Base_DeInit(&h{{ t.name.lower() }});
  }
  {%- endif %}
  {%- if t.clock_source != "DISABLE" %}
  TIM_ClockConfigTypeDef  sClockSourceConfig = {0};
  {%- endif %}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  {%- if t.input_trigger %}
  TIM_SlaveConfigTypeDef  sSlaveConfig = {0};
  {%- endif %}

  h{{ t.name.lower() }}.Instance = {{ t.name }};
  h{{ t.name.lower() }}.Init.Prescaler = {{ t.prescaler }};
  h{{ t.name.lower() }}.Init.CounterMode = TIM_COUNTERMODE_{{ t.counter_mode }};
  h{{ t.name.lower() }}.Init.Period = {{ t.period }};
  h{{ t.name.lower() }}.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  h{{ t.name.lower() }}.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_{{ t.auto_reload_preload }};
  if (HAL_TIM_Base_Init(&h{{ t.name.lower() }}) != HAL_OK)
  {
    Error_Handler();
  }
  {%- if t.clock_source != "DISABLE" %}
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_{{ t.clock_source}};
  if (HAL_TIM_ConfigClockSource(&h{{ t.name.lower() }}, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  {%- endif %}
  {%- if t.input_trigger %}
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_{{ t.slave_mode }};
  sSlaveConfig.InputTrigger = TIM_TS_{{ t.input_trigger }};
  if (HAL_TIM_SlaveConfigSynchro(&h{{ t.name.lower() }}, &sSlaveConfig) != HAL_OK)
  {
    Error_Handler();
  }
  {%- endif %}
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_{{ t.trigger_event }};
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_{{ t.master_slave_mode }};
  if (HAL_TIMEx_MasterConfigSynchronization(&h{{ t.name.lower() }}, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
}
{% endfor %}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
{%- for t in timers | map(attribute='name') | unique %}
  if(tim_baseHandle->Instance == {{ t }})
  {
    __HAL_RCC_{{ t }}_CLK_ENABLE();
    {%- set variants = (timers | selectattr('name','equalto',t) | list) %}
    {%- set variant_count = variants | length %}
    {%- set has_multi = (variants | selectattr('ow_id','gt',0) | list | length) > 0 %}
    {%- for t2 in variants %}
    {%- if has_multi %}
    if ({{ t2.name }}_OW == {{ t2.ow_id }})
    {
    {%- endif %}
    {%- if t2.has_dma %}
      hdma_{{ t2.request.lower() }}.Instance = {{ t2.dma.name }}_{{ t2.dma.stream }};
      hdma_{{ t2.request.lower() }}.Init.Direction = DMA_{{ t2.dma.direction }};
      hdma_{{ t2.request.lower() }}.Init.PeriphInc = DMA_PINC_DISABLE;
      hdma_{{ t2.request.lower() }}.Init.MemInc = DMA_MINC_ENABLE;
      hdma_{{ t2.request.lower() }}.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
      hdma_{{ t2.request.lower() }}.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
      hdma_{{ t2.request.lower() }}.Init.Mode = DMA_NORMAL;
      hdma_{{ t2.request.lower() }}.Init.Priority = DMA_PRIORITY_LOW;
    {%- if board == "STM32L552" %}
      hdma_{{ t2.request.lower() }}.Init.Request = DMA_REQUEST_{{ t2.name }}_UP;
    {%- endif %}
    {%- if board == "STM32F407" %}
      hdma_{{ t2.request.lower() }}.Init.Channel = DMA_{{ t2.dma.channel | replace('Channel', 'CHANNEL_') | replace('channel', 'CHANNEL_') }};
      hdma_{{ t2.request.lower() }}.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    {%- endif %}
      if (HAL_DMA_Init(&hdma_{{ t2.request.lower() }}) != HAL_OK)
      {
        Error_Handler();
      }
    {%- if board == "STM32L552" %}
      if (HAL_DMA_ConfigChannelAttributes(&hdma_{{ t2.request.lower() }}, DMA_CHANNEL_NPRIV) != HAL_OK)
      {
        Error_Handler();
      }
    {%- endif %}
      __HAL_LINKDMA(tim_baseHandle, hdma[TIM_DMA_ID_UPDATE], hdma_{{ t2.request.lower() }});
    {%- endif %}

    {%- if t2.has_ch_request %}
      __HAL_LINKDMA(tim_baseHandle, hdma[TIM_DMA_ID_CC{{ t2.ch_request_num }}], hdma_{{ t2.request.lower() }});
    {%- endif %}

  {%- if t2.has_interrupt > 0 %}
  /* {{ t2.name }}{% if t2.ow_id > 0 %}_OW_{{ t2.ow_id }}{% endif %} interrupt Init (mode: {{ t2.interrupt_sub_mode if t2.interrupt_sub_mode else 'DEFAULT' }}) */
    HAL_NVIC_SetPriority({{ t2.irq_vector if t2.irq_vector else (t2.request if t2.request else t2.name).upper() ~ '_IRQn' }}, 0, 0);
    HAL_NVIC_EnableIRQ({{ t2.irq_vector if t2.irq_vector else (t2.request if t2.request else t2.name).upper() ~ '_IRQn' }});
    {%- endif %}

    {%- if has_multi %}
    }
    {%- endif %}
    {%- endfor %}
  }
{%- endfor %}
}

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
{%- for t in timers | map(attribute='name') | unique %}
  if(tim_baseHandle->Instance == {{ t }})
  {
    __HAL_RCC_{{ t }}_CLK_DISABLE();
    {%- set variants = (timers | selectattr('name','equalto',t) | list) %}
    {%- set has_multi = (variants | selectattr('ow_id','gt',0) | list | length) > 0 %}
    {%- for t2 in variants %}
    {%- if has_multi %}
    if ({{ t2.name }}_OW == {{ t2.ow_id }})
    {
    {%- endif %}

    {%- if t2.has_ch_request %}
    HAL_DMA_DeInit(tim_baseHandle->hdma[TIM_DMA_ID_CC{{ t2.ch_request_num }}]);
    {%- endif %}

    {%- if t2.has_dma %}
    HAL_DMA_DeInit(tim_baseHandle->hdma[TIM_DMA_ID_UPDATE]);
    {%- endif %}

    {%- if t2.has_interrupt > 0 %}
    HAL_NVIC_DisableIRQ({{ t2.irq_vector if t2.irq_vector else (t2.request if t2.request else t2.name).upper() ~ '_IRQn' }});
    {%- endif %}
    {%- if has_multi %}
    }
    {%- endif %}
    {%- endfor %}
  }
{%- endfor %}
}

