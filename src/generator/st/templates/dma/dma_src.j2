#include "dma.h"

/* DMA handles*/
{%- for dma in dma_list %}
{%- if dma.direction == "MEMORY_TO_MEMORY" %}
DMA_HandleTypeDef hdma_memtomem_{{ dma.name.lower() }}_{{ dma.stream.lower() }};
{%- endif %}
{%- endfor %}

void MX_DMA_Init(void)
{   
    /* DMA controller clock enable */
    {%- if board == "STM32L552" %}
    __HAL_RCC_DMAMUX1_CLK_ENABLE();
    {%- endif %}
    
    {%- for dma in dma_list | map(attribute='name') | unique %}
    __HAL_RCC_{{ dma }}_CLK_ENABLE();
    {%- endfor %}

    {%- for dma in dma_list %}
    {%- if dma.direction == "MEMORY_TO_MEMORY" %}

    /* Configure DMA request on {{ dma.name }}_{{ dma.stream }} */
    {%- set dma_handle = "hdma_memtomem_" + dma.name.lower() + "_" + dma.stream.lower() %}
    {{ dma_handle }}.Instance = {{ dma.name }}_{{ dma.stream }};
    {{ dma_handle }}.Init.Direction = DMA_MEMORY_TO_MEMORY;
    {{ dma_handle }}.Init.PeriphInc = DMA_PINC_DISABLE;
    {{ dma_handle }}.Init.MemInc = DMA_MINC_ENABLE;
    {{ dma_handle }}.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    {{ dma_handle }}.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    {{ dma_handle }}.Init.Mode = DMA_NORMAL;
    {{ dma_handle }}.Init.Priority = DMA_PRIORITY_LOW;
    {%- if board == "STM32L552" %}
    {{ dma_handle }}.Init.Request = DMA_REQUEST_MEM2MEM;
    {%- endif %}
    {%- if board == "STM32F407" %}
    {{ dma_handle }}.Init.Channel = DMA_CHANNEL_0;
    {{ dma_handle }}.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    {{ dma_handle }}.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    {{ dma_handle }}.Init.MemBurst = DMA_MBURST_SINGLE;
    {{ dma_handle }}.Init.PeriphBurst = DMA_PBURST_SINGLE;
    {%- endif %}

    if (HAL_DMA_Init(&hdma_memtomem_{{ dma.name.lower() }}_{{ dma.stream.lower() }}) != HAL_OK)
    {
        Error_Handler();
    }
    {%- if board == "STM32L552" %}
    if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_{{ dma.name.lower() }}_{{ dma.stream.lower() }}, DMA_CHANNEL_NPRIV) != HAL_OK)
    {
        Error_Handler();
    }
    {%- endif %}
    
    {%- endif %}
    {%- endfor %}

    /* DMA interrupt init */
    {%- for dma in dma_list %}
    HAL_NVIC_SetPriority({{ dma.name }}_{{ dma.stream }}_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ({{ dma.name }}_{{ dma.stream }}_IRQn);
    {%- endfor %}
}
